import * as L from "leaflet";
import { MarkerPosition } from "./enums";
var PolyDrawUtil = /** @class */ (function () {
    function PolyDrawUtil() {
    }
    PolyDrawUtil.getBounds = function (polygon, padding) {
        if (padding === void 0) { padding = 0; }
        var tmpLatLng = [];
        polygon.forEach(function (ll) {
            if (isNaN(ll.lat) || isNaN(ll.lng)) {
            }
            tmpLatLng.push(ll);
        });
        var polyLine = new L.Polyline(tmpLatLng);
        var bounds = polyLine.getBounds();
        if (padding !== 0) {
            return bounds.pad(padding);
        }
        return bounds;
    };
    return PolyDrawUtil;
}());
export { PolyDrawUtil };
//TODO make compass ILatLng
var Compass = /** @class */ (function () {
    function Compass(minLat, minLng, maxLat, maxLng) {
        if (minLat === void 0) { minLat = 0; }
        if (minLng === void 0) { minLng = 0; }
        if (maxLat === void 0) { maxLat = 0; }
        if (maxLng === void 0) { maxLng = 0; }
        this.direction = {
            // BoundingBoxCenter: { lat: 0, lng: 0 },
            // CenterOfMass: { lat: 0, lng: 0 },
            East: { lat: 0, lng: 0 },
            North: { lat: 0, lng: 0 },
            NorthEast: { lat: 0, lng: 0 },
            NorthWest: { lat: 0, lng: 0 },
            South: { lat: 0, lng: 0 },
            SouthEast: { lat: 0, lng: 0 },
            SouthWest: { lat: 0, lng: 0 },
            West: { lat: 0, lng: 0 }
        };
        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };
        this.direction.NorthEast = { lat: maxLat, lng: maxLng };
        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };
        this.direction.SouthEast = { lat: minLat, lng: maxLng };
        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };
        this.direction.SouthWest = { lat: minLat, lng: minLng };
        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };
        this.direction.NorthWest = { lat: maxLat, lng: minLng };
        // this.direction.CenterOfMass = { lat: 0, lng: 0 };
        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};
    }
    //TODO default return.
    Compass.prototype.getDirection = function (direction) {
        switch (direction) {
            // case MarkerPosition.CenterOfMass:
            //     return this.direction.CenterOfMass;
            case MarkerPosition.North:
                return this.direction.North;
            case MarkerPosition.NorthEast:
                return this.direction.NorthEast;
            case MarkerPosition.East:
                return this.direction.East;
            case MarkerPosition.SouthEast:
                return this.direction.SouthEast;
            case MarkerPosition.South:
                return this.direction.South;
            case MarkerPosition.SouthWest:
                return this.direction.SouthWest;
            case MarkerPosition.West:
                return this.direction.West;
            case MarkerPosition.NorthWest:
                return this.direction.NorthWest;
            // case MarkerPosition.BoundingBoxCenter:
            //     return this.direction.BoundingBoxCenter;
            default:
                return this.direction.North;
        }
    };
    //TODO startNode, go clockwise or not
    Compass.prototype.getPositions = function (startNode, clockwise, addClosingNode) {
        if (startNode === void 0) { startNode = MarkerPosition.SouthWest; }
        if (clockwise === void 0) { clockwise = false; }
        if (addClosingNode === void 0) { addClosingNode = true; }
        var positions = [];
        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);
        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);
        positions.push([this.direction.South.lng, this.direction.South.lat]);
        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);
        positions.push([this.direction.East.lng, this.direction.East.lat]);
        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);
        positions.push([this.direction.North.lng, this.direction.North.lat]);
        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);
        positions.push([this.direction.West.lng, this.direction.West.lat]);
        if (addClosingNode) {
            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);
        }
        return positions;
    };
    return Compass;
}());
export { Compass };
//# sourceMappingURL=data:application/json;base64,