{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/enums.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.html","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","create","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spreadArray","to","from","pack","l","Array","slice","concat","PolyStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","mapStateSubject","MapStateModel","mapState$","mapZoomLevel$","pipe","map","state","mapBoundState","zoom","updateMapStates","newState","updateMapState","updatePolygons","polygons","updateMapBounds","mapBounds","factory","ɵfac","providedIn","Injectable","DrawMode","MarkerPosition","MapBoundsState","bounds","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","test","turf.intersect","turf.booleanPointInPolygon","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","index_1","turf.nearestPoint","properties","featureIndex","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","selector","className","elements","document","querySelectorAll","item","classList","remove","removeClass","isMoveMode","setFreeDrawMode","add","addClass","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonDrawStates","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","polyInfo","getLayers","getLatLngs","core","ɵɵinject","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","selectors","outputs","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","i0.ɵɵelement","Component","templateUrl","styleUrls","Output","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","minimumFreeDrawZoomLevel","tracer","ngUnsubscribe","config","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","debounceTime","takeUntil","onZoomChange","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","group","L.FeatureGroup","convertToCoords","getPolygon","addLayer","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","Add","addPolygon","Subtract","subtractPolygon","drawStartedEvents","resetTracker","zoomLevel","onoff","onoroff","removeEventListener","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","menu","convertToBoundsPolygon","delete","classNames","classes","join","L.divIcon","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","isActiveDrawMode","L.DomUtil","color","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","imports","NgModule","declarations","providers","exports","entryComponents"],"mappings":"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","sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolyStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n    \r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n    private mapStateSubject = new BehaviorSubject<MapStateModel>(new MapStateModel());\r\n    mapState$: Observable<MapStateModel> = this.mapStateSubject.asObservable();\r\n    mapZoomLevel$: Observable<number>  = this.mapState$.pipe(map((state: MapStateModel) => state.mapBoundState.zoom));\r\n\r\n    private updateMapStates(newState: any): void {\r\n        let state = this.mapStateSubject.value;\r\n        state = { ...state, ...newState };\r\n\r\n        this.mapStateSubject.next(state);\r\n    }\r\n\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        \r\n        this.polygonSubject.next(polygons)\r\n    }\r\n    updateMapBounds(mapBounds: MapBoundsState) {\r\n        this.updateMapStates({ mapBoundState: mapBounds });\r\n    }\r\n}\r\n\r\nclass MapStateModel {\r\n    constructor(\r\n      \r\n        public mapBoundState: MapBoundsState = new MapBoundsState(null, 11)) { }\r\n}\r\nclass MapBoundsState {\r\n    constructor(\r\n        public bounds: L.LatLngBounds,\r\n        public zoom: number) { }\r\n}","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    \r\n    \r\n\r\n    const union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    \r\n    const points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    \r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(\r\n    polygonArray: Position[][][]\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    const coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    latlngs: Feature<Polygon | MultiPolygon>\r\n  ): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    const poly = [];\r\n    const poly2 = [];\r\n\r\n    \r\n\r\n    const latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    const polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            const test = turf.intersect(poly[i], poly2[j]);\r\n            if (test?.geometry.type === 'Point') {\r\n              intersect = !(\r\n                turf.booleanPointInPolygon(test, poly[i]) &&\r\n                turf.booleanPointInPolygon(test, poly2[j])\r\n              );\r\n              \r\n            } else if (test?.geometry.type === 'Polygon') {\r\n              intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            }\r\n\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    \r\n    \r\n    return turf.booleanWithin(\r\n      turf.polygon([polygon1]),\r\n      turf.polygon([polygon2])\r\n    );\r\n  }\r\n\r\n  equalPolygons(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ) {\r\n    \r\n    \r\n    \r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    addMidpointMarkers: boolean = false\r\n  ): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    const coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    \r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      \r\n      const index = turf.nearestPoint(point, polygonPoints).properties\r\n        .featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      \r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      const pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        const polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          const index = turf.nearestPoint(point, polygonPoints).properties\r\n            .featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          \r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const diff = turf.difference(polygon1, polygon2);\r\n    \r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(\r\n    polygon,\r\n    MarkerPosition: ICompass,\r\n    useOffset,\r\n    offsetDirection\r\n  ) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(\r\n    targetPoint: turf.Coord,\r\n    points: turf.FeatureCollection<turf.Point>\r\n  ): number {\r\n    const index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}\r\n","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from './polygon.util';\r\n\r\nexport class PolygonInfo {\r\n  polygon: ILatLng[][][] = [];\r\n  trashcanPoint: ILatLng[] = [];\r\n  sqmArea: number[] = [];\r\n  perimeter: number[] = [];\r\n  constructor(polygon) {\r\n    \r\n    polygon.forEach((polygons, i) => {\r\n      this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n      this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n      this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n    \r\n      this.polygon[i] = polygons;\r\n    });\r\n  }\r\n  setSqmArea(area: number): void {\r\n    this.sqmArea[0] = area;\r\n  }\r\n  private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n    const res = Math.max.apply(\r\n      Math,\r\n      polygon.map(o => o.lat)\r\n    );\r\n    const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n    let previousPoint: ILatLng;\r\n    let nextPoint: ILatLng;\r\n\r\n    if (idx > 0) {\r\n      previousPoint = polygon[idx - 1];\r\n      if (idx < polygon.length - 1) {\r\n        nextPoint = polygon[idx + 1];\r\n      } else {\r\n        nextPoint = polygon[0];\r\n      }\r\n    } else {\r\n      previousPoint = polygon[polygon.length - 1];\r\n      nextPoint = polygon[idx + 1];\r\n    }\r\n\r\n    const secondPoint =\r\n      previousPoint.lng < nextPoint.lng ? previousPoint : nextPoint;\r\n\r\n    const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n    return midpoint;\r\n  }\r\n  private calculatePolygonArea(polygon: ILatLng[]): number {\r\n    const area = PolygonUtil.getSqmArea(polygon as any);\r\n    return area;\r\n  }\r\n  private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n    const perimeter = PolygonUtil.getPerimeter(polygon as any);\r\n    return perimeter;\r\n  }\r\n}\r\nconst addClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.add(className);\r\n  }\r\n};\r\n\r\nconst removeClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.remove(className);\r\n  }\r\n};\r\n\r\nexport class PolygonDrawStates {\r\n  isActivated: boolean;\r\n  isFreeDrawMode: boolean;\r\n  isMoveMode: boolean;\r\n  canRevert: boolean;\r\n  isAuto: boolean;\r\n  hasPolygons: boolean;\r\n  canUsePolyDraw: boolean;\r\n\r\n  constructor() {\r\n    this.canUsePolyDraw = false;\r\n    this.reset();\r\n  }\r\n\r\n  activate(): void {\r\n    this.reset();\r\n    this.isActivated = true;\r\n  }\r\n\r\n  reset(): void {\r\n    this.isActivated = false;\r\n    this.hasPolygons = false;\r\n    this.canRevert = false;\r\n    this.isAuto = false;\r\n\r\n    this.resetDrawModes();\r\n  }\r\n\r\n  resetDrawModes(): void {\r\n    this.isFreeDrawMode = false;\r\n    removeClass('img.leaflet-tile', 'disable-events');\r\n    this.isMoveMode = false;\r\n  }\r\n\r\n  setFreeDrawMode(isAuto: boolean = false): void {\r\n    if (isAuto) {\r\n      this.isActivated = true;\r\n    }\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isFreeDrawMode = true;\r\n      addClass('img.leaflet-tile', 'disable-events');\r\n      if (isAuto) {\r\n        this.isAuto = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  setMoveMode(): void {\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isMoveMode = true;\r\n    }\r\n  }\r\n\r\n  forceCanUseFreeDraw(): void {\r\n    this.canUsePolyDraw = true;\r\n  }\r\n}\r\n\r\nexport interface ILatLng {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\r\n    PolygonInfo[]\r\n  >();\r\n  polygonInformation$: Observable<\r\n    PolygonInfo[]\r\n  > = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\r\n    PolygonDrawStates\r\n  >();\r\n  polygonDrawStates$: Observable<\r\n    PolygonDrawStates\r\n  > = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonDrawStates: PolygonDrawStates = null;\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: PolyStateService) {\r\n    this.polygonDrawStates = new PolygonDrawStates();\r\n  }\r\n\r\n  updatePolygons() {\r\n    \r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n\r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = [];\r\n        v.polygon.forEach(poly => {\r\n          let test2 = [];\r\n\r\n          poly.forEach(polygon => {\r\n            test2 = [...polygon];\r\n            if (\r\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\r\n            ) {\r\n              test2.push(polygon[0]);\r\n            }\r\n            test.push(test2);\r\n          });\r\n        });\r\n\r\n        newPolygons.push(test);\r\n      });\r\n\r\n      this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      this.polygonDrawStates.reset();\r\n      this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\r\n    \r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(\r\n      v => v.polygon[0] === polygon\r\n    );\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    \r\n    \r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      \r\n      const id = v.polygon.findIndex(\r\n        poly => poly.toString() === polygon.toString()\r\n      );\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        \r\n      }\r\n      \r\n    });\r\n    this.updatePolygons();\r\n    \r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    \r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    \r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        \r\n        let polyInfo = new PolygonInfo(\r\n          featureGroup.getLayers()[0].getLatLngs()\r\n        );\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n\r\n  activate() {\r\n    this.polygonDrawStates.activate();\r\n  }\r\n  reset() {\r\n    this.polygonDrawStates.reset();\r\n  }\r\n\r\n  setMoveMode() {\r\n    this.polygonDrawStates.setMoveMode();\r\n  }\r\n\r\n  setFreeDrawMode() {\r\n    this.polygonDrawStates.setFreeDrawMode();\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","<div class=\"marker-menu-inner-wrapper\">\r\n  <div class=\"marker-menu-header\">Alter polygon</div>\r\n  <div class=\"marker-menu-content\">\r\n    <div class=\"marker-menu-button simplify\" (click)=\"onSimplify($event)\">Simplify</div>\r\n    <div class=\"marker-menu-separator\"></div>\r\n    <div class=\"marker-menu-button bbox\" (click)=\"onBbox($event)\" >bbox</div>\r\n  </div>\r\n</div>","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from \"rxjs\";\r\nimport { filter, debounceTime, takeUntil } from \"rxjs/operators\";\r\nimport { Feature, Polygon, MultiPolygon } from \"@turf/turf\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\nimport { TurfHelperService } from \"./turf-helper.service\";\r\nimport { PolygonInformationService } from \"./polygon-information.service\";\r\nimport defaultConfig from \"./polyinfo.json\";\r\nimport { ILatLng, PolygonDrawStates } from \"./polygon-helpers\";\r\nimport { ComponentGeneraterService } from \"./component-generater.service\";\r\nimport { Compass, PolyDrawUtil } from \"./utils\";\r\nimport { MarkerPosition, DrawMode } from \"./enums\";\r\nimport { LeafletHelperService } from \"./leaflet-helper.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private readonly minimumFreeDrawZoomLevel: number = 12;\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: PolyStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$\r\n      .pipe(filter((m) => m !== null))\r\n      .subscribe((map: L.Map) => {\r\n        this.map = map;\r\n        this.config = defaultConfig;\r\n        this.configurate({});\r\n        this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n        this.initPolyDraw();\r\n      });\r\n\r\n    this.mapState.mapZoomLevel$\r\n      .pipe(debounceTime(100), takeUntil(this.ngUnsubscribe))\r\n      .subscribe((zoom: number) => {\r\n        this.onZoomChange(zoom);\r\n      });\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    if (polygon.length > 1) {\r\n      polygon.length = 1;\r\n    }\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          if (latlng.length > 1) {\r\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n            }\r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    this.arrayOfFeatureGroups.forEach((featureGroups) => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    this.polygonInformation.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][][]): void {\r\n    geographicBorders.forEach((group) => {\r\n      const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n      const polygon2 = this.turfHelper.getMultiPolygon(\r\n        this.convertToCoords(group)\r\n      );\r\n\r\n      const polygon = this.getPolygon(polygon2);\r\n\r\n      featureGroup.addLayer(polygon);\r\n      const markerLatlngs = polygon.getLatLngs();\r\n\r\n      markerLatlngs.forEach((polygon) => {\r\n        polygon.forEach((polyElement, i) => {\r\n          if (i === 0) {\r\n            this.addMarker(polyElement, featureGroup);\r\n          } else {\r\n            this.addHoleMarker(polyElement, featureGroup);\r\n          }\r\n        });\r\n        // this.addMarker(polygon[0], featureGroup);\r\n        // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\r\n      });\r\n\r\n      this.arrayOfFeatureGroups.push(featureGroup);\r\n    });\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.setMoveMode();\r\n  }\r\n\r\n  // innehåll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n\r\n      // tslint:disable-next-line: max-line-length\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach((polygon) => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach((polygon) => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach((polygon) => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach((polygon) => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener(\"touchstart\", (e) => {\r\n        this.mouseDown(e);\r\n      });\r\n\r\n      container.addEventListener(\"touchend\", (e) => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchmove\", (e) => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY,\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY,\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n      \r\n    \r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave(event) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.Add:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.Subtract:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n\r\n  private onZoomChange(zoomLevel: number): void {\r\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\r\n    } else {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\r\n      this.polygonInformation.setMoveMode();\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n\r\n    this.map[onoroff](\"mousemove\", this.mouseMove, this);\r\n    this.map[onoroff](\"mouseup\", this.mouseUpLeave, this);\r\n\r\n    if (onoff) {\r\n      this.map\r\n        .getContainer()\r\n        .addEventListener(\"touchmove\", (e) => this.mouseMove(e));\r\n      this.map\r\n        .getContainer()\r\n        .addEventListener(\"touchend\", (e) => this.mouseUpLeave(e));\r\n    } else {\r\n      this.map\r\n        .getContainer()\r\n        .removeEventListener(\"touchmove\", (e) => this.mouseMove(e), true);\r\n      this.map\r\n        .getContainer()\r\n        .removeEventListener(\"touchend\", (e) => this.mouseUpLeave(e), true);\r\n    }\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach((polygon) => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n\r\n    this.polygonInformation.activate();\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on(\"click\", (e) => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === \"MultiPolygon\") {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat,\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(\r\n          (element) => {\r\n            const feature = this.turfHelper.getMultiPolygon([element]);\r\n            polyIntersection = this.turfHelper.polygonIntersect(\r\n              feature,\r\n              latlngs\r\n            );\r\n            if (polyIntersection) {\r\n              newArray.push(featureGroup);\r\n              polygonFeature.push(feature);\r\n            }\r\n          }\r\n        );\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach((value) => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n    this.map[onoroff](\"mousedown\", this.mouseDown, this);\r\n    if (onoff) {\r\n      this.map\r\n        .getContainer()\r\n        .addEventListener(\"touchstart\", (e) => this.mouseDown(e));\r\n    } else {\r\n      this.map\r\n        .getContainer()\r\n        .removeEventListener(\"touchstart\", (e) => this.mouseDown(e), true);\r\n    }\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*   if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString(),\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on(\"drag\", (e) => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", (e) => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n\r\n        //   })\r\n        // );\r\n        marker.on(\"click\", (e) => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on(\"click\", (e) => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString(),\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on(\"drag\", (e) => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", (e) => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(\" \");\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n    }\r\n\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach((element) => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n\r\n          unkink.forEach((polygon) => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n\r\n        const testCoord = [];\r\n        unkink.forEach((polygon) => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n        // this.addPolygon(this.turfHelper.getMultiPolygon(testCoord), false, true);\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === \"MultiPolygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === \"Polygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      (featureGroups) => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach((v) => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        (featureGroups) => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) {\r\n        return false;\r\n      }\r\n    }\r\n    if (poly1.length !== poly2.length) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: \"\",\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.Add:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color,\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.Subtract:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: \"#D9460F\",\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n\r\n      if (isActiveDrawMode) {\r\n        this.polygonInformation.setFreeDrawMode();\r\n      } else {\r\n        this.polygonInformation.setMoveMode();\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\r\n      this.polygonInformation.setMoveMode();\r\n      this.setDrawMode(DrawMode.Off);\r\n    } else {\r\n      this.polygonInformation.setFreeDrawMode();\r\n      this.setDrawMode(DrawMode.Add);\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.Add);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.Subtract);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert(\"open menu\");\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe((e) => {\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe((e) => {\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(\r\n    latlngs: ILatLng[],\r\n    addMidpointMarkers: boolean = false\r\n  ) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(\r\n      polygon,\r\n      addMidpointMarkers\r\n    );\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getSouth(),\r\n      bounds.getWest(),\r\n      bounds.getNorth(),\r\n      bounds.getEast()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection.lat,\r\n      lng: compassDirection.lng,\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\nimport { PolyDrawService } from './polydraw.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport { PolyStateService } from './map-state.service';\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  providers: [PolyDrawService, PolygonInformationService, PolyStateService],\r\n  exports: [AlterPolygonComponent ],\r\n  entryComponents: [AlterPolygonComponent]\r\n})\r\nexport class MyLibModule {}\r\n"]}