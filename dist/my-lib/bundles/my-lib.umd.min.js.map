{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPosition","MapStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","updateMapState","map","updatePolygons","polygons","console","log","Injectable","providedIn","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","bounds","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","turf.intersect","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","test","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","turf.booleanPointInPolygon","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","tslib_1.__decorate","Output","Component","selector","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","tracer","polygonDrawStates","ngUnsubscribe","config","pipe","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","AddPolygon","addPolygon","SubtractPolygon","subtractPolygon","drawStartedEvents","resetTracker","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","menu","delete","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","convertToBoundsPolygon","classNames","classes","join","L.divIcon","className","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","L.DomUtil","removeClass","color","addClass","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MapStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n\r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n        this.polygonSubject.next(polygons)\r\n    }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log('poly1: ', poly1);\r\n    console.log('poly2: ', poly2);\r\n\r\n    let union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    let points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log('Get TurfPolygon:', polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    let coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    let poly = [];\r\n    let poly2 = [];\r\n\r\n    console.log('polygonIntersect', polygon, latlngs);\r\n\r\n    let latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    let polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log('Ytre: ', polygon2);\r\n    return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));\r\n  }\r\n\r\n  equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>, addMidpointMarkers: boolean = false): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    let coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log('polygon: ', polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log('test', test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      let pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        let polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log('coordinates', coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(polygon, MarkerPosition: ICompass, useOffset, offsetDirection) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number {\r\n    let index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from \"./polygon.util\";\r\n\r\nexport class PolygonInfo {\r\n    polygon: ILatLng[][][] = [];\r\n    trashcanPoint: ILatLng[] = [];\r\n    sqmArea: number[] = [];\r\n    perimeter: number[] = [];\r\n    constructor(polygon) {\r\n        console.log(\"PolygonInfo: \", polygon);\r\n        polygon.forEach((polygons, i) => { this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n            this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n            this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n            console.log(polygons[0]);\r\n            this.polygon[i] = polygons\r\n        })\r\n        \r\n    }\r\n    setSqmArea(area: number): void {\r\n        this.sqmArea[0] = area;\r\n    }\r\n    private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n\r\n        const res = Math.max.apply(Math, polygon.map(o => o.lat));\r\n        const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n        let previousPoint: ILatLng;\r\n        let nextPoint: ILatLng;\r\n\r\n        if (idx > 0) {\r\n            previousPoint = polygon[idx - 1];\r\n            if (idx < polygon.length - 1) {\r\n                nextPoint = polygon[idx + 1];\r\n            } else {\r\n                nextPoint = polygon[0];\r\n            }\r\n        } else {\r\n            previousPoint = polygon[polygon.length - 1];\r\n            nextPoint = polygon[idx + 1];\r\n        }\r\n\r\n        const secondPoint = (previousPoint.lng < nextPoint.lng) ? previousPoint : nextPoint;\r\n\r\n        const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n        return midpoint;\r\n    }\r\n    private calculatePolygonArea(polygon: ILatLng[]): number {\r\n        const area = PolygonUtil.getSqmArea((polygon) as any);\r\n        return area;\r\n    }\r\n    private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n        const perimeter = PolygonUtil.getPerimeter((polygon) as any);\r\n        return perimeter;\r\n    }\r\n    \r\n}\r\n\r\nexport class PolygonDrawStates {\r\n    isActivated: boolean;\r\n    isFreeDrawMode: boolean;\r\n    isMoveMode: boolean;\r\n    canRevert: boolean;\r\n    isAuto: boolean;\r\n    hasPolygons: boolean;\r\n    canUsePolyDraw: boolean;\r\n\r\n\r\n    constructor() {\r\n        this.canUsePolyDraw = false;\r\n        this.reset();\r\n    }\r\n\r\n    activate(): void {\r\n        this.reset();\r\n        this.isActivated = true;\r\n    }\r\n\r\n    reset(): void {\r\n        this.isActivated = false;\r\n        this.hasPolygons = false;\r\n        this.canRevert = false;\r\n        this.isAuto = false;\r\n\r\n        this.resetDrawModes();\r\n    }\r\n\r\n    resetDrawModes(): void {\r\n        this.isFreeDrawMode = false;\r\n        this.isMoveMode = false;\r\n    }\r\n\r\n    setFreeDrawMode(isAuto: boolean = false): void {\r\n        if (isAuto) {\r\n            this.isActivated = true;\r\n        }\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isFreeDrawMode = true;\r\n            if (isAuto) {\r\n                this.isAuto = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMoveMode(): void {\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isMoveMode = true;\r\n        }\r\n    }\r\n\r\n    forceCanUseFreeDraw(): void {\r\n        this.canUsePolyDraw = true;\r\n    }\r\n}\r\n\r\nexport interface ILatLng {\r\n    lat: number, \r\n    lng: number;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyDrawService } from \"./polydraw.service\";\r\nimport { MapStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<PolygonInfo[]>();\r\n  polygonInformation$: Observable<PolygonInfo[]> = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<PolygonDrawStates>();\r\n  polygonDrawStates$: Observable<PolygonDrawStates> = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: MapStateService) {}\r\n\r\n  updatePolygons() {\r\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n      \r\n      \r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = []\r\n        v.polygon.forEach((poly) => {\r\n          let test2 = []\r\n            \r\n            poly.forEach(polygon => {\r\n              test2 = [...polygon]\r\n              if (polygon[0].toString() !== polygon[polygon.length - 1].toString()) {\r\n                test2.push(polygon[0]);             \r\n            }  \r\n            test.push(test2)\r\n            });\r\n            \r\n            \r\n            });\r\n           \r\n            newPolygons.push(test)\r\n        });\r\n\r\n      // this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      // this.polygonDrawStates.reset();\r\n      // this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(v => v.polygon[0] === polygon);\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log(\"DeleteTrashCan: \", polygon);\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(poly => poly.toString() === polygon.toString());\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log(\"ID: \", id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log(\"Index: \", index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(featureGroup.getLayers()[0].getLatLngs());\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Feature, Polygon, MultiPolygon } from '@turf/turf';\r\nimport { MapStateService } from './map-state.service';\r\nimport { TurfHelperService } from './turf-helper.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport defaultConfig from './polyinfo.json';\r\nimport { ILatLng } from './polygon-helpers';\r\nimport { ComponentGeneraterService } from './component-generater.service';\r\nimport { Compass, PolyDrawUtil } from './utils';\r\nimport { MarkerPosition } from './enums';\r\nimport { LeafletHelperService } from './leaflet-helper.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(DrawMode.Off);\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  private readonly polygonDrawStates = null;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: MapStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log('pre this.config', this.config);\r\n      this.config = defaultConfig;\r\n      console.log('this.config', this.config);\r\n      this.configurate({});\r\n      console.log('after this.config', this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log('PolyInfo start: ', k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log('deletePolygon: ', polygon);\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            /* if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n              }  */\r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log('Test: ', polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log('equals: ', equals, ' length: ', length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // this.polygonDrawStates.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][]): void {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(this.convertToCoords(geographicBorders));\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log('markers: ', markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]), latlngs[latlngs.length - 1].length);\r\n      const within = this.turfHelper.isWithin(L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]), L.GeoJSON.latLngsToCoords(latlngs[0]));\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log('Within1 ', within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(L.GeoJSON.latLngsToCoords(latlngs[index]), L.GeoJSON.latLngsToCoords(latlngs[0]));\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener('touchstart', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchend', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchmove', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log('mouseDown', event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([event.touches[0].clientX, event.touches[0].clientY]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([event.touches[0].clientX, event.touches[0].clientY]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<Polygon | MultiPolygon> = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.AddPolygon:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.SubtractPolygon:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? 'on' : 'off';\r\n\r\n    this.map[onoroff]('mousemove', this.mouseMove, this);\r\n    this.map[onoroff]('mouseup', this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(latlngs: Feature<Polygon | MultiPolygon>, simplify: boolean, noMerge: boolean = false) {\r\n    console.log('addPolygon', latlngs, simplify, noMerge, this.kinks, this.config);\r\n\r\n    if (this.mergePolygons && !noMerge && this.arrayOfFeatureGroups.length > 0 && !this.kinks) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(latlngs: Feature<Polygon | MultiPolygon>, simplify: boolean) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log('AddPolygonLayer: ', latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log('Array: ', this.arrayOfFeatureGroups);\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on('click', e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === 'MultiPolygon') {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [newPoint.lng, newPoint.lat]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('getPolygons: ', latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('merge', latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      console.log('Merger: ', featureCollection.features[0]);\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(featureCollection.features[0]);\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(featureCollection.features[0]);\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? 'on' : 'off';\r\n    this.map[onoroff]('mousedown', this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n\r\n    const menuMarkerIdx = this.getMarkerIndex(latlngs, this.config.markers.markerMenuIcon.position);\r\n    const deleteMarkerIdx = this.getMarkerIndex(latlngs, this.config.markers.markerDeleteIcon.position);\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      }\r\n      const marker = new L.Marker(latlng, { icon: this.createDivIcon(iconClasses), draggable: true, title: i.toString() });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n\r\n\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        marker.on('click', e => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on('click', e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, { icon: this.createDivIcon(iconClasses), draggable: true, title: i.toString() });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(' ');\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    console.log('markerdrag: ', layerLength);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log('Posisjoner: ', posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log('Posisjoner 2: ', posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log('Hole: ', hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log('STart index: ', length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log('Polygon drag: ', posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log('Hole 2: ', hole);\r\n    }\r\n    console.log('Nye posisjoner: ', newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log('Markerdragend polygon: ', featureCollection.features[0].geometry.coordinates);\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n\r\n        console.log('Markerdragend: ', feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log('Unkink: ', unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(featureCollection.features[0].geometry.coordinates);\r\n      console.log('Markerdragend: ', feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log('Unkink: ', unkink);\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(feature: Feature<Polygon | MultiPolygon>): ILatLng[][] {\r\n    console.log('getLatLngsFromJson: ', feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (feature.geometry.coordinates.length > 1 && feature.geometry.type === 'MultiPolygon') {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (feature.geometry.coordinates[0].length > 1 && feature.geometry.type === 'Polygon') {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(layers, latlngs: Feature<Polygon | MultiPolygon>, polygonFeature) {\r\n    console.log('unionPolygons', layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroup', featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(featureGroups => featureGroups !== featureGroup);\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroupOnMerge', featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (v.polygon.toString() !== polygon[0].toString() && v.polygon[0].toString() === polygon[0][0].toString()) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (v.polygon.toString() !== polygon[0].toString() && v.polygon[0].toString() !== polygon[0][0].toString()) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(featureGroups => featureGroups !== featureGroup);\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log('deletePolygonOnMerge', polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log('EQUALS', polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) { return false; }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) { return false; }\r\n    }\r\n    if (poly1.length !== poly2.length) { return false; }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(enableDragging: boolean, enableDoubleClickZoom: boolean, enableScrollWheelZoom: boolean) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom ? this.map.doubleClickZoom.enable() : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom ? this.map.scrollWheelZoom.enable() : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log('setDrawMode', this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: ''\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.AddPolygon:\r\n          L.DomUtil.addClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.SubtractPolygon:\r\n          L.DomUtil.addClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: '#D9460F'\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.SubtractPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert('open menu');\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log('bbox clicked', e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log('simplyfi clicked', e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(latlngs: ILatLng[], addMidpointMarkers: boolean = false) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(this.convertToCoords([latlngs]));\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(polygon, addMidpointMarkers);\r\n\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(this.convertToCoords([latlngs]));\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(latlngs, (Math.sqrt(2) / 2));\r\n    const compass = new Compass(bounds.getSouth(), bounds.getWest(), bounds.getNorth(), bounds.getEast());\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n        lat: compassDirection.lat,\r\n        lng: compassDirection.lng\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(targetPoint, fc as any);\r\n\r\n    return nearestPointIdx;\r\n}\r\n\r\n\r\n}\r\n// flytt til enum.ts\r\nexport enum DrawMode {\r\n  Off = 0,\r\n  AddPolygon = 1,\r\n  EditPolygon = 2,\r\n  SubtractPolygon = 3,\r\n  LoadPolygon = 4\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  exports: [ ]\r\n})\r\nexport class MyLibModule {}\r\n"]}