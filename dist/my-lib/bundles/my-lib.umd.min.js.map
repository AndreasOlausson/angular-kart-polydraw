{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPosition","PolyStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","mapStateSubject","MapStateModel","mapState$","mapZoomLevel$","pipe","map","state","mapBoundState","zoom","updateMapStates","newState","updateMapState","updatePolygons","polygons","updateMapBounds","mapBounds","Injectable","providedIn","MapBoundsState","bounds","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","test","turf.intersect","_a","turf.booleanPointInPolygon","_b","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","index_1","turf.nearestPoint","properties","featureIndex","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","addClass","selector","className","elements","document","querySelectorAll","item","classList","add","removeClass","remove","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonDrawStates","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","polyInfo","getLayers","getLatLngs","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","Output","Component","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","minimumFreeDrawZoomLevel","tracer","ngUnsubscribe","config","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","debounceTime","takeUntil","onZoomChange","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","group","L.FeatureGroup","convertToCoords","getPolygon","addLayer","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","Add","addPolygon","Subtract","subtractPolygon","drawStartedEvents","resetTracker","zoomLevel","onoff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","onoroff","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","menu","convertToBoundsPolygon","delete","classNames","classes","join","L.divIcon","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","isActiveDrawMode","L.DomUtil","color","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","NgModule","declarations","imports","providers","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolyStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n    \r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n    private mapStateSubject = new BehaviorSubject<MapStateModel>(new MapStateModel());\r\n    mapState$: Observable<MapStateModel> = this.mapStateSubject.asObservable();\r\n    mapZoomLevel$: Observable<number>  = this.mapState$.pipe(map((state: MapStateModel) => state.mapBoundState.zoom));\r\n\r\n    private updateMapStates(newState: any): void {\r\n        let state = this.mapStateSubject.value;\r\n        state = { ...state, ...newState };\r\n\r\n        this.mapStateSubject.next(state);\r\n    }\r\n\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        \r\n        this.polygonSubject.next(polygons)\r\n    }\r\n    updateMapBounds(mapBounds: MapBoundsState) {\r\n        this.updateMapStates({ mapBoundState: mapBounds });\r\n    }\r\n}\r\n\r\nclass MapStateModel {\r\n    constructor(\r\n      \r\n        public mapBoundState: MapBoundsState = new MapBoundsState(null, 11)) { }\r\n}\r\nclass MapBoundsState {\r\n    constructor(\r\n        public bounds: L.LatLngBounds,\r\n        public zoom: number) { }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    \r\n    \r\n\r\n    const union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    \r\n    const points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    \r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(\r\n    polygonArray: Position[][][]\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    const coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    latlngs: Feature<Polygon | MultiPolygon>\r\n  ): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    const poly = [];\r\n    const poly2 = [];\r\n\r\n    \r\n\r\n    const latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    const polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            const test = turf.intersect(poly[i], poly2[j]);\r\n            if (test?.geometry.type === 'Point') {\r\n              intersect = !(\r\n                turf.booleanPointInPolygon(test, poly[i]) &&\r\n                turf.booleanPointInPolygon(test, poly2[j])\r\n              );\r\n              \r\n            } else if (test?.geometry.type === 'Polygon') {\r\n              intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            }\r\n\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    \r\n    \r\n    return turf.booleanWithin(\r\n      turf.polygon([polygon1]),\r\n      turf.polygon([polygon2])\r\n    );\r\n  }\r\n\r\n  equalPolygons(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ) {\r\n    \r\n    \r\n    \r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    addMidpointMarkers: boolean = false\r\n  ): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    const coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    \r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      \r\n      const index = turf.nearestPoint(point, polygonPoints).properties\r\n        .featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      \r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      const pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        const polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          const index = turf.nearestPoint(point, polygonPoints).properties\r\n            .featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          \r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const diff = turf.difference(polygon1, polygon2);\r\n    \r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(\r\n    polygon,\r\n    MarkerPosition: ICompass,\r\n    useOffset,\r\n    offsetDirection\r\n  ) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(\r\n    targetPoint: turf.Coord,\r\n    points: turf.FeatureCollection<turf.Point>\r\n  ): number {\r\n    const index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}\r\n","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from './polygon.util';\r\n\r\nexport class PolygonInfo {\r\n  polygon: ILatLng[][][] = [];\r\n  trashcanPoint: ILatLng[] = [];\r\n  sqmArea: number[] = [];\r\n  perimeter: number[] = [];\r\n  constructor(polygon) {\r\n    \r\n    polygon.forEach((polygons, i) => {\r\n      this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n      this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n      this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n    \r\n      this.polygon[i] = polygons;\r\n    });\r\n  }\r\n  setSqmArea(area: number): void {\r\n    this.sqmArea[0] = area;\r\n  }\r\n  private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n    const res = Math.max.apply(\r\n      Math,\r\n      polygon.map(o => o.lat)\r\n    );\r\n    const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n    let previousPoint: ILatLng;\r\n    let nextPoint: ILatLng;\r\n\r\n    if (idx > 0) {\r\n      previousPoint = polygon[idx - 1];\r\n      if (idx < polygon.length - 1) {\r\n        nextPoint = polygon[idx + 1];\r\n      } else {\r\n        nextPoint = polygon[0];\r\n      }\r\n    } else {\r\n      previousPoint = polygon[polygon.length - 1];\r\n      nextPoint = polygon[idx + 1];\r\n    }\r\n\r\n    const secondPoint =\r\n      previousPoint.lng < nextPoint.lng ? previousPoint : nextPoint;\r\n\r\n    const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n    return midpoint;\r\n  }\r\n  private calculatePolygonArea(polygon: ILatLng[]): number {\r\n    const area = PolygonUtil.getSqmArea(polygon as any);\r\n    return area;\r\n  }\r\n  private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n    const perimeter = PolygonUtil.getPerimeter(polygon as any);\r\n    return perimeter;\r\n  }\r\n}\r\nconst addClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.add(className);\r\n  }\r\n};\r\n\r\nconst removeClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.remove(className);\r\n  }\r\n};\r\n\r\nexport class PolygonDrawStates {\r\n  isActivated: boolean;\r\n  isFreeDrawMode: boolean;\r\n  isMoveMode: boolean;\r\n  canRevert: boolean;\r\n  isAuto: boolean;\r\n  hasPolygons: boolean;\r\n  canUsePolyDraw: boolean;\r\n\r\n  constructor() {\r\n    this.canUsePolyDraw = false;\r\n    this.reset();\r\n  }\r\n\r\n  activate(): void {\r\n    this.reset();\r\n    this.isActivated = true;\r\n  }\r\n\r\n  reset(): void {\r\n    this.isActivated = false;\r\n    this.hasPolygons = false;\r\n    this.canRevert = false;\r\n    this.isAuto = false;\r\n\r\n    this.resetDrawModes();\r\n  }\r\n\r\n  resetDrawModes(): void {\r\n    this.isFreeDrawMode = false;\r\n    removeClass('img.leaflet-tile', 'disable-events');\r\n    this.isMoveMode = false;\r\n  }\r\n\r\n  setFreeDrawMode(isAuto: boolean = false): void {\r\n    if (isAuto) {\r\n      this.isActivated = true;\r\n    }\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isFreeDrawMode = true;\r\n      addClass('img.leaflet-tile', 'disable-events');\r\n      if (isAuto) {\r\n        this.isAuto = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  setMoveMode(): void {\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isMoveMode = true;\r\n    }\r\n  }\r\n\r\n  forceCanUseFreeDraw(): void {\r\n    this.canUsePolyDraw = true;\r\n  }\r\n}\r\n\r\nexport interface ILatLng {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\r\n    PolygonInfo[]\r\n  >();\r\n  polygonInformation$: Observable<\r\n    PolygonInfo[]\r\n  > = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\r\n    PolygonDrawStates\r\n  >();\r\n  polygonDrawStates$: Observable<\r\n    PolygonDrawStates\r\n  > = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonDrawStates: PolygonDrawStates = null;\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: PolyStateService) {\r\n    this.polygonDrawStates = new PolygonDrawStates();\r\n  }\r\n\r\n  updatePolygons() {\r\n    \r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n\r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = [];\r\n        v.polygon.forEach(poly => {\r\n          let test2 = [];\r\n\r\n          poly.forEach(polygon => {\r\n            test2 = [...polygon];\r\n            if (\r\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\r\n            ) {\r\n              test2.push(polygon[0]);\r\n            }\r\n            test.push(test2);\r\n          });\r\n        });\r\n\r\n        newPolygons.push(test);\r\n      });\r\n\r\n      this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      this.polygonDrawStates.reset();\r\n      this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\r\n    \r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(\r\n      v => v.polygon[0] === polygon\r\n    );\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    \r\n    \r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      \r\n      const id = v.polygon.findIndex(\r\n        poly => poly.toString() === polygon.toString()\r\n      );\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        \r\n      }\r\n      \r\n    });\r\n    this.updatePolygons();\r\n    \r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    \r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    \r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        \r\n        let polyInfo = new PolygonInfo(\r\n          featureGroup.getLayers()[0].getLatLngs()\r\n        );\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n\r\n  activate() {\r\n    this.polygonDrawStates.activate();\r\n  }\r\n  reset() {\r\n    this.polygonDrawStates.reset();\r\n  }\r\n\r\n  setMoveMode() {\r\n    this.polygonDrawStates.setMoveMode();\r\n  }\r\n\r\n  setFreeDrawMode() {\r\n    this.polygonDrawStates.setFreeDrawMode();\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from \"rxjs\";\r\nimport { filter, debounceTime, takeUntil } from \"rxjs/operators\";\r\nimport { Feature, Polygon, MultiPolygon } from \"@turf/turf\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\nimport { TurfHelperService } from \"./turf-helper.service\";\r\nimport { PolygonInformationService } from \"./polygon-information.service\";\r\nimport defaultConfig from \"./polyinfo.json\";\r\nimport { ILatLng, PolygonDrawStates } from \"./polygon-helpers\";\r\nimport { ComponentGeneraterService } from \"./component-generater.service\";\r\nimport { Compass, PolyDrawUtil } from \"./utils\";\r\nimport { MarkerPosition, DrawMode } from \"./enums\";\r\nimport { LeafletHelperService } from \"./leaflet-helper.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private readonly minimumFreeDrawZoomLevel: number = 12;\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: PolyStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$\r\n      .pipe(filter((m) => m !== null))\r\n      .subscribe((map: L.Map) => {\r\n        this.map = map;\r\n        this.config = defaultConfig;\r\n        this.configurate({});\r\n        this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n        this.initPolyDraw();\r\n      });\r\n\r\n    this.mapState.mapZoomLevel$\r\n      .pipe(debounceTime(100), takeUntil(this.ngUnsubscribe))\r\n      .subscribe((zoom: number) => {\r\n        this.onZoomChange(zoom);\r\n      });\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    if (polygon.length > 1) {\r\n      polygon.length = 1;\r\n    }\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          if (latlng.length > 1) {\r\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n            }\r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    this.arrayOfFeatureGroups.forEach((featureGroups) => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    this.polygonInformation.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][][]): void {\r\n    geographicBorders.forEach((group) => {\r\n      const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n      const polygon2 = this.turfHelper.getMultiPolygon(\r\n        this.convertToCoords(group)\r\n      );\r\n\r\n      const polygon = this.getPolygon(polygon2);\r\n\r\n      featureGroup.addLayer(polygon);\r\n      const markerLatlngs = polygon.getLatLngs();\r\n\r\n      markerLatlngs.forEach((polygon) => {\r\n        polygon.forEach((polyElement, i) => {\r\n          if (i === 0) {\r\n            this.addMarker(polyElement, featureGroup);\r\n          } else {\r\n            this.addHoleMarker(polyElement, featureGroup);\r\n          }\r\n        });\r\n        // this.addMarker(polygon[0], featureGroup);\r\n        // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\r\n      });\r\n\r\n      this.arrayOfFeatureGroups.push(featureGroup);\r\n    });\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.setMoveMode();\r\n  }\r\n\r\n  // innehåll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n\r\n      // tslint:disable-next-line: max-line-length\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach((polygon) => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach((polygon) => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach((polygon) => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach((polygon) => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      \r\n      container.addEventListener(\"touchstart\", (e) => {\r\n      \r\n        this.mouseDown(e);\r\n      });\r\n\r\n      container.addEventListener(\"touchend\", (e) => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchmove\", (e) => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY,\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY,\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave(event) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.Add:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.Subtract:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n\r\n  private onZoomChange(zoomLevel: number): void {\r\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\r\n    } else {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\r\n      this.polygonInformation.setMoveMode();\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n\r\n    if(onoff){\r\n\r\n      this.map.getContainer().addEventListener(\"mousemove\", e => this.mouseMove(e));\r\n      this.map.getContainer().addEventListener(\"mouseup\", e =>this.mouseUpLeave(e));\r\n      this.map.getContainer().addEventListener(\"touchmove\", e => this.mouseMove(e));\r\n      this.map.getContainer().addEventListener(\"touchend\", e =>this.mouseUpLeave(e));}\r\n    \r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach((polygon) => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n\r\n    this.polygonInformation.activate();\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on(\"click\", (e) => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === \"MultiPolygon\") {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat,\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(\r\n          (element) => {\r\n            const feature = this.turfHelper.getMultiPolygon([element]);\r\n            polyIntersection = this.turfHelper.polygonIntersect(\r\n              feature,\r\n              latlngs\r\n            );\r\n            if (polyIntersection) {\r\n              newArray.push(featureGroup);\r\n              polygonFeature.push(feature);\r\n            }\r\n          }\r\n        );\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach((value) => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n    this.map[onoroff](\"mousedown\", this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*   if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString(),\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on(\"drag\", (e) => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", (e) => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n\r\n        //   })\r\n        // );\r\n        marker.on(\"click\", (e) => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on(\"click\", (e) => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString(),\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on(\"drag\", (e) => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", (e) => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(\" \");\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n    }\r\n\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach((element) => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n\r\n          unkink.forEach((polygon) => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n\r\n        const testCoord = [];\r\n        unkink.forEach((polygon) => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n        // this.addPolygon(this.turfHelper.getMultiPolygon(testCoord), false, true);\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === \"MultiPolygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === \"Polygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      (featureGroups) => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach((v) => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        (featureGroups) => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach((featureGroup) => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) {\r\n        return false;\r\n      }\r\n    }\r\n    if (poly1.length !== poly2.length) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: \"\",\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.Add:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color,\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.Subtract:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: \"#D9460F\",\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n\r\n      if (isActiveDrawMode) {\r\n        this.polygonInformation.setFreeDrawMode();\r\n      } else {\r\n        this.polygonInformation.setMoveMode();\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\r\n      this.polygonInformation.setMoveMode();\r\n      this.setDrawMode(DrawMode.Off);\r\n    } else {\r\n      this.polygonInformation.setFreeDrawMode();\r\n      this.setDrawMode(DrawMode.Add);\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.Add);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.Subtract);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert(\"open menu\");\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe((e) => {\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe((e) => {\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(\r\n    latlngs: ILatLng[],\r\n    addMidpointMarkers: boolean = false\r\n  ) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(\r\n      polygon,\r\n      addMidpointMarkers\r\n    );\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getSouth(),\r\n      bounds.getWest(),\r\n      bounds.getNorth(),\r\n      bounds.getEast()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection.lat,\r\n      lng: compassDirection.lng,\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\nimport { PolyDrawService } from './polydraw.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport { PolyStateService } from './map-state.service';\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  providers: [PolyDrawService, PolygonInformationService, PolyStateService],\r\n  exports: [AlterPolygonComponent ],\r\n  entryComponents: [AlterPolygonComponent]\r\n})\r\nexport class MyLibModule {}\r\n"]}