{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/my-lib.module.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/turf-helper.service.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPlacement","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","bounds","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","_this","drawModeSubject","BehaviorSubject","Off","drawMode$","asObservable","arrayOfFeatureGroups","tracer","polygonDrawStates","ngUnsubscribe","Subject","config","map$","pipe","filter","subscribe","map","console","log","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","polygonInformation$","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","featureGroup","layer","getLayers","latlngs","getLatLngs","latlng","index","polygon3","test","equals","polygonArrayEquals","deleteTrashcan","removeFeatureGroup","deleteTrashCanOnMulti","splice","setLatLngs","addPolygonLayer","toGeoJSON","featureGroups","removeLayer","deletePolygonInformationStorage","updatePolygons","getDrawMode","addViken","addAutoPolygon","geographicBorders","L.FeatureGroup","polygon2","getMultiPolygon","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","createPolygonInformationStorage","coords","coordinates_1","L.GeoJSON","latLngsToCoords","within","isWithin","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","turfConcaveman","stopDraw","AddPolygon","addPolygon","SubtractPolygon","subtractPolygon","drawStartedEvents","resetTracker","onoff","onoroff","subtract","simplify","noMerge","merge","latLngs","getSimplified","on","polygonClicked","poly","newPoint","geometry","type","newPolygon","injectPointToPolygon","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","features","coordinates","element","feature","polygonIntersect","getTurfPolygon","unionPolygons","addHole","polygonDifference","removeFeatureGroupOnMerge","newLatlngs","getCoords","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","menu","delete","marker","L.Marker","icon","createDivIcon","draggable","title","toString","addTo","markerDrag","markerDragEnd","classNames","classes","join","L.divIcon","className","newPos","testarray","hole","layerLength","posarrays","j","getLatLng","length2","hasKinks","unkink","getKinks","coord","coordsToLatLngs","layers","addNew","union","deletePolygonOnMerge","clearLayers","polygon_1","polygonInformationStorage","v","polygonArrayEqualsMerge","poly1","poly2","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","L.DomUtil","removeClass","color","addClass","modeChange","saveCurrentState","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","generateAlterPopup","instance","bboxClicked","simplyfiClicked","location","nativeElement","convertToBoundsPolygon","createPolygon","Math","sqrt","compassDirection","getWest","getSouth","getEast","getNorth","latLngPoint","targetPoint","getCoord","fc","getFeaturePointCollection","getNearestPointIndex","MapStateService","mapSubject","updateMapState","polygons","Injectable","providedIn","AlterPolygonComponent","EventEmitter","onSimplify","$event","emit","onBbox","tslib_1.__decorate","Output","Component","selector","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","PolygonUtil","getCenter","pi","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getSqmArea","geoJsonPoly","L.Polygon","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","a","indexOf","find","reduce","b","getMidPoint","point1","point2","p1","turf.point","p2","midpoint","turf.midpoint","PolygonInfo","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","polygonDrawStatesSubject","polygonDrawStates$","newPolygons","test2","id","polyInfo","MyLibModule","NgModule","declarations","imports","providers","exports","LeafletHelperService","L.polygon","TurfHelperService","simplifyTolerance","tolerance","highQuality","turf.union","turf.explode","f","turf.multiPolygon","concaveman","turf.simplify","polygonArray","turf.unkinkPolygon","turf.featureEach","current","turf.getCoords","turf.kinks","feat","intersect","loop1","turf.intersect","getIntersection","getDistance","turf.distance","polygon1","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","bbox","turf.bbox","turf.bboxPolygon","polygonToMultiPolygon","point","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","turf.coordReduce","accumulator","oldPoint","pos_1","turf.booleanPointInPolygon","index_2","diff","turf.difference","getBoundingBoxCompassPosition","markerplacement","useOffset","offsetDirection","compass","getBoundingBoxCompass","turf.centerOfMass","minX","minY","maxX","maxY","points","turf.getCoord","pts","turf.featureCollection"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPlacement {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPlacement } from \"./enums\";\r\nimport { TurfHelperService } from \"./turf-helper.service\"\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n        \r\n        this.direction.North = {lat: maxLat, lng: (minLng + maxLng) / 2};\r\n        this.direction.NorthEast = {lat: maxLat, lng: maxLng};\r\n        this.direction.East = {lat: (minLat + maxLat) / 2, lng: maxLng};\r\n        this.direction.SouthEast = {lat: minLat, lng: maxLng};\r\n        this.direction.South = {lat: minLat, lng: (minLng + maxLng) / 2};\r\n        this.direction.SouthWest = {lat: minLat, lng: minLng};\r\n        this.direction.West = {lat:(minLat + maxLat) / 2, lng: minLng};\r\n        this.direction.NorthWest = {lat: maxLat, lng: minLng};\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPlacement) {\r\n        switch (direction) {\r\n            // case MarkerPlacement.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPlacement.North:\r\n                return this.direction.North;\r\n            case MarkerPlacement.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPlacement.East:\r\n                return this.direction.East;\r\n            case MarkerPlacement.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPlacement.South:\r\n                return this.direction.South;\r\n            case MarkerPlacement.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPlacement.West:\r\n                return this.direction.West;\r\n            case MarkerPlacement.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPlacement.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n}","import { Injectable, Optional } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Feature, Polygon, MultiPolygon } from '@turf/turf';\r\nimport { MapStateService } from './map-state.service';\r\nimport { TurfHelperService } from './turf-helper.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport defaultConfig from \"./polyinfo.json\";\r\n\r\nimport { ComponentGeneraterService } from './component-generater.service';\r\nimport { Compass, PolyDrawUtil } from './utils';\r\nimport { MarkerPlacement } from './enums';\r\nimport { LeafletHelperService } from './leaflet-helper.service';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  private readonly polygonDrawStates = null;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: MapStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log('pre this.config', this.config);\r\n      this.config = defaultConfig;\r\n      console.log('this.config', this.config);\r\n      this.configurate({});\r\n      console.log('after this.config', this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log('PolyInfo start: ', k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log('deletePolygon: ', polygon);\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n            }\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log('Test: ', polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log('equals: ', equals, ' length: ', length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // this.polygonDrawStates.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][]): void {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords(geographicBorders)\r\n    );\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log('markers: ', markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        latlngs[latlngs.length - 1].length\r\n      );\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log('Within1 ', within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener('touchstart', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchend', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchmove', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log('mouseDown', event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.AddPolygon:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.SubtractPolygon:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? 'on' : 'off';\r\n\r\n    this.map[onoroff]('mousemove', this.mouseMove, this);\r\n    this.map[onoroff]('mouseup', this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    console.log(\r\n      'addPolygon',\r\n      latlngs,\r\n      simplify,\r\n      noMerge,\r\n      this.kinks,\r\n      this.config\r\n    );\r\n\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log('AddPolygonLayer: ', latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log('Array: ', this.arrayOfFeatureGroups);\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on('click', e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === 'MultiPolygon') {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('getPolygons: ', latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('merge', latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? 'on' : 'off';\r\n    this.map[onoroff]('mousedown', this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      }\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        // marker.on(\"click\", e => {\r\n        //   this.convertToBoundsPolygon(e, latlngs)\r\n        // })\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on('click', e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(' ');\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log('Posisjoner: ', posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log('Posisjoner 2: ', posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log('Hole: ', hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log('STart index: ', length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log('Polygon drag: ', posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log('Hole 2: ', hole);\r\n    }\r\n    console.log('Nye posisjoner: ', newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log(\r\n      'Markerdragend polygon: ',\r\n      featureCollection.features[0].geometry.coordinates\r\n    );\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        console.log('Markerdragend: ', feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log('Unkink: ', unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n      console.log('Markerdragend: ', feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log('Unkink: ', unkink);\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    console.log('getLatLngsFromJson: ', feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === 'MultiPolygon'\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === 'Polygon'\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    console.log('unionPolygons', layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroup', featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      featureGroups => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroupOnMerge', featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        featureGroups => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log('deletePolygonOnMerge', polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log('EQUALS', polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) { return false; }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) { return false; }\r\n    }\r\n    if (poly1.length !== poly2.length) { return false; }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log('setDrawMode', this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: ''\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.AddPolygon:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.SubtractPolygon:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: '#D9460F'\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.SubtractPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert('open menu');\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log('bbox clicked', e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log('simplyfi clicked', e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(latlngs: ILatLng[]) {\r\n    const lPoly = this.leafletHelper.createPolygon(latlngs);\r\n\r\n    // const coords = this.convertToCoords([latlngs]);\r\n    // const p = this.getPolygon()\r\n\r\n    // if (poly.geometry.type === \"MultiPolygon\") {\r\n    //   let newPolygon = this.turfHelper.convertToBoundingBoxPolygon(poly);\r\n    //   this.deletePolygon(this.getLatLngsFromJson(poly));\r\n    //   this.addPolygonLayer(newPolygon, false);\r\n    // }\r\n  }\r\n  private getMarkerIndex(\r\n    latlngs: ILatLng[],\r\n    position: MarkerPlacement\r\n  ): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getWest(),\r\n      bounds.getSouth(),\r\n      bounds.getEast(),\r\n      bounds.getNorth()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection[1],\r\n      lng: compassDirection[0]\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n// flytt til enum.ts\r\nexport enum DrawMode {\r\n  Off = 0,\r\n  AddPolygon = 1,\r\n  EditPolygon = 2,\r\n  SubtractPolygon = 3,\r\n  LoadPolygon = 4\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MapStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n\r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n    }\r\n}","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from \"./polygon.util\";\r\n\r\nexport class PolygonInfo {\r\n    polygon: ILatLng[][][] = [];\r\n    trashcanPoint: ILatLng[] = [];\r\n    sqmArea: number[] = [];\r\n    perimeter: number[] = [];\r\n    constructor(polygon) {\r\n        console.log(\"PolygonInfo: \", polygon);\r\n        polygon.forEach((polygons, i) => { this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n            this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n            this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n            console.log(polygons[0]);\r\n            this.polygon[i] = polygons\r\n        })\r\n        \r\n    }\r\n    setSqmArea(area: number): void {\r\n        this.sqmArea[0] = area;\r\n    }\r\n    private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n\r\n        const res = Math.max.apply(Math, polygon.map(o => o.lat));\r\n        const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n        let previousPoint: ILatLng;\r\n        let nextPoint: ILatLng;\r\n\r\n        if (idx > 0) {\r\n            previousPoint = polygon[idx - 1];\r\n            if (idx < polygon.length - 1) {\r\n                nextPoint = polygon[idx + 1];\r\n            } else {\r\n                nextPoint = polygon[0];\r\n            }\r\n        } else {\r\n            previousPoint = polygon[polygon.length - 1];\r\n            nextPoint = polygon[idx + 1];\r\n        }\r\n\r\n        const secondPoint = (previousPoint.lng < nextPoint.lng) ? previousPoint : nextPoint;\r\n\r\n        const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n        return midpoint;\r\n    }\r\n    private calculatePolygonArea(polygon: ILatLng[]): number {\r\n        const area = PolygonUtil.getSqmArea((polygon) as any);\r\n        return area;\r\n    }\r\n    private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n        const perimeter = PolygonUtil.getPerimeter((polygon) as any);\r\n        return perimeter;\r\n    }\r\n    \r\n}\r\n\r\nexport class PolygonDrawStates {\r\n    isActivated: boolean;\r\n    isFreeDrawMode: boolean;\r\n    isMoveMode: boolean;\r\n    canRevert: boolean;\r\n    isAuto: boolean;\r\n    hasPolygons: boolean;\r\n    canUsePolyDraw: boolean;\r\n\r\n\r\n    constructor() {\r\n        this.canUsePolyDraw = false;\r\n        this.reset();\r\n    }\r\n\r\n    activate(): void {\r\n        this.reset();\r\n        this.isActivated = true;\r\n    }\r\n\r\n    reset(): void {\r\n        this.isActivated = false;\r\n        this.hasPolygons = false;\r\n        this.canRevert = false;\r\n        this.isAuto = false;\r\n\r\n        this.resetDrawModes();\r\n    }\r\n\r\n    resetDrawModes(): void {\r\n        this.isFreeDrawMode = false;\r\n        this.isMoveMode = false;\r\n    }\r\n\r\n    setFreeDrawMode(isAuto: boolean = false): void {\r\n        if (isAuto) {\r\n            this.isActivated = true;\r\n        }\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isFreeDrawMode = true;\r\n            if (isAuto) {\r\n                this.isAuto = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMoveMode(): void {\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isMoveMode = true;\r\n        }\r\n    }\r\n\r\n    forceCanUseFreeDraw(): void {\r\n        this.canUsePolyDraw = true;\r\n    }\r\n}\r\n\r\nexport interface ILatLng {\r\n    lat: number, \r\n    lng: number;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyDrawService } from \"./polydraw.service\";\r\nimport { MapStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<PolygonInfo[]>();\r\n  polygonInformation$: Observable<PolygonInfo[]> = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<PolygonDrawStates>();\r\n  polygonDrawStates$: Observable<PolygonDrawStates> = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: MapStateService) {}\r\n\r\n  updatePolygons() {\r\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n      \r\n      \r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = []\r\n        v.polygon.forEach((poly) => {\r\n          let test2 = []\r\n            \r\n            poly.forEach(polygon => {\r\n              test2 = [...polygon]\r\n              if (polygon[0].toString() !== polygon[polygon.length - 1].toString()) {\r\n                test2.push(polygon[0]);             \r\n            }  \r\n            test.push(test2)\r\n            });\r\n            \r\n            \r\n            });\r\n           \r\n            newPolygons.push(test)\r\n        });\r\n\r\n      // this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      // this.polygonDrawStates.reset();\r\n      // this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(v => v.polygon[0] === polygon);\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log(\"DeleteTrashCan: \", polygon);\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(poly => poly.toString() === polygon.toString());\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log(\"ID: \", id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log(\"Index: \", index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(featureGroup.getLayers()[0].getLatLngs());\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\nimport { PolyDrawService } from './polydraw.service';\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  providers:[PolyDrawService],\r\n  exports: [ ]\r\n})\r\nexport class MyLibModule {}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport * as turf from \"@turf/turf\";\r\nimport concaveman from \"concaveman\";\r\nimport { Feature, Polygon, MultiPolygon, Position } from \"@turf/turf\";\r\nimport { MarkerPlacement } from \"./enums\";\r\nimport { ICompass } from \"./interface\";\r\nimport { Compass } from \"./utils\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log(\"poly1: \", poly1);\r\n    console.log(\"poly2: \", poly2);\r\n\r\n    let union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    let points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log(\"Get TurfPolygon:\", polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === \"Polygon\") {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    let coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    let poly = [];\r\n    let poly2 = [];\r\n\r\n    console.log(\"polygonIntersect\", polygon, latlngs);\r\n\r\n    let latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      let feat = { type: \"Polygon\", coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    let polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      let feat = { type: \"Polygon\", coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log(\"Ytre: \", polygon2);\r\n    return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));\r\n  }\r\n\r\n  equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    let coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log(\"polygon: \", polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log(\"test\", test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      let pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        let polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log(\"coordinates\", coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(polygon, markerplacement: ICompass, useOffset, offsetDirection) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number {\r\n    let index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}\r\n"]}