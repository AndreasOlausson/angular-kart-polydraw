{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPosition","PolyStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","mapZoomLevel$","Observable","updateMapState","map","updatePolygons","polygons","console","log","Injectable","providedIn","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","bounds","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","turf.intersect","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","test","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","turf.booleanPointInPolygon","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonDrawStates","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","tslib_1.__decorate","Output","Component","selector","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","minimumFreeDrawZoomLevel","tracer","ngUnsubscribe","config","pipe","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","debounceTime","takeUntil","zoom","onZoomChange","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","AddPolygon","addPolygon","SubtractPolygon","subtractPolygon","drawStartedEvents","resetTracker","zoomLevel","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","menu","delete","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","convertToBoundsPolygon","classNames","classes","join","L.divIcon","className","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","L.DomUtil","removeClass","color","addClass","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolyStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n    \r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n\r\n    mapZoomLevel$: Observable<number> = new Observable();\r\n\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n        this.polygonSubject.next(polygons)\r\n    }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log('poly1: ', poly1);\r\n    console.log('poly2: ', poly2);\r\n\r\n    let union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    let points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log('Get TurfPolygon:', polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    let coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    let poly = [];\r\n    let poly2 = [];\r\n\r\n    console.log('polygonIntersect', polygon, latlngs);\r\n\r\n    let latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    let polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log('Ytre: ', polygon2);\r\n    return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));\r\n  }\r\n\r\n  equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>, addMidpointMarkers: boolean = false): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    let coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log('polygon: ', polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log('test', test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      let pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        let polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log('coordinates', coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(polygon, MarkerPosition: ICompass, useOffset, offsetDirection) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number {\r\n    let index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from \"./polygon.util\";\r\n\r\nexport class PolygonInfo {\r\n    polygon: ILatLng[][][] = [];\r\n    trashcanPoint: ILatLng[] = [];\r\n    sqmArea: number[] = [];\r\n    perimeter: number[] = [];\r\n    constructor(polygon) {\r\n        console.log(\"PolygonInfo: \", polygon);\r\n        polygon.forEach((polygons, i) => { this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n            this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n            this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n            console.log(polygons[0]);\r\n            this.polygon[i] = polygons\r\n        })\r\n        \r\n    }\r\n    setSqmArea(area: number): void {\r\n        this.sqmArea[0] = area;\r\n    }\r\n    private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n\r\n        const res = Math.max.apply(Math, polygon.map(o => o.lat));\r\n        const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n        let previousPoint: ILatLng;\r\n        let nextPoint: ILatLng;\r\n\r\n        if (idx > 0) {\r\n            previousPoint = polygon[idx - 1];\r\n            if (idx < polygon.length - 1) {\r\n                nextPoint = polygon[idx + 1];\r\n            } else {\r\n                nextPoint = polygon[0];\r\n            }\r\n        } else {\r\n            previousPoint = polygon[polygon.length - 1];\r\n            nextPoint = polygon[idx + 1];\r\n        }\r\n\r\n        const secondPoint = (previousPoint.lng < nextPoint.lng) ? previousPoint : nextPoint;\r\n\r\n        const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n        return midpoint;\r\n    }\r\n    private calculatePolygonArea(polygon: ILatLng[]): number {\r\n        const area = PolygonUtil.getSqmArea((polygon) as any);\r\n        return area;\r\n    }\r\n    private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n        const perimeter = PolygonUtil.getPerimeter((polygon) as any);\r\n        return perimeter;\r\n    }\r\n    \r\n}\r\n\r\nexport class PolygonDrawStates {\r\n    isActivated: boolean;\r\n    isFreeDrawMode: boolean;\r\n    isMoveMode: boolean;\r\n    canRevert: boolean;\r\n    isAuto: boolean;\r\n    hasPolygons: boolean;\r\n    canUsePolyDraw: boolean;\r\n\r\n\r\n    constructor() {\r\n        this.canUsePolyDraw = false;\r\n        this.reset();\r\n    }\r\n\r\n    activate(): void {\r\n        this.reset();\r\n        this.isActivated = true;\r\n    }\r\n\r\n    reset(): void {\r\n        this.isActivated = false;\r\n        this.hasPolygons = false;\r\n        this.canRevert = false;\r\n        this.isAuto = false;\r\n\r\n        this.resetDrawModes();\r\n    }\r\n\r\n    resetDrawModes(): void {\r\n        this.isFreeDrawMode = false;\r\n        this.isMoveMode = false;\r\n    }\r\n\r\n    setFreeDrawMode(isAuto: boolean = false): void {\r\n        if (isAuto) {\r\n            this.isActivated = true;\r\n        }\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isFreeDrawMode = true;\r\n            if (isAuto) {\r\n                this.isAuto = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMoveMode(): void {\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isMoveMode = true;\r\n        }\r\n    }\r\n\r\n    forceCanUseFreeDraw(): void {\r\n        this.canUsePolyDraw = true;\r\n    }\r\n}\r\n\r\nexport interface ILatLng {\r\n    lat: number, \r\n    lng: number;\r\n}","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from './polygon-helpers';\r\nimport { PolyDrawService } from './polydraw.service';\r\nimport { PolyStateService } from './map-state.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\r\n    PolygonInfo[]\r\n  >();\r\n  polygonInformation$: Observable<\r\n    PolygonInfo[]\r\n  > = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\r\n    PolygonDrawStates\r\n  >();\r\n  polygonDrawStates$: Observable<\r\n    PolygonDrawStates\r\n  > = this.polygonDrawStatesSubject.asObservable();\r\n\r\n   polygonDrawStates: PolygonDrawStates = null;\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: PolyStateService) {\r\n    this.polygonDrawStates = new PolygonDrawStates();\r\n  }\r\n\r\n  updatePolygons() {\r\n    console.log('updatePolygons: ', this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n\r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = [];\r\n        v.polygon.forEach(poly => {\r\n          let test2 = [];\r\n\r\n          poly.forEach(polygon => {\r\n            test2 = [...polygon];\r\n            if (\r\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\r\n            ) {\r\n              test2.push(polygon[0]);\r\n            }\r\n            test.push(test2);\r\n          });\r\n        });\r\n\r\n        newPolygons.push(test);\r\n      });\r\n\r\n      this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      this.polygonDrawStates.reset();\r\n      this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\r\n    console.log('saveCurrentState: ', this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(\r\n      v => v.polygon[0] === polygon\r\n    );\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log('DeleteTrashCan: ', polygon);\r\n    console.log('deleteTrashCanOnMulti: ', this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(\r\n        poly => poly.toString() === polygon.toString()\r\n      );\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log('ID: ', id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log('Index: ', index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log('deleteTrashCanOnMulti: ', this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log('Create Info: ', arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(\r\n          featureGroup.getLayers()[0].getLatLngs()\r\n        );\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n\r\n\r\n  activate(){\r\n    this.polygonDrawStates.activate()\r\n  }\r\n  reset(){\r\n    this.polygonDrawStates.reset();\r\n  }\r\n\r\n  setMoveMode(){\r\n    this.polygonDrawStates.setMoveMode();\r\n  }\r\n\r\n  setFreeDrawMode(){\r\n    this.polygonDrawStates.setFreeDrawMode()\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter, debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { Feature, Polygon, MultiPolygon } from '@turf/turf';\r\nimport { PolyStateService } from './map-state.service';\r\nimport { TurfHelperService } from './turf-helper.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport defaultConfig from './polyinfo.json';\r\nimport { ILatLng, PolygonDrawStates } from './polygon-helpers';\r\nimport { ComponentGeneraterService } from './component-generater.service';\r\nimport { Compass, PolyDrawUtil } from './utils';\r\nimport { MarkerPosition } from './enums';\r\nimport { LeafletHelperService } from './leaflet-helper.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(DrawMode.Off);\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n  \r\n  private readonly minimumFreeDrawZoomLevel: number = 12;\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: PolyStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log('pre this.config', this.config);\r\n      this.config = defaultConfig;\r\n      console.log('this.config', this.config);\r\n      this.configurate({});\r\n      console.log('after this.config', this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.mapState.mapZoomLevel$.pipe(debounceTime(100), takeUntil(this.ngUnsubscribe)).subscribe((zoom: number) => {\r\n      this.onZoomChange(zoom);\r\n    });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log('PolyInfo start: ', k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log('deletePolygon: ', polygon);\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            /* if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n              }  */\r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log('Test: ', polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log('equals: ', equals, ' length: ', length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    this.polygonInformation.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][]): void {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(this.convertToCoords(geographicBorders));\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log('markers: ', markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.setMoveMode();\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]), latlngs[latlngs.length - 1].length);\r\n      const within = this.turfHelper.isWithin(L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]), L.GeoJSON.latLngsToCoords(latlngs[0]));\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log('Within1 ', within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(L.GeoJSON.latLngsToCoords(latlngs[index]), L.GeoJSON.latLngsToCoords(latlngs[0]));\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener('touchstart', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchend', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchmove', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log('mouseDown', event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([event.touches[0].clientX, event.touches[0].clientY]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([event.touches[0].clientX, event.touches[0].clientY]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<Polygon | MultiPolygon> = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.AddPolygon:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.SubtractPolygon:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n\r\n  private onZoomChange(zoomLevel: number): void {\r\n    //console.log(\"onZoomChange\", zoomLevel);\r\n\r\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\r\n    } else {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\r\n      this.polygonInformation.setMoveMode();\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? 'on' : 'off';\r\n\r\n    this.map[onoroff]('mousemove', this.mouseMove, this);\r\n    this.map[onoroff]('mouseup', this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(latlngs: Feature<Polygon | MultiPolygon>, simplify: boolean, noMerge: boolean = false) {\r\n    console.log('addPolygon', latlngs, simplify, noMerge, this.kinks, this.config);\r\n\r\n    if (this.mergePolygons && !noMerge && this.arrayOfFeatureGroups.length > 0 && !this.kinks) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(latlngs: Feature<Polygon | MultiPolygon>, simplify: boolean) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log('AddPolygonLayer: ', latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log('Array: ', this.arrayOfFeatureGroups);\r\n    this.polygonInformation.activate();\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on('click', e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === 'MultiPolygon') {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [newPoint.lng, newPoint.lat]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('getPolygons: ', latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('merge', latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      console.log('Merger: ', featureCollection.features[0]);\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(featureCollection.features[0]);\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(featureCollection.features[0]);\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? 'on' : 'off';\r\n    this.map[onoroff]('mousedown', this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n\r\n    const menuMarkerIdx = this.getMarkerIndex(latlngs, this.config.markers.markerMenuIcon.position);\r\n    const deleteMarkerIdx = this.getMarkerIndex(latlngs, this.config.markers.markerDeleteIcon.position);\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      }\r\n      const marker = new L.Marker(latlng, { icon: this.createDivIcon(iconClasses), draggable: true, title: i.toString() });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n\r\n\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        marker.on('click', e => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on('click', e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, { icon: this.createDivIcon(iconClasses), draggable: true, title: i.toString() });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(' ');\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    console.log('markerdrag: ', layerLength);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log('Posisjoner: ', posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log('Posisjoner 2: ', posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log('Hole: ', hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log('STart index: ', length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log('Polygon drag: ', posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log('Hole 2: ', hole);\r\n    }\r\n    console.log('Nye posisjoner: ', newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log('Markerdragend polygon: ', featureCollection.features[0].geometry.coordinates);\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n\r\n        console.log('Markerdragend: ', feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log('Unkink: ', unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(featureCollection.features[0].geometry.coordinates);\r\n      console.log('Markerdragend: ', feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log('Unkink: ', unkink);\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(feature: Feature<Polygon | MultiPolygon>): ILatLng[][] {\r\n    console.log('getLatLngsFromJson: ', feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (feature.geometry.coordinates.length > 1 && feature.geometry.type === 'MultiPolygon') {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (feature.geometry.coordinates[0].length > 1 && feature.geometry.type === 'Polygon') {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(layers, latlngs: Feature<Polygon | MultiPolygon>, polygonFeature) {\r\n    console.log('unionPolygons', layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroup', featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(featureGroups => featureGroups !== featureGroup);\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroupOnMerge', featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (v.polygon.toString() !== polygon[0].toString() && v.polygon[0].toString() === polygon[0][0].toString()) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (v.polygon.toString() !== polygon[0].toString() && v.polygon[0].toString() !== polygon[0][0].toString()) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(featureGroups => featureGroups !== featureGroup);\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log('deletePolygonOnMerge', polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log('EQUALS', polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) { return false; }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) { return false; }\r\n    }\r\n    if (poly1.length !== poly2.length) { return false; }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(enableDragging: boolean, enableDoubleClickZoom: boolean, enableScrollWheelZoom: boolean) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom ? this.map.doubleClickZoom.enable() : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom ? this.map.scrollWheelZoom.enable() : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log('setDrawMode', this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: ''\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.AddPolygon:\r\n          L.DomUtil.addClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.SubtractPolygon:\r\n          L.DomUtil.addClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: '#D9460F'\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\r\n      this.polygonInformation.setMoveMode();\r\n      this.setDrawMode(DrawMode.Off);\r\n    } else {\r\n      this.polygonInformation.setFreeDrawMode();\r\n      this.setDrawMode(DrawMode.AddPolygon);\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.SubtractPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert('open menu');\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log('bbox clicked', e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log('simplyfi clicked', e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(latlngs: ILatLng[], addMidpointMarkers: boolean = false) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(this.convertToCoords([latlngs]));\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(polygon, addMidpointMarkers);\r\n\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(this.convertToCoords([latlngs]));\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(latlngs, (Math.sqrt(2) / 2));\r\n    const compass = new Compass(bounds.getSouth(), bounds.getWest(), bounds.getNorth(), bounds.getEast());\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n        lat: compassDirection.lat,\r\n        lng: compassDirection.lng\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(targetPoint, fc as any);\r\n\r\n    return nearestPointIdx;\r\n}\r\n\r\n\r\n}\r\n// flytt til enum.ts\r\nexport enum DrawMode {\r\n  Off = 0,\r\n  AddPolygon = 1,\r\n  EditPolygon = 2,\r\n  SubtractPolygon = 3,\r\n  LoadPolygon = 4\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  exports: [ ]\r\n})\r\nexport class MyLibModule {}\r\n"]}