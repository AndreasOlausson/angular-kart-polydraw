{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPosition","PolyStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","mapStateSubject","MapStateModel","mapState$","mapZoomLevel$","pipe","map","state","mapBoundState","zoom","updateMapStates","newState","updateMapState","updatePolygons","polygons","console","log","updateMapBounds","mapBounds","Injectable","providedIn","MapBoundsState","bounds","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","turf.intersect","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","test","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","turf.booleanPointInPolygon","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonDrawStates","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","tslib_1.__decorate","Output","Component","selector","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","minimumFreeDrawZoomLevel","tracer","ngUnsubscribe","config","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","debounceTime","takeUntil","onZoomChange","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","AddPolygon","addPolygon","SubtractPolygon","subtractPolygon","drawStartedEvents","resetTracker","zoomLevel","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","menu","delete","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","convertToBoundsPolygon","classNames","classes","join","L.divIcon","className","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","L.DomUtil","removeClass","color","addClass","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolyStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n    \r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n    private mapStateSubject = new BehaviorSubject<MapStateModel>(new MapStateModel());\r\n    mapState$: Observable<MapStateModel> = this.mapStateSubject.asObservable();\r\n    mapZoomLevel$: Observable<number>  = this.mapState$.pipe(map((state: MapStateModel) => state.mapBoundState.zoom));\r\n\r\n    private updateMapStates(newState: any): void {\r\n        let state = this.mapStateSubject.value;\r\n        state = { ...state, ...newState };\r\n\r\n        this.mapStateSubject.next(state);\r\n    }\r\n\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n        this.polygonSubject.next(polygons)\r\n    }\r\n    updateMapBounds(mapBounds: MapBoundsState) {\r\n        this.updateMapStates({ mapBoundState: mapBounds });\r\n    }\r\n}\r\n\r\nclass MapStateModel {\r\n    constructor(\r\n      \r\n        public mapBoundState: MapBoundsState = new MapBoundsState(null, 11)) { }\r\n}\r\nclass MapBoundsState {\r\n    constructor(\r\n        public bounds: L.LatLngBounds,\r\n        public zoom: number) { }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log('poly1: ', poly1);\r\n    console.log('poly2: ', poly2);\r\n\r\n    let union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    let points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log('Get TurfPolygon:', polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    let coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    let poly = [];\r\n    let poly2 = [];\r\n\r\n    console.log('polygonIntersect', polygon, latlngs);\r\n\r\n    let latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    let polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log('Ytre: ', polygon2);\r\n    return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));\r\n  }\r\n\r\n  equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>, addMidpointMarkers: boolean = false): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    let coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log('polygon: ', polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log('test', test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      let pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        let polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log('coordinates', coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(polygon, MarkerPosition: ICompass, useOffset, offsetDirection) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number {\r\n    let index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from \"./polygon.util\";\r\n\r\nexport class PolygonInfo {\r\n    polygon: ILatLng[][][] = [];\r\n    trashcanPoint: ILatLng[] = [];\r\n    sqmArea: number[] = [];\r\n    perimeter: number[] = [];\r\n    constructor(polygon) {\r\n        console.log(\"PolygonInfo: \", polygon);\r\n        polygon.forEach((polygons, i) => { this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n            this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n            this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n            console.log(polygons[0]);\r\n            this.polygon[i] = polygons\r\n        })\r\n        \r\n    }\r\n    setSqmArea(area: number): void {\r\n        this.sqmArea[0] = area;\r\n    }\r\n    private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n\r\n        const res = Math.max.apply(Math, polygon.map(o => o.lat));\r\n        const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n        let previousPoint: ILatLng;\r\n        let nextPoint: ILatLng;\r\n\r\n        if (idx > 0) {\r\n            previousPoint = polygon[idx - 1];\r\n            if (idx < polygon.length - 1) {\r\n                nextPoint = polygon[idx + 1];\r\n            } else {\r\n                nextPoint = polygon[0];\r\n            }\r\n        } else {\r\n            previousPoint = polygon[polygon.length - 1];\r\n            nextPoint = polygon[idx + 1];\r\n        }\r\n\r\n        const secondPoint = (previousPoint.lng < nextPoint.lng) ? previousPoint : nextPoint;\r\n\r\n        const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n        return midpoint;\r\n    }\r\n    private calculatePolygonArea(polygon: ILatLng[]): number {\r\n        const area = PolygonUtil.getSqmArea((polygon) as any);\r\n        return area;\r\n    }\r\n    private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n        const perimeter = PolygonUtil.getPerimeter((polygon) as any);\r\n        return perimeter;\r\n    }\r\n    \r\n}\r\n\r\nexport class PolygonDrawStates {\r\n    isActivated: boolean;\r\n    isFreeDrawMode: boolean;\r\n    isMoveMode: boolean;\r\n    canRevert: boolean;\r\n    isAuto: boolean;\r\n    hasPolygons: boolean;\r\n    canUsePolyDraw: boolean;\r\n\r\n\r\n    constructor() {\r\n        this.canUsePolyDraw = false;\r\n        this.reset();\r\n    }\r\n\r\n    activate(): void {\r\n        this.reset();\r\n        this.isActivated = true;\r\n    }\r\n\r\n    reset(): void {\r\n        this.isActivated = false;\r\n        this.hasPolygons = false;\r\n        this.canRevert = false;\r\n        this.isAuto = false;\r\n\r\n        this.resetDrawModes();\r\n    }\r\n\r\n    resetDrawModes(): void {\r\n        this.isFreeDrawMode = false;\r\n        this.isMoveMode = false;\r\n    }\r\n\r\n    setFreeDrawMode(isAuto: boolean = false): void {\r\n        if (isAuto) {\r\n            this.isActivated = true;\r\n        }\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isFreeDrawMode = true;\r\n            if (isAuto) {\r\n                this.isAuto = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMoveMode(): void {\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isMoveMode = true;\r\n        }\r\n    }\r\n\r\n    forceCanUseFreeDraw(): void {\r\n        this.canUsePolyDraw = true;\r\n    }\r\n}\r\n\r\nexport interface ILatLng {\r\n    lat: number, \r\n    lng: number;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyDrawService } from \"./polydraw.service\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\r\n    PolygonInfo[]\r\n  >();\r\n  polygonInformation$: Observable<\r\n    PolygonInfo[]\r\n  > = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\r\n    PolygonDrawStates\r\n  >();\r\n  polygonDrawStates$: Observable<\r\n    PolygonDrawStates\r\n  > = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonDrawStates: PolygonDrawStates = null;\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: PolyStateService) {\r\n    this.polygonDrawStates = new PolygonDrawStates();\r\n  }\r\n\r\n  updatePolygons() {\r\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n\r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = [];\r\n        v.polygon.forEach(poly => {\r\n          let test2 = [];\r\n\r\n          poly.forEach(polygon => {\r\n            test2 = [...polygon];\r\n            if (\r\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\r\n            ) {\r\n              test2.push(polygon[0]);\r\n            }\r\n            test.push(test2);\r\n          });\r\n        });\r\n\r\n        newPolygons.push(test);\r\n      });\r\n\r\n      this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      this.polygonDrawStates.reset();\r\n      this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\r\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(\r\n      v => v.polygon[0] === polygon\r\n    );\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log(\"DeleteTrashCan: \", polygon);\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(\r\n        poly => poly.toString() === polygon.toString()\r\n      );\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log(\"ID: \", id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log(\"Index: \", index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(\r\n          featureGroup.getLayers()[0].getLatLngs()\r\n        );\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n\r\n  activate() {\r\n    this.polygonDrawStates.activate();\r\n  }\r\n  reset() {\r\n    this.polygonDrawStates.reset();\r\n  }\r\n\r\n  setMoveMode() {\r\n    this.polygonDrawStates.setMoveMode();\r\n  }\r\n\r\n  setFreeDrawMode() {\r\n    this.polygonDrawStates.setFreeDrawMode();\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter, debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { Feature, Polygon, MultiPolygon } from '@turf/turf';\r\nimport { PolyStateService } from './map-state.service';\r\nimport { TurfHelperService } from './turf-helper.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport defaultConfig from './polyinfo.json';\r\nimport { ILatLng, PolygonDrawStates } from './polygon-helpers';\r\nimport { ComponentGeneraterService } from './component-generater.service';\r\nimport { Compass, PolyDrawUtil } from './utils';\r\nimport { MarkerPosition } from './enums';\r\nimport { LeafletHelperService } from './leaflet-helper.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(DrawMode.Off);\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n  \r\n  private readonly minimumFreeDrawZoomLevel: number = 12;\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: PolyStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log('pre this.config', this.config);\r\n      this.config = defaultConfig;\r\n      console.log('this.config', this.config);\r\n      this.configurate({});\r\n      console.log('after this.config', this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.mapState.mapZoomLevel$.pipe(debounceTime(100), takeUntil(this.ngUnsubscribe)).subscribe((zoom: number) => {\r\n      this.onZoomChange(zoom);\r\n    });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log('PolyInfo start: ', k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log('deletePolygon: ', polygon);\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            /* if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n              }  */\r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log('Test: ', polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log('equals: ', equals, ' length: ', length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    this.polygonInformation.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][]): void {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(this.convertToCoords(geographicBorders));\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log('markers: ', markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.setMoveMode();\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]), latlngs[latlngs.length - 1].length);\r\n      const within = this.turfHelper.isWithin(L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]), L.GeoJSON.latLngsToCoords(latlngs[0]));\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log('Within1 ', within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(L.GeoJSON.latLngsToCoords(latlngs[index]), L.GeoJSON.latLngsToCoords(latlngs[0]));\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener('touchstart', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchend', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchmove', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log('mouseDown', event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([event.touches[0].clientX, event.touches[0].clientY]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([event.touches[0].clientX, event.touches[0].clientY]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<Polygon | MultiPolygon> = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.AddPolygon:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.SubtractPolygon:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n\r\n  private onZoomChange(zoomLevel: number): void {\r\n    //console.log(\"onZoomChange\", zoomLevel);\r\n\r\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\r\n    } else {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\r\n      this.polygonInformation.setMoveMode();\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? 'on' : 'off';\r\n\r\n    this.map[onoroff]('mousemove', this.mouseMove, this);\r\n    this.map[onoroff]('mouseup', this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(latlngs: Feature<Polygon | MultiPolygon>, simplify: boolean, noMerge: boolean = false) {\r\n    console.log('addPolygon', latlngs, simplify, noMerge, this.kinks, this.config);\r\n\r\n    if (this.mergePolygons && !noMerge && this.arrayOfFeatureGroups.length > 0 && !this.kinks) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(latlngs: Feature<Polygon | MultiPolygon>, simplify: boolean) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log('AddPolygonLayer: ', latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log('Array: ', this.arrayOfFeatureGroups);\r\n    this.polygonInformation.activate();\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on('click', e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === 'MultiPolygon') {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [newPoint.lng, newPoint.lat]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('getPolygons: ', latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('merge', latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      console.log('Merger: ', featureCollection.features[0]);\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(featureCollection.features[0]);\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(featureCollection.features[0]);\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? 'on' : 'off';\r\n    this.map[onoroff]('mousedown', this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n\r\n    const menuMarkerIdx = this.getMarkerIndex(latlngs, this.config.markers.markerMenuIcon.position);\r\n    const deleteMarkerIdx = this.getMarkerIndex(latlngs, this.config.markers.markerDeleteIcon.position);\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      }\r\n      const marker = new L.Marker(latlng, { icon: this.createDivIcon(iconClasses), draggable: true, title: i.toString() });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n\r\n\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        marker.on('click', e => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on('click', e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, { icon: this.createDivIcon(iconClasses), draggable: true, title: i.toString() });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(' ');\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    console.log('markerdrag: ', layerLength);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log('Posisjoner: ', posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log('Posisjoner 2: ', posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log('Hole: ', hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log('STart index: ', length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log('Polygon drag: ', posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log('Hole 2: ', hole);\r\n    }\r\n    console.log('Nye posisjoner: ', newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log('Markerdragend polygon: ', featureCollection.features[0].geometry.coordinates);\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n\r\n        console.log('Markerdragend: ', feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log('Unkink: ', unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(featureCollection.features[0].geometry.coordinates);\r\n      console.log('Markerdragend: ', feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log('Unkink: ', unkink);\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(this.arrayOfFeatureGroups);\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(feature: Feature<Polygon | MultiPolygon>): ILatLng[][] {\r\n    console.log('getLatLngsFromJson: ', feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (feature.geometry.coordinates.length > 1 && feature.geometry.type === 'MultiPolygon') {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (feature.geometry.coordinates[0].length > 1 && feature.geometry.type === 'Polygon') {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(layers, latlngs: Feature<Polygon | MultiPolygon>, polygonFeature) {\r\n    console.log('unionPolygons', layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroup', featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(featureGroups => featureGroups !== featureGroup);\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroupOnMerge', featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (v.polygon.toString() !== polygon[0].toString() && v.polygon[0].toString() === polygon[0][0].toString()) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (v.polygon.toString() !== polygon[0].toString() && v.polygon[0].toString() !== polygon[0][0].toString()) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(featureGroups => featureGroups !== featureGroup);\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log('deletePolygonOnMerge', polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log('EQUALS', polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) { return false; }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) { return false; }\r\n    }\r\n    if (poly1.length !== poly2.length) { return false; }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(enableDragging: boolean, enableDoubleClickZoom: boolean, enableScrollWheelZoom: boolean) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom ? this.map.doubleClickZoom.enable() : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom ? this.map.scrollWheelZoom.enable() : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log('setDrawMode', this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: ''\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.AddPolygon:\r\n          L.DomUtil.addClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.SubtractPolygon:\r\n          L.DomUtil.addClass(this.map.getContainer(), 'crosshair-cursor-enabled');\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: '#D9460F'\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\r\n      this.polygonInformation.setMoveMode();\r\n      this.setDrawMode(DrawMode.Off);\r\n    } else {\r\n      this.polygonInformation.setFreeDrawMode();\r\n      this.setDrawMode(DrawMode.AddPolygon);\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.SubtractPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert('open menu');\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log('bbox clicked', e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log('simplyfi clicked', e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(latlngs: ILatLng[], addMidpointMarkers: boolean = false) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(this.convertToCoords([latlngs]));\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(polygon, addMidpointMarkers);\r\n\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(this.convertToCoords([latlngs]));\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(latlngs, (Math.sqrt(2) / 2));\r\n    const compass = new Compass(bounds.getSouth(), bounds.getWest(), bounds.getNorth(), bounds.getEast());\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n        lat: compassDirection.lat,\r\n        lng: compassDirection.lng\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(targetPoint, fc as any);\r\n\r\n    return nearestPointIdx;\r\n}\r\n\r\n\r\n}\r\n// flytt til enum.ts\r\nexport enum DrawMode {\r\n  Off = 0,\r\n  AddPolygon = 1,\r\n  EditPolygon = 2,\r\n  SubtractPolygon = 3,\r\n  LoadPolygon = 4\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  exports: [ ]\r\n})\r\nexport class MyLibModule {}\r\n"]}