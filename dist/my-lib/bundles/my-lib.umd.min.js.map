{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPosition","PolyStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","mapStateSubject","MapStateModel","mapState$","mapZoomLevel$","pipe","map","state","mapBoundState","zoom","updateMapStates","newState","updateMapState","updatePolygons","polygons","console","log","updateMapBounds","mapBounds","Injectable","providedIn","MapBoundsState","bounds","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","reverse","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","test","turf.intersect","_a","turf.booleanPointInPolygon","_b","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","addClass","selector","className","elements","document","querySelectorAll","item","classList","add","removeClass","remove","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonDrawStates","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","Output","Component","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","minimumFreeDrawZoomLevel","tracer","ngUnsubscribe","config","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","debounceTime","takeUntil","onZoomChange","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","group","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","Add","addPolygon","Subtract","subtractPolygon","drawStartedEvents","resetTracker","zoomLevel","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","menu","convertToBoundsPolygon","delete","classNames","classes","join","L.divIcon","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","isActiveDrawMode","L.DomUtil","color","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","NgModule","declarations","imports","providers","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolyStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n    \r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n    private mapStateSubject = new BehaviorSubject<MapStateModel>(new MapStateModel());\r\n    mapState$: Observable<MapStateModel> = this.mapStateSubject.asObservable();\r\n    mapZoomLevel$: Observable<number>  = this.mapState$.pipe(map((state: MapStateModel) => state.mapBoundState.zoom));\r\n\r\n    private updateMapStates(newState: any): void {\r\n        let state = this.mapStateSubject.value;\r\n        state = { ...state, ...newState };\r\n\r\n        this.mapStateSubject.next(state);\r\n    }\r\n\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n        this.polygonSubject.next(polygons)\r\n    }\r\n    updateMapBounds(mapBounds: MapBoundsState) {\r\n        this.updateMapStates({ mapBoundState: mapBounds });\r\n    }\r\n}\r\n\r\nclass MapStateModel {\r\n    constructor(\r\n      \r\n        public mapBoundState: MapBoundsState = new MapBoundsState(null, 11)) { }\r\n}\r\nclass MapBoundsState {\r\n    constructor(\r\n        public bounds: L.LatLngBounds,\r\n        public zoom: number) { }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log('poly1: ', poly1);\r\n    console.log('poly2: ', poly2);\r\n\r\n    const union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    const points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates).reverse()]]);\r\n  }\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log('Get TurfPolygon:', polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(\r\n    polygonArray: Position[][][]\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    const coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    latlngs: Feature<Polygon | MultiPolygon>\r\n  ): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    const poly = [];\r\n    const poly2 = [];\r\n\r\n    console.log('polygonIntersect', polygon, latlngs);\r\n\r\n    const latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    const polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            const test = turf.intersect(poly[i], poly2[j]);\r\n            if (test?.geometry.type === 'Point') {\r\n              intersect = !(\r\n                turf.booleanPointInPolygon(test, poly[i]) &&\r\n                turf.booleanPointInPolygon(test, poly2[j])\r\n              );\r\n              console.log('Intersect test: ');\r\n            } else if (test?.geometry.type === 'Polygon') {\r\n              intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            }\r\n\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log('Ytre: ', polygon2);\r\n    return turf.booleanWithin(\r\n      turf.polygon([polygon1]),\r\n      turf.polygon([polygon2])\r\n    );\r\n  }\r\n\r\n  equalPolygons(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    addMidpointMarkers: boolean = false\r\n  ): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    const coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log('polygon: ', polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      const index = turf.nearestPoint(point, polygonPoints).properties\r\n        .featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log('test', test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      const pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        const polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          const index = turf.nearestPoint(point, polygonPoints).properties\r\n            .featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log('coordinates', coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(\r\n    polygon,\r\n    MarkerPosition: ICompass,\r\n    useOffset,\r\n    offsetDirection\r\n  ) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(\r\n    targetPoint: turf.Coord,\r\n    points: turf.FeatureCollection<turf.Point>\r\n  ): number {\r\n    const index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}\r\n","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from './polygon.util';\r\n\r\nexport class PolygonInfo {\r\n  polygon: ILatLng[][][] = [];\r\n  trashcanPoint: ILatLng[] = [];\r\n  sqmArea: number[] = [];\r\n  perimeter: number[] = [];\r\n  constructor(polygon) {\r\n    console.log('PolygonInfo: ', polygon);\r\n    polygon.forEach((polygons, i) => {\r\n      this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n      this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n      this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n      console.log(polygons[0]);\r\n      this.polygon[i] = polygons;\r\n    });\r\n  }\r\n  setSqmArea(area: number): void {\r\n    this.sqmArea[0] = area;\r\n  }\r\n  private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n    const res = Math.max.apply(\r\n      Math,\r\n      polygon.map(o => o.lat)\r\n    );\r\n    const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n    let previousPoint: ILatLng;\r\n    let nextPoint: ILatLng;\r\n\r\n    if (idx > 0) {\r\n      previousPoint = polygon[idx - 1];\r\n      if (idx < polygon.length - 1) {\r\n        nextPoint = polygon[idx + 1];\r\n      } else {\r\n        nextPoint = polygon[0];\r\n      }\r\n    } else {\r\n      previousPoint = polygon[polygon.length - 1];\r\n      nextPoint = polygon[idx + 1];\r\n    }\r\n\r\n    const secondPoint =\r\n      previousPoint.lng < nextPoint.lng ? previousPoint : nextPoint;\r\n\r\n    const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n    return midpoint;\r\n  }\r\n  private calculatePolygonArea(polygon: ILatLng[]): number {\r\n    const area = PolygonUtil.getSqmArea(polygon as any);\r\n    return area;\r\n  }\r\n  private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n    const perimeter = PolygonUtil.getPerimeter(polygon as any);\r\n    return perimeter;\r\n  }\r\n}\r\nconst addClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.add(className);\r\n  }\r\n};\r\n\r\nconst removeClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.remove(className);\r\n  }\r\n};\r\n\r\nexport class PolygonDrawStates {\r\n  isActivated: boolean;\r\n  isFreeDrawMode: boolean;\r\n  isMoveMode: boolean;\r\n  canRevert: boolean;\r\n  isAuto: boolean;\r\n  hasPolygons: boolean;\r\n  canUsePolyDraw: boolean;\r\n\r\n  constructor() {\r\n    this.canUsePolyDraw = false;\r\n    this.reset();\r\n  }\r\n\r\n  activate(): void {\r\n    this.reset();\r\n    this.isActivated = true;\r\n  }\r\n\r\n  reset(): void {\r\n    this.isActivated = false;\r\n    this.hasPolygons = false;\r\n    this.canRevert = false;\r\n    this.isAuto = false;\r\n\r\n    this.resetDrawModes();\r\n  }\r\n\r\n  resetDrawModes(): void {\r\n    this.isFreeDrawMode = false;\r\n    removeClass('img.leaflet-tile', 'disable-events');\r\n    this.isMoveMode = false;\r\n  }\r\n\r\n  setFreeDrawMode(isAuto: boolean = false): void {\r\n    if (isAuto) {\r\n      this.isActivated = true;\r\n    }\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isFreeDrawMode = true;\r\n      addClass('img.leaflet-tile', 'disable-events');\r\n      if (isAuto) {\r\n        this.isAuto = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  setMoveMode(): void {\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isMoveMode = true;\r\n    }\r\n  }\r\n\r\n  forceCanUseFreeDraw(): void {\r\n    this.canUsePolyDraw = true;\r\n  }\r\n}\r\n\r\nexport interface ILatLng {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyDrawService } from \"./polydraw.service\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\r\n    PolygonInfo[]\r\n  >();\r\n  polygonInformation$: Observable<\r\n    PolygonInfo[]\r\n  > = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\r\n    PolygonDrawStates\r\n  >();\r\n  polygonDrawStates$: Observable<\r\n    PolygonDrawStates\r\n  > = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonDrawStates: PolygonDrawStates = null;\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: PolyStateService) {\r\n    this.polygonDrawStates = new PolygonDrawStates();\r\n  }\r\n\r\n  updatePolygons() {\r\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n\r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = [];\r\n        v.polygon.forEach(poly => {\r\n          let test2 = [];\r\n\r\n          poly.forEach(polygon => {\r\n            test2 = [...polygon];\r\n            if (\r\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\r\n            ) {\r\n              test2.push(polygon[0]);\r\n            }\r\n            test.push(test2);\r\n          });\r\n        });\r\n\r\n        newPolygons.push(test);\r\n      });\r\n\r\n      this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      this.polygonDrawStates.reset();\r\n      this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\r\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(\r\n      v => v.polygon[0] === polygon\r\n    );\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log(\"DeleteTrashCan: \", polygon);\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(\r\n        poly => poly.toString() === polygon.toString()\r\n      );\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log(\"ID: \", id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log(\"Index: \", index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(\r\n          featureGroup.getLayers()[0].getLatLngs()\r\n        );\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n\r\n  activate() {\r\n    this.polygonDrawStates.activate();\r\n  }\r\n  reset() {\r\n    this.polygonDrawStates.reset();\r\n  }\r\n\r\n  setMoveMode() {\r\n    this.polygonDrawStates.setMoveMode();\r\n  }\r\n\r\n  setFreeDrawMode() {\r\n    this.polygonDrawStates.setFreeDrawMode();\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from \"rxjs\";\r\nimport { filter, debounceTime, takeUntil } from \"rxjs/operators\";\r\nimport { Feature, Polygon, MultiPolygon } from \"@turf/turf\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\nimport { TurfHelperService } from \"./turf-helper.service\";\r\nimport { PolygonInformationService } from \"./polygon-information.service\";\r\nimport defaultConfig from \"./polyinfo.json\";\r\nimport { ILatLng, PolygonDrawStates } from \"./polygon-helpers\";\r\nimport { ComponentGeneraterService } from \"./component-generater.service\";\r\nimport { Compass, PolyDrawUtil } from \"./utils\";\r\nimport { MarkerPosition, DrawMode } from \"./enums\";\r\nimport { LeafletHelperService } from \"./leaflet-helper.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private readonly minimumFreeDrawZoomLevel: number = 12;\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: PolyStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log(\"Kartet i polydraw: \", this.map);\r\n      console.log(\"pre this.config\", this.config);\r\n      this.config = defaultConfig;\r\n      console.log(\"this.config\", this.config);\r\n      this.configurate({});\r\n      console.log(\"after this.config\", this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n      console.log(\"Tracer pipe: \", this.tracer);\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.mapState.mapZoomLevel$\r\n      .pipe(debounceTime(100), takeUntil(this.ngUnsubscribe))\r\n      .subscribe((zoom: number) => {\r\n        this.onZoomChange(zoom);\r\n      });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log(\"PolyInfo start: \", k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log(\"deletePolygon: \", polygon);\r\n    if(polygon.length > 1) {\r\n      polygon.length = 1;\r\n    }\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        console.log(latlngs);\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n              } \r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log(\"Test: \", polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log(\"equals: \", equals, \" length: \", length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    this.polygonInformation.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][][]): void {\r\n    geographicBorders.forEach(group => {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords(group)\r\n    );\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log(\"markers: \", markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log(\"Hull: \", polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    \r\n    });\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.setMoveMode();\r\n    console.log(this.polygonInformation.polygonInformationStorage);\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        latlngs[latlngs.length - 1].length\r\n      );\r\n      // tslint:disable-next-line: max-line-length\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log(\"Within1 \", within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener(\"touchstart\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchend\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchmove\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n    console.log(\"Map init: \", this.map);\r\n    console.log(\"Tracer init: \", this.tracer);\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log(\"mouseDown\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.Add:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.Subtract:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n\r\n  private onZoomChange(zoomLevel: number): void {\r\n    // console.log(\"onZoomChange\", zoomLevel);\r\n\r\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\r\n    } else {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\r\n      this.polygonInformation.setMoveMode();\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n\r\n    this.map[onoroff](\"mousemove\", this.mouseMove, this);\r\n    this.map[onoroff](\"mouseup\", this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    console.log(\r\n      \"addPolygon\",\r\n      latlngs,\r\n      simplify,\r\n      noMerge,\r\n      this.kinks,\r\n      this.config\r\n    );\r\n\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log(\"AddPolygonLayer: \", latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log(\"Hull: \", polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log(\"Array: \", this.arrayOfFeatureGroups);\r\n    this.polygonInformation.activate();\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on(\"click\", e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === \"MultiPolygon\") {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log(\"getPolygons: \", latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log(\"merge\", latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      console.log(\"Merger: \", featureCollection.features[0]);\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n    this.map[onoroff](\"mousedown\", this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*   if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on(\"drag\", e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        marker.on(\"click\", e => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on(\"drag\", e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(\" \");\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    console.log(\"markerdrag: \", layerLength);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log(\"Posisjoner: \", posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log(\"Posisjoner 2: \", posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log(\"Hole: \", hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log(\"STart index: \", length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log(\"Polygon drag: \", posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log(\"Hole 2: \", hole);\r\n    }\r\n    console.log(\"Nye posisjoner: \", newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log(\r\n      \"Markerdragend polygon: \",\r\n      featureCollection.features[0].geometry.coordinates\r\n    );\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        console.log(\"Markerdragend: \", feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log(\"Unkink: \", unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n      console.log(\"Markerdragend: \", feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log(\"Unkink: \", unkink);\r\n        let testCoord = []\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(\r\n            this.turfHelper.getTurfPolygon(polygon),\r\n            false,\r\n            true\r\n          );\r\n        });\r\n        // this.addPolygon(this.turfHelper.getMultiPolygon(testCoord), false, true);\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    console.log(\"getLatLngsFromJson: \", feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === \"MultiPolygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === \"Polygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    console.log(\"unionPolygons\", layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log(\"removeFeatureGroup\", featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      featureGroups => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log(\"removeFeatureGroupOnMerge\", featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        featureGroups => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log(\"deletePolygonOnMerge\", polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log(\"EQUALS\", polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) {\r\n        return false;\r\n      }\r\n    }\r\n    if (poly1.length !== poly2.length) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log(\"setDrawMode\", this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: \"\"\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.Add:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.Subtract:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: \"#D9460F\"\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n\r\n      if (isActiveDrawMode) {\r\n        this.polygonInformation.setFreeDrawMode();\r\n      } else {\r\n        this.polygonInformation.setMoveMode();\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\r\n      this.polygonInformation.setMoveMode();\r\n      this.setDrawMode(DrawMode.Off);\r\n    } else {\r\n      this.polygonInformation.setFreeDrawMode();\r\n      this.setDrawMode(DrawMode.Add);\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.Add);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.Subtract);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert(\"open menu\");\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log(\"bbox clicked\", e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log(\"simplyfi clicked\", e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(\r\n    latlngs: ILatLng[],\r\n    addMidpointMarkers: boolean = false\r\n  ) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(\r\n      polygon,\r\n      addMidpointMarkers\r\n    );\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getSouth(),\r\n      bounds.getWest(),\r\n      bounds.getNorth(),\r\n      bounds.getEast()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection.lat,\r\n      lng: compassDirection.lng\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  providers: [],\r\n  exports: [AlterPolygonComponent ],\r\n  entryComponents: [AlterPolygonComponent]\r\n})\r\nexport class MyLibModule {}\r\n"]}