{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/my-lib.service.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.component.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPlacement","MyLibService","Injectable","providedIn","MapStateService","mapSubject","BehaviorSubject","map$","asObservable","updateMapState","map","updatePolygons","polygons","console","log","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","bounds","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","turf.intersect","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","bbox","turf.bbox","turf.bboxPolygon","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","test","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","turf.booleanPointInPolygon","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","markerplacement","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","tslib_1.__decorate","Output","Component","selector","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","tracer","polygonDrawStates","ngUnsubscribe","config","pipe","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","AddPolygon","addPolygon","SubtractPolygon","subtractPolygon","drawStartedEvents","resetTracker","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","menu","delete","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","classNames","classes","join","L.divIcon","className","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","L.DomUtil","removeClass","color","addClass","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToBoundsPolygon","compassDirection","latLngPoint","fc","MyLibComponent","ngOnInit","MyLibModule","NgModule","declarations","imports","entryComponents","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPlacement {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyLibService {\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MapStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n\r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n    }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPlacement } from \"./enums\";\r\nimport { TurfHelperService } from \"./turf-helper.service\"\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n        \r\n        this.direction.North = {lat: maxLat, lng: (minLng + maxLng) / 2};\r\n        this.direction.NorthEast = {lat: maxLat, lng: maxLng};\r\n        this.direction.East = {lat: (minLat + maxLat) / 2, lng: maxLng};\r\n        this.direction.SouthEast = {lat: minLat, lng: maxLng};\r\n        this.direction.South = {lat: minLat, lng: (minLng + maxLng) / 2};\r\n        this.direction.SouthWest = {lat: minLat, lng: minLng};\r\n        this.direction.West = {lat:(minLat + maxLat) / 2, lng: minLng};\r\n        this.direction.NorthWest = {lat: maxLat, lng: minLng};\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPlacement) {\r\n        switch (direction) {\r\n            // case MarkerPlacement.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPlacement.North:\r\n                return this.direction.North;\r\n            case MarkerPlacement.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPlacement.East:\r\n                return this.direction.East;\r\n            case MarkerPlacement.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPlacement.South:\r\n                return this.direction.South;\r\n            case MarkerPlacement.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPlacement.West:\r\n                return this.direction.West;\r\n            case MarkerPlacement.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPlacement.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\n\r\nimport * as turf from \"@turf/turf\";\r\nimport concaveman from \"concaveman\";\r\nimport { Feature, Polygon, MultiPolygon, Position } from \"@turf/turf\";\r\nimport { MarkerPlacement } from \"./enums\";\r\nimport { ICompass } from \"./interface\";\r\nimport { Compass } from \"./utils\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log(\"poly1: \", poly1);\r\n    console.log(\"poly2: \", poly2);\r\n\r\n    let union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    let points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log(\"Get TurfPolygon:\", polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === \"Polygon\") {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    let coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    let poly = [];\r\n    let poly2 = [];\r\n\r\n    console.log(\"polygonIntersect\", polygon, latlngs);\r\n\r\n    let latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      let feat = { type: \"Polygon\", coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    let polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      let feat = { type: \"Polygon\", coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log(\"Ytre: \", polygon2);\r\n    return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));\r\n  }\r\n\r\n  equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    let coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log(\"polygon: \", polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log(\"test\", test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      let pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        let polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log(\"coordinates\", coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(polygon, markerplacement: ICompass, useOffset, offsetDirection) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number {\r\n    let index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}\r\n","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from \"./polygon.util\";\r\n\r\nexport class PolygonInfo {\r\n    polygon: ILatLng[][][] = [];\r\n    trashcanPoint: ILatLng[] = [];\r\n    sqmArea: number[] = [];\r\n    perimeter: number[] = [];\r\n    constructor(polygon) {\r\n        console.log(\"PolygonInfo: \", polygon);\r\n        polygon.forEach((polygons, i) => { this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n            this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n            this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n            console.log(polygons[0]);\r\n            this.polygon[i] = polygons\r\n        })\r\n        \r\n    }\r\n    setSqmArea(area: number): void {\r\n        this.sqmArea[0] = area;\r\n    }\r\n    private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n\r\n        const res = Math.max.apply(Math, polygon.map(o => o.lat));\r\n        const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n        let previousPoint: ILatLng;\r\n        let nextPoint: ILatLng;\r\n\r\n        if (idx > 0) {\r\n            previousPoint = polygon[idx - 1];\r\n            if (idx < polygon.length - 1) {\r\n                nextPoint = polygon[idx + 1];\r\n            } else {\r\n                nextPoint = polygon[0];\r\n            }\r\n        } else {\r\n            previousPoint = polygon[polygon.length - 1];\r\n            nextPoint = polygon[idx + 1];\r\n        }\r\n\r\n        const secondPoint = (previousPoint.lng < nextPoint.lng) ? previousPoint : nextPoint;\r\n\r\n        const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n        return midpoint;\r\n    }\r\n    private calculatePolygonArea(polygon: ILatLng[]): number {\r\n        const area = PolygonUtil.getSqmArea((polygon) as any);\r\n        return area;\r\n    }\r\n    private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n        const perimeter = PolygonUtil.getPerimeter((polygon) as any);\r\n        return perimeter;\r\n    }\r\n    \r\n}\r\n\r\nexport class PolygonDrawStates {\r\n    isActivated: boolean;\r\n    isFreeDrawMode: boolean;\r\n    isMoveMode: boolean;\r\n    canRevert: boolean;\r\n    isAuto: boolean;\r\n    hasPolygons: boolean;\r\n    canUsePolyDraw: boolean;\r\n\r\n\r\n    constructor() {\r\n        this.canUsePolyDraw = false;\r\n        this.reset();\r\n    }\r\n\r\n    activate(): void {\r\n        this.reset();\r\n        this.isActivated = true;\r\n    }\r\n\r\n    reset(): void {\r\n        this.isActivated = false;\r\n        this.hasPolygons = false;\r\n        this.canRevert = false;\r\n        this.isAuto = false;\r\n\r\n        this.resetDrawModes();\r\n    }\r\n\r\n    resetDrawModes(): void {\r\n        this.isFreeDrawMode = false;\r\n        this.isMoveMode = false;\r\n    }\r\n\r\n    setFreeDrawMode(isAuto: boolean = false): void {\r\n        if (isAuto) {\r\n            this.isActivated = true;\r\n        }\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isFreeDrawMode = true;\r\n            if (isAuto) {\r\n                this.isAuto = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMoveMode(): void {\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isMoveMode = true;\r\n        }\r\n    }\r\n\r\n    forceCanUseFreeDraw(): void {\r\n        this.canUsePolyDraw = true;\r\n    }\r\n}\r\n\r\nexport interface ILatLng {\r\n    lat: number, \r\n    lng: number;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyDrawService } from \"./polydraw.service\";\r\nimport { MapStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<PolygonInfo[]>();\r\n  polygonInformation$: Observable<PolygonInfo[]> = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<PolygonDrawStates>();\r\n  polygonDrawStates$: Observable<PolygonDrawStates> = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: MapStateService) {}\r\n\r\n  updatePolygons() {\r\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n      \r\n      \r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = []\r\n        v.polygon.forEach((poly) => {\r\n          let test2 = []\r\n            \r\n            poly.forEach(polygon => {\r\n              test2 = [...polygon]\r\n              if (polygon[0].toString() !== polygon[polygon.length - 1].toString()) {\r\n                test2.push(polygon[0]);             \r\n            }  \r\n            test.push(test2)\r\n            });\r\n            \r\n            \r\n            });\r\n           \r\n            newPolygons.push(test)\r\n        });\r\n\r\n      // this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      // this.polygonDrawStates.reset();\r\n      // this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(v => v.polygon[0] === polygon);\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log(\"DeleteTrashCan: \", polygon);\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(poly => poly.toString() === polygon.toString());\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log(\"ID: \", id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log(\"Index: \", index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(featureGroup.getLayers()[0].getLatLngs());\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Feature, Polygon, MultiPolygon } from '@turf/turf';\r\nimport { MapStateService } from './map-state.service';\r\nimport { TurfHelperService } from './turf-helper.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport defaultConfig from \"./polyinfo.json\";\r\n\r\nimport { ComponentGeneraterService } from './component-generater.service';\r\nimport { Compass, PolyDrawUtil } from './utils';\r\nimport { MarkerPlacement } from './enums';\r\nimport { LeafletHelperService } from './leaflet-helper.service';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  private readonly polygonDrawStates = null;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: MapStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log('pre this.config', this.config);\r\n      this.config = defaultConfig;\r\n      console.log('this.config', this.config);\r\n      this.configurate({});\r\n      console.log('after this.config', this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log('PolyInfo start: ', k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log('deletePolygon: ', polygon);\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n            }\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log('Test: ', polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log('equals: ', equals, ' length: ', length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // this.polygonDrawStates.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][]): void {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords(geographicBorders)\r\n    );\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log('markers: ', markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        latlngs[latlngs.length - 1].length\r\n      );\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log('Within1 ', within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener('touchstart', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchend', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchmove', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log('mouseDown', event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.AddPolygon:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.SubtractPolygon:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? 'on' : 'off';\r\n\r\n    this.map[onoroff]('mousemove', this.mouseMove, this);\r\n    this.map[onoroff]('mouseup', this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    console.log(\r\n      'addPolygon',\r\n      latlngs,\r\n      simplify,\r\n      noMerge,\r\n      this.kinks,\r\n      this.config\r\n    );\r\n\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log('AddPolygonLayer: ', latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log('Hull: ', polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log('Array: ', this.arrayOfFeatureGroups);\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on('click', e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === 'MultiPolygon') {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('getPolygons: ', latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log('merge', latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? 'on' : 'off';\r\n    this.map[onoroff]('mousedown', this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      }\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        // marker.on(\"click\", e => {\r\n        //   this.convertToBoundsPolygon(e, latlngs)\r\n        // })\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on('click', e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(' ');\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log('Posisjoner: ', posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log('Posisjoner 2: ', posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log('Hole: ', hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log('STart index: ', length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log('Polygon drag: ', posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log('Hole 2: ', hole);\r\n    }\r\n    console.log('Nye posisjoner: ', newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log(\r\n      'Markerdragend polygon: ',\r\n      featureCollection.features[0].geometry.coordinates\r\n    );\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        console.log('Markerdragend: ', feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log('Unkink: ', unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n      console.log('Markerdragend: ', feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log('Unkink: ', unkink);\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    console.log('getLatLngsFromJson: ', feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === 'MultiPolygon'\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === 'Polygon'\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    console.log('unionPolygons', layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroup', featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      featureGroups => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log('removeFeatureGroupOnMerge', featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        featureGroups => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log('deletePolygonOnMerge', polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log('EQUALS', polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) { return false; }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) { return false; }\r\n    }\r\n    if (poly1.length !== poly2.length) { return false; }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log('setDrawMode', this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: ''\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.AddPolygon:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.SubtractPolygon:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: '#D9460F'\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.SubtractPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert('open menu');\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log('bbox clicked', e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log('simplyfi clicked', e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(latlngs: ILatLng[]) {\r\n    const lPoly = this.leafletHelper.createPolygon(latlngs);\r\n\r\n    // const coords = this.convertToCoords([latlngs]);\r\n    // const p = this.getPolygon()\r\n\r\n    // if (poly.geometry.type === \"MultiPolygon\") {\r\n    //   let newPolygon = this.turfHelper.convertToBoundingBoxPolygon(poly);\r\n    //   this.deletePolygon(this.getLatLngsFromJson(poly));\r\n    //   this.addPolygonLayer(newPolygon, false);\r\n    // }\r\n  }\r\n  private getMarkerIndex(\r\n    latlngs: ILatLng[],\r\n    position: MarkerPlacement\r\n  ): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getWest(),\r\n      bounds.getSouth(),\r\n      bounds.getEast(),\r\n      bounds.getNorth()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection[1],\r\n      lng: compassDirection[0]\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n// flytt til enum.ts\r\nexport enum DrawMode {\r\n  Off = 0,\r\n  AddPolygon = 1,\r\n  EditPolygon = 2,\r\n  SubtractPolygon = 3,\r\n  LoadPolygon = 4\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-my-lib',\n  template: `\n    <p>\n      my-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class MyLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { MyLibComponent } from \"./my-lib.component\";\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\n\n@NgModule({\n  declarations: [MyLibComponent, AlterPolygonComponent],\n  imports: [],\n  entryComponents:[AlterPolygonComponent],\n  exports: [MyLibComponent]\n})\nexport class MyLibModule {}\n"]}