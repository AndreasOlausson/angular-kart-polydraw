{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.html","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPosition","PolyStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","mapStateSubject","MapStateModel","mapState$","mapZoomLevel$","pipe","map","state","mapBoundState","zoom","updateMapStates","newState","updateMapState","updatePolygons","polygons","console","log","updateMapBounds","mapBounds","factory","ɵfac","providedIn","MapBoundsState","bounds","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","turf.intersect","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","test","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","turf.booleanPointInPolygon","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","selector","className","elements","document","querySelectorAll","item","classList","remove","removeClass","isMoveMode","setFreeDrawMode","add","addClass","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonDrawStates","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","core","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","selectors","outputs","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵlistener","i0.ɵɵelement","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","minimumFreeDrawZoomLevel","tracer","ngUnsubscribe","config","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","debounceTime","takeUntil","onZoomChange","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","Add","addPolygon","Subtract","subtractPolygon","drawStartedEvents","resetTracker","zoomLevel","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","menu","delete","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","convertToBoundsPolygon","classNames","classes","join","L.divIcon","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","isActiveDrawMode","L.DomUtil","color","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","imports","declarations"],"mappings":"uhBA6BO,IAAIA,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,IAEKU,MAAMC,KAAMP,YAkFzB,SAASQ,EAAOC,EAAGV,GACtB,IAAIW,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBI,EAAYC,EAA3BhB,EAAIY,EAAEL,KAAKI,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANhB,GAAgBA,KAAM,MAAQc,EAAIf,EAAEkB,QAAQC,MAAMF,EAAGG,KAAKL,EAAEM,OAExE,MAAOC,GAASN,EAAI,CAAEM,MAAOA,GACjC,QACQ,IACQP,IAAMA,EAAEI,OAASP,EAAIZ,EAAU,SAAIY,EAAEL,KAAKP,GAE1D,QAAkB,GAAIgB,EAAG,MAAMA,EAAEM,OAE7B,OAAOL,EAGJ,SAASM,IACZ,IAAK,IAAIN,EAAK,GAAIjB,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CiB,EAAKA,EAAGO,OAAOd,EAAOR,UAAUF,KACpC,OAAOiB,MC3ICQ,EAQAC,eCER,SAAAC,IAGQlB,KAAAmB,WAAa,IAAIC,EAAAA,gBAAuB,MAEhDpB,KAAAqB,KAA0BrB,KAAKmB,WAAWG,eAClCtB,KAAAuB,eAAiB,IAAIH,EAAAA,gBAA+B,MAE5DpB,KAAAwB,UAAuCxB,KAAKuB,eAAeD,eACnDtB,KAAAyB,gBAAkB,IAAIL,EAAAA,gBAA+B,IAAIM,GACjE1B,KAAA2B,UAAuC3B,KAAKyB,gBAAgBH,eAC5DtB,KAAA4B,cAAqC5B,KAAK2B,UAAUE,KAAKC,EAAAA,KAAI,SAACC,GAAyB,OAAAA,EAAMC,cAAcC,gBAEnGf,EAAAtB,UAAAsC,gBAAR,SAAwBC,GACpB,IAAIJ,EAAQ/B,KAAKyB,gBAAgBb,MACjCmB,EAAK7C,EAAAA,EAAA,GAAQ6C,GAAUI,GAEvBnC,KAAKyB,gBAAgBhB,KAAKsB,IAI9Bb,EAAAtB,UAAAwC,eAAA,SAAeN,GACX9B,KAAKmB,WAAWV,KAAKqB,IAGzBZ,EAAAtB,UAAAyC,eAAA,SAAeC,GACXC,QAAQC,IAAI,YAAYF,GACxBtC,KAAKuB,eAAed,KAAK6B,IAE7BpB,EAAAtB,UAAA6C,gBAAA,SAAgBC,GACZ1C,KAAKkC,gBAAgB,CAAEF,cAAeU,sCA/BjCxB,2CAAAA,EAAgByB,QAAhBzB,EAAgB0B,KAAAC,WAFb,cAqChBnB,EACI,SAEWM,QAAA,IAAAA,IAAAA,EAAA,IAAoCc,EAAe,KAAM,KAAzD9C,KAAAgC,cAAAA,GAEfc,EACI,SACWC,EACAd,GADAjC,KAAA+C,OAAAA,EACA/C,KAAAiC,KAAAA,IDpDHjB,EAAAA,EAAAA,WAAAA,EAAAA,SAAQ,KAChBA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,eAAA,IAAA,kBAEQC,EAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KAEtBA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,UAAA,GAAA,YEZJ,IAAA+B,EAAA,WAAA,SAAAA,KAeA,OAdWA,EAAAC,UAAP,SAAiBC,EAAoBC,QAAA,IAAAA,IAAAA,EAAA,GACjC,IAAMC,EAAwB,GAC9BF,EAAQG,SAAQ,SAAAC,GACRC,MAAMD,EAAGE,MAAQD,MAAMD,EAAGG,KAE9BL,EAAUzC,KAAK2C,MAEnB,IACMP,EADuB,IAAIW,EAAAA,SAAWN,GACpBH,YACxB,OAAgB,IAAZE,EACOJ,EAAOY,IAAIR,GAEfJ,GAEfC,EAfA,GAiBAY,EAAA,WAeI,SAAAA,EAAYC,EAAoBC,EAAoBC,EAAoBC,QAA5D,IAAAH,IAAAA,EAAA,QAAoB,IAAAC,IAAAA,EAAA,QAAoB,IAAAC,IAAAA,EAAA,QAAoB,IAAAC,IAAAA,EAAA,GAbjEhE,KAAAiE,UAAsB,CAGzBC,KAAM,CAAEV,IAAK,EAAGC,IAAK,GACrBU,MAAO,CAAEX,IAAK,EAAGC,IAAK,GACtBW,UAAW,CAAEZ,IAAK,EAAGC,IAAK,GAC1BY,UAAW,CAAEb,IAAK,EAAGC,IAAK,GAC1Ba,MAAO,CAAEd,IAAK,EAAGC,IAAK,GACtBc,UAAW,CAAEf,IAAK,EAAGC,IAAK,GAC1Be,UAAW,CAAEhB,IAAK,EAAGC,IAAK,GAC1BgB,KAAM,CAAEjB,IAAK,EAAGC,IAAK,IAKrBzD,KAAKiE,UAAUE,MAAQ,CAAEX,IAAKO,EAAQN,KAAMK,EAASE,GAAU,GAC/DhE,KAAKiE,UAAUG,UAAY,CAAEZ,IAAKO,EAAQN,IAAKO,GAC/ChE,KAAKiE,UAAUC,KAAO,CAAEV,KAAMK,EAASE,GAAU,EAAGN,IAAKO,GACzDhE,KAAKiE,UAAUM,UAAY,CAAEf,IAAKK,EAAQJ,IAAKO,GAC/ChE,KAAKiE,UAAUK,MAAQ,CAAEd,IAAKK,EAAQJ,KAAMK,EAASE,GAAU,GAC/DhE,KAAKiE,UAAUO,UAAY,CAAEhB,IAAKK,EAAQJ,IAAKK,GAC/C9D,KAAKiE,UAAUQ,KAAO,CAAEjB,KAAMK,EAASE,GAAU,EAAGN,IAAKK,GACzD9D,KAAKiE,UAAUI,UAAY,CAAEb,IAAKO,EAAQN,IAAKK,GAqDvD,OAhDIF,EAAAhE,UAAA8E,aAAA,SAAaT,GACT,OAAQA,GAGJ,KAAKhD,EAAAA,eAAekD,MAChB,OAAOnE,KAAKiE,UAAUE,MAC1B,KAAKlD,EAAAA,eAAemD,UAChB,OAAOpE,KAAKiE,UAAUG,UAC1B,KAAKnD,EAAAA,eAAeiD,KAChB,OAAOlE,KAAKiE,UAAUC,KAC1B,KAAKjD,EAAAA,eAAesD,UAChB,OAAOvE,KAAKiE,UAAUM,UAC1B,KAAKtD,EAAAA,eAAeqD,MAChB,OAAOtE,KAAKiE,UAAUK,MAC1B,KAAKrD,EAAAA,eAAeuD,UAChB,OAAOxE,KAAKiE,UAAUO,UAC1B,KAAKvD,EAAAA,eAAewD,KAChB,OAAOzE,KAAKiE,UAAUQ,KAC1B,KAAKxD,EAAAA,eAAeoD,UAChB,OAAOrE,KAAKiE,UAAUI,UAG1B,QACI,OAAOrE,KAAKiE,UAAUE,QAIlCP,EAAAhE,UAAA+E,aAAA,SAAaC,EAAsDC,EAA4BC,QAAlF,IAAAF,IAAAA,EAA4B3D,EAAAA,eAAeuD,gBAAW,IAAAK,IAAAA,GAAA,QAA4B,IAAAC,IAAAA,GAAA,GAE3F,IAAIC,EAAwB,GAiB5B,OAfAA,EAAUpE,KAAK,CAACX,KAAKiE,UAAUO,UAAUf,IAAKzD,KAAKiE,UAAUO,UAAUhB,MACvEuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUO,UAAUf,IAAKzD,KAAKiE,UAAUO,UAAUhB,MACvEuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUK,MAAMb,IAAKzD,KAAKiE,UAAUK,MAAMd,MAC/DuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUM,UAAUd,IAAKzD,KAAKiE,UAAUM,UAAUf,MACvEuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUC,KAAKT,IAAKzD,KAAKiE,UAAUC,KAAKV,MAC7DuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUG,UAAUX,IAAKzD,KAAKiE,UAAUG,UAAUZ,MACvEuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUE,MAAMV,IAAKzD,KAAKiE,UAAUE,MAAMX,MAC/DuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUI,UAAUZ,IAAKzD,KAAKiE,UAAUI,UAAUb,MACvEuB,EAAUpE,KAAK,CAACX,KAAKiE,UAAUQ,KAAKhB,IAAKzD,KAAKiE,UAAUQ,KAAKjB,MACzDsB,GACAC,EAAUpE,KAAK,CAACX,KAAKiE,UAAUO,UAAUf,IAAKzD,KAAKiE,UAAUO,UAAUhB,MAKpEuB,GAEfnB,EA7EA,GCZAoB,EAAA,WAGE,SAAAA,IADQhF,KAAAiF,kBAAoB,CAAEC,UAAW,KAAQC,aAAa,UAG9DH,EAAApF,UAAAwF,MAAA,SAAMC,EAAOC,GACX/C,QAAQC,IAAI,UAAW6C,GACvB9C,QAAQC,IAAI,UAAW8C,GAEvB,IAAIF,EAAQG,EAAAA,MAAWF,EAAOC,GAE9B,OAAOtF,KAAKwF,eAAeJ,IAG7BJ,EAAApF,UAAA6F,eAAA,SAAeC,GAEb,IAEMC,EAFOC,EAAAA,QAAaF,GAECG,SAAS/D,KAAI,SAAAgE,GAAK,OAAAA,EAAEC,SAASJ,eACxD,OAAOK,EAAAA,aAAkB,CAAC,CAACC,EAAWN,OAKxCX,EAAApF,UAAAsG,cAAA,SAAchD,GACZ,IAAMgC,EAAYlF,KAAKiF,kBAEvB,OADmBkB,EAAAA,SAAcjD,EAASgC,IAI5CF,EAAApF,UAAA4F,eAAA,SAAetC,GASb,OAPAX,QAAQC,IAAI,mBAAoBU,GAEF,YAA1BA,EAAQ6C,SAASK,KACLJ,EAAAA,aAAkB,CAAC9C,EAAQ6C,SAASJ,cAEpCK,EAAAA,aAAkB9C,EAAQ6C,SAASJ,cAKrDX,EAAApF,UAAAyG,gBAAA,SAAgBC,GACd,OAAON,EAAAA,aAAkBM,IAG3BtB,EAAApF,UAAA2G,SAAA,SAASb,GACP,IAAMc,EAASC,EAAAA,cAAmBf,GAC9BC,EAAc,GAKlB,OAJAe,EAAAA,YAAiBF,GAAQ,SAAAG,GACvBhB,EAAYhF,KAAKgG,MAGZhB,GAGTX,EAAApF,UAAAgH,UAAA,SAAUlB,GACR,OAAOmB,EAAAA,UAAenB,IAGxBV,EAAApF,UAAAkH,SAAA,SAASpB,GAEP,OADcqB,EAAAA,MAAWrB,GACZG,SAASnG,OAAS,GAGjCsF,EAAApF,UAAAoH,iBAAA,SAAiB9D,EAA0C+D,GAEzD,IAAIC,EAAO,GACP5B,EAAQ,GAEZ/C,QAAQC,IAAI,mBAAoBU,EAAS+D,GAErBJ,EAAAA,UAAeI,GACrB5D,SAAQ,SAAA8D,GACpB,IAAIC,EAAO,CAAEhB,KAAM,UAAWT,YAAa,CAACwB,EAAQ,KAEpDD,EAAKvG,KAAKyG,MAEQP,EAAAA,UAAe3D,GACrBG,SAAQ,SAAA8D,GACpB,IAAIC,EAAO,CAAEhB,KAAM,UAAWT,YAAa,CAACwB,EAAQ,KAEpD7B,EAAM3E,KAAKyG,MAEb,IAAIC,GAAY,EAChBC,EAAO,IAAK,IAAI/H,EAAI,EAAGA,EAAI2H,EAAKxH,OAAQH,IACtC,GAAIS,KAAKuG,SAASW,EAAK3H,IAAIG,OAAS,EAClC,IAAK,IAAI6H,EAAI,EAAGA,EAAIjC,EAAM5F,OAAQ6H,IAChC,GAAIvH,KAAKuG,SAASjB,EAAMiC,IAAI7H,OAAS,IACnC2H,IAAcG,EAAAA,UAAeN,EAAK3H,GAAI+F,EAAMiC,KAE1C,MAAMD,EAOhB,OAAOD,GAGTrC,EAAApF,UAAA6H,gBAAA,SAAgBpC,EAAOC,GACrB,OAAOkC,EAAAA,UAAenC,EAAOC,IAE/BN,EAAApF,UAAA8H,YAAA,SAAYC,EAAQC,GAClB,OAAOC,EAAAA,SAAcF,EAAQC,IAG/B5C,EAAApF,UAAAkI,SAAA,SAASC,EAAsBC,GAG7B,OAFAzF,QAAQC,IAAIuF,GACZxF,QAAQC,IAAI,SAAUwF,GACfC,EAAAA,cAAmBC,EAAAA,QAAa,CAACH,IAAYG,EAAAA,QAAa,CAACF,MAGpEhD,EAAApF,UAAAuI,cAAA,SAAcJ,EAA2CC,GACvDzF,QAAQC,IAAIuF,GACZxF,QAAQC,IAAIwF,GACZzF,QAAQC,IAAI4F,EAAAA,aAAkBL,EAAUC,KAG1ChD,EAAApF,UAAAyI,4BAAA,SAA4BnF,EAA0CoF,QAAA,IAAAA,IAAAA,GAAA,GACpE,IAAMC,EAAOC,EAAAA,KAAUtF,EAAQ6C,UACzB0C,EAAcC,EAAAA,YAAiBH,GAK/BI,EAFU,IAAI/E,EAAQ2E,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAE3B5D,eAKjC,OAHA8D,EAAY1C,SAASJ,YAAc,GACnC8C,EAAY1C,SAASJ,YAAc,CAACgD,GAE7BF,GAETzD,EAAApF,UAAAgJ,sBAAA,SAAsB1B,GAEpB,OADclB,EAAAA,aAAkB,CAACkB,EAAKnB,SAASJ,eAIjDX,EAAApF,UAAAiJ,qBAAA,SAAqB3F,EAAS4F,GAC5B,IACIC,EADAC,EAASnC,EAAAA,UAAe3D,GAG5B,GADAX,QAAQC,IAAI,YAAaU,GACrB8F,EAAOtJ,OAAS,EAAG,CACrB,IAAMuJ,EAAgBrD,EAAAA,QAAa1C,GACnCX,QAAQC,IAAI0G,EAAAA,aAAkBJ,EAAOG,IACrC,IAAIE,EAAQD,EAAAA,aAAkBJ,EAAOG,GAAeG,WAAWC,aACzDC,EAAOC,EAAAA,YACXN,GACA,SAASO,EAAaC,EAAUlK,GAC9B,OACEuB,EAAW0I,EADTL,IAAU5J,EACU,CAAEkK,EAAUX,GAEd,CAAEW,MAE1B,IAEFlH,QAAQC,IAAI,OAAQ8G,GACpBP,EAAa/C,EAAAA,aAAkB,CAAC,CAACsD,SAC5B,CACL,IAAII,EAAM,GACNC,EAAc,GAClBX,EAAO3F,SAAQ,SAAA8D,GACb,IAAIjE,EAAUgF,EAAAA,QAAaf,GAE3B,GAAIyC,EAAAA,sBAA2Bd,EAAO5F,GAAU,CAC9C,IAAM+F,EAAgBrD,EAAAA,QAAa1C,GAC/B2G,EAAQX,EAAAA,aAAkBJ,EAAOG,GAAeG,WAAWC,aAC/DM,EAAcJ,EAAAA,YACZN,GACA,SAASO,EAAaC,EAAUlK,GAC9B,OACEuB,EAAW0I,EADTK,IAAUtK,EACU,CAAEkK,EAAUX,GAEd,CAAEW,MAE1B,IAEFlH,QAAQC,IAAI,cAAemH,QAE3BD,EAAI/I,KAAKwG,MAGbuC,EAAI/I,KAAK,CAACgJ,IACVZ,EAAa/C,EAAAA,aAAkB0D,GAEjC,OAAOX,GAGT/D,EAAApF,UAAAkK,kBAAA,SAAkB/B,EAA2CC,GAC3D,IAAI+B,EAAOC,EAAAA,WAAgBjC,EAAUC,GAErC,OADAzF,QAAQC,IAAIuH,GACL/J,KAAKwF,eAAeuE,IAE7B/E,EAAApF,UAAAqK,8BAAA,SAA8B/G,EAASjC,EAA0BiJ,EAAWC,GAChEnK,KAAKqG,gBAAgBnD,GAA/B,IACMkH,EAAUpK,KAAKqK,sBAAsBnH,GACrC+F,EAAgBrD,EAAAA,QAAa1C,GAC7BoH,EAAQtK,KAAKuK,SAASH,EAAQnG,UAAUE,OACzB+E,EAAAA,aAAkBoB,EAAOrB,GAE9C,OAAO,MAEDjE,EAAApF,UAAAyK,sBAAR,SAA8BnH,GAC5B,IAAMvD,EAAIK,KAAKqG,gBAAgBnD,GAEzBsH,GADeC,EAAAA,aAAkB9K,GAC7B6I,EAAAA,KAAU7I,IACd+K,EAAOF,EAAE,GACTG,EAAOH,EAAE,GACTI,EAAOJ,EAAE,GACTK,EAAOL,EAAE,GAIf,OAHgB,IAAI5G,EAAQ8G,EAAMC,EAAMC,EAAMC,IAMhD7F,EAAApF,UAAAkL,qBAAA,SAAqBC,EAAyBC,GAE5C,OADY9B,EAAAA,aAAkB6B,EAAaC,GAAQ5B,WAAWC,cAGhErE,EAAApF,UAAA2K,SAAA,SAASzB,GAEP,OADcmC,EAAAA,SAAc,CAACnC,EAAMrF,IAAKqF,EAAMtF,OAGhDwB,EAAApF,UAAAsL,0BAAA,SAA0BF,GACxB,IAAMG,EAAM,GAQZ,OAPAH,EAAO3H,SAAQ,SAAA+H,GACb,IAAMzL,EAAI0L,EAAAA,MAAW,CAACD,EAAE3H,IAAK2H,EAAE5H,KAAM,IACrC2H,EAAIxK,KAAKhB,MAGA2L,EAAAA,kBAAuBH,qCAvOzBnG,2CAAAA,EAAiBrC,QAAjBqC,EAAiBpC,KAAAC,WADJ,WAA1B,GCLA0I,EAAA,WAAA,SAAAA,KA8GA,OA7GWA,EAAAC,UAAP,SAAiBtI,GACb,IAAMuI,EAAKC,KAAKC,GACZC,EAAI,EACJC,EAAI,EACJC,EAAI,EAER5I,EAAQG,SAAQ,SAAA+H,GACZ,IAAIW,EAAOX,EAAE5H,IACTwI,EAAOZ,EAAE3H,IACbsI,EAAOA,EAAON,EAAK,IACnBO,EAAOA,EAAOP,EAAK,IACnBG,GAAKF,KAAKO,IAAIF,GAAQL,KAAKO,IAAID,GAC/BH,GAAKH,KAAKO,IAAIF,GAAQL,KAAKQ,IAAIF,GAC/BF,GAAKJ,KAAKQ,IAAIH,MAGlB,IAAItI,EAAMiI,KAAKS,MAAMN,EAAGD,GAClBQ,EAAMV,KAAKW,KAAKT,EAAIA,EAAIC,EAAIA,GAC9BrI,EAAMkI,KAAKS,MAAML,EAAGM,GAKxB,MAFwB,CAAE5I,IAF1BA,EAAY,IAANA,EAAYiI,EAEkBhI,IADpCA,EAAY,IAANA,EAAYgI,IAKfF,EAAAe,aAAP,SAAoBpJ,GAEhB,OADelD,KAAKiD,UAAUC,GAChBqJ,gBAEXhB,EAAAiB,aAAP,SAAoBtJ,GAEhB,OADelD,KAAKiD,UAAUC,GAChBsJ,gBAEXjB,EAAAgB,aAAP,SAAoBrJ,GAEhB,OADelD,KAAKiD,UAAUC,GAChBqJ,gBAEXhB,EAAAkB,aAAP,SAAoBvJ,GAEhB,OADelD,KAAKiD,UAAUC,GAChBuJ,gBAEXlB,EAAAmB,SAAP,SAAgBxJ,GAEZ,OADelD,KAAKiD,UAAUC,GAChBwJ,YAEXnB,EAAAoB,SAAP,SAAgBzJ,GAEZ,OADelD,KAAKiD,UAAUC,GAChByJ,YAEXpB,EAAAqB,QAAP,SAAe1J,GAEX,OADelD,KAAKiD,UAAUC,GAChB0J,WAEXrB,EAAAsB,QAAP,SAAe3J,GAEX,OADelD,KAAKiD,UAAUC,GAChB2J,WAEXtB,EAAAuB,WAAP,SAAkB5J,GACd,IACM6J,EADkB,IAAIC,EAAAA,QAAU9J,GACb+J,YAIzB,OAFaC,EAAAA,KAAS,IAInB3B,EAAA4B,aAAP,SAAoBjK,GAChB,IACM6J,EADkB,IAAIC,EAAAA,QAAU9J,GACb+J,YAIzB,OAFkBG,EAAAA,OAAW,EAAuB,CAACC,MAAO,YAIzD9B,EAAA+B,mBAAP,SAA0BpK,GACtB,IAAMqK,EAAgBrK,EAAQsK,QAAO,SAACpC,EAAG7L,EAAGkO,GACxC,OAAOA,EAAEC,QAAQD,EAAEE,MAAK,SAAA/B,GAAK,OAAAA,EAAEpI,MAAQ4H,EAAE5H,KAAOoI,EAAEnI,MAAQ2H,EAAE3H,UAAUlE,KAG1E,OAAOgO,EAAcK,QAAO,SAACH,EAAGjD,GAAM,OAACiD,IAAKjD,EAAEhH,MAAK,GAAK+J,EAAcK,QAAO,SAACH,EAAGjD,GAAM,OAACiD,IAAKjD,EAAE/G,MAAK,IAEjG8H,EAAAsC,YAAP,SAAmBlG,EAAiBC,GAEhC,IAAMkG,EAAKzC,EAAAA,MAAW,CAAC1D,EAAOlE,IAAKkE,EAAOnE,MACpCuK,EAAK1C,EAAAA,MAAW,CAACzD,EAAOnE,IAAKmE,EAAOpE,MAEpCwK,EAAWC,EAAAA,SAAcH,EAAIC,GAOnC,MAL6B,CACzBvK,IAAKwK,EAASjI,SAASJ,YAAY,GACnClC,IAAKuK,EAASjI,SAASJ,YAAY,KAKpC4F,EAAAtI,UAAP,SAAiBC,GACb,IAAME,EAAwB,GAW9B,OATAF,EAAQG,SAAQ,SAAAC,GACRC,MAAMD,EAAGE,MAAQD,MAAMD,EAAGG,KAE9BL,EAAUzC,KAAK2C,MAGU,IAAII,EAAAA,SAAWN,GACpBH,aAKhCsI,EA9GA,gBCEE,SAAA2C,EAAYhL,GAAZ,IAAAiL,EAAAnO,KAJAA,KAAAkD,QAAyB,GACzBlD,KAAAoO,cAA2B,GAC3BpO,KAAAqO,QAAoB,GACpBrO,KAAAsO,UAAsB,GAEpB/L,QAAQC,IAAI,gBAAiBU,GAC7BA,EAAQG,SAAQ,SAACf,EAAU/C,GACzB4O,EAAKC,cAAc7O,GAAK4O,EAAKI,iBAAiBjM,EAAS,IACvD6L,EAAKE,QAAQ9O,GAAK4O,EAAKK,qBAAqBlM,EAAS,IACrD6L,EAAKG,UAAU/O,GAAK4O,EAAKM,0BAA0BnM,EAAS,IAC5DC,QAAQC,IAAIF,EAAS,IACrB6L,EAAKjL,QAAQ3D,GAAK+C,KA2CxB,OAxCE4L,EAAAtO,UAAA8O,WAAA,SAAWC,GACT3O,KAAKqO,QAAQ,GAAKM,GAEZT,EAAAtO,UAAA2O,iBAAR,SAAyBrL,GACvB,IAMI0L,EACAC,EAPEC,EAAMpD,KAAKqD,IAAIhP,MACnB2L,KACAxI,EAAQpB,KAAI,SAAA5B,GAAK,OAAAA,EAAEsD,QAEfwL,EAAM9L,EAAQ+L,WAAU,SAAA/O,GAAK,OAAAA,EAAEsD,MAAQsL,KAKzCE,EAAM,GACRJ,EAAgB1L,EAAQ8L,EAAM,GAE5BH,EADEG,EAAM9L,EAAQxD,OAAS,EACbwD,EAAQ8L,EAAM,GAEd9L,EAAQ,KAGtB0L,EAAgB1L,EAAQA,EAAQxD,OAAS,GACzCmP,EAAY3L,EAAQ8L,EAAM,IAG5B,IAAME,EACJN,EAAcnL,IAAMoL,EAAUpL,IAAMmL,EAAgBC,EAItD,OAFiBtD,EAAYsC,YAAY3K,EAAQ8L,GAAME,IAIjDhB,EAAAtO,UAAA4O,qBAAR,SAA6BtL,GAE3B,OADaqI,EAAYuB,WAAW5J,IAG9BgL,EAAAtO,UAAA6O,0BAAR,SAAkCvL,GAEhC,OADkBqI,EAAY4B,aAAajK,IAG/CgL,KAqBAiB,EAAA,WASE,SAAAA,IACEnP,KAAKoP,gBAAiB,EACtBpP,KAAKqP,QA+CT,OA5CEF,EAAAvP,UAAA0P,SAAA,WACEtP,KAAKqP,QACLrP,KAAKuP,aAAc,GAGrBJ,EAAAvP,UAAAyP,MAAA,WACErP,KAAKuP,aAAc,EACnBvP,KAAKwP,aAAc,EACnBxP,KAAKyP,WAAY,EACjBzP,KAAK0P,QAAS,EAEd1P,KAAK2P,kBAGPR,EAAAvP,UAAA+P,eAAA,WACE3P,KAAK4P,gBAAiB,EAvCyC,SACjEC,EACAC,GAGA,IADA,IAAMC,EAAoCC,SAASC,iBAAiBJ,GAC3DtQ,EAAI,EAAGA,EAAIwQ,EAASrQ,OAAQH,IACnCwQ,EAASG,KAAK3Q,GAAG4Q,UAAUC,OAAON,GAkClCO,CAAY,mBAAoB,kBAChCrQ,KAAKsQ,YAAa,GAGpBnB,EAAAvP,UAAA2Q,gBAAA,SAAgBb,QAAA,IAAAA,IAAAA,GAAA,GACVA,IACF1P,KAAKuP,aAAc,GAEjBvP,KAAKuP,cACPvP,KAAK2P,iBACL3P,KAAK4P,gBAAiB,EA5DoC,SAC9DC,EACAC,GAGA,IADA,IAAMC,EAAoCC,SAASC,iBAAiBJ,GAC3DtQ,EAAI,EAAGA,EAAIwQ,EAASrQ,OAAQH,IACnCwQ,EAASG,KAAK3Q,GAAG4Q,UAAUK,IAAIV,GAuD7BW,CAAS,mBAAoB,kBACzBf,IACF1P,KAAK0P,QAAS,KAKpBP,EAAAvP,UAAA8Q,YAAA,WACM1Q,KAAKuP,cACPvP,KAAK2P,iBACL3P,KAAKsQ,YAAa,IAItBnB,EAAAvP,UAAA+Q,oBAAA,WACE3Q,KAAKoP,gBAAiB,GAE1BD,EA1DA,gBCvDE,SAAAyB,EAAoBC,GAAA7Q,KAAA6Q,gBAAAA,EAfpB7Q,KAAA8Q,0BAAoD,IAAIC,EAAAA,QAGxD/Q,KAAAgR,oBAEIhR,KAAK8Q,0BAA0BxP,eACnCtB,KAAAiR,yBAAuD,IAAIF,EAAAA,QAG3D/Q,KAAAkR,mBAEIlR,KAAKiR,yBAAyB3P,eAElCtB,KAAAmR,kBAAuC,KACvCnR,KAAAoR,0BAA4B,GAE1BpR,KAAKmR,kBAAoB,IAAIhC,SAG/ByB,EAAAhR,UAAAyC,eAAA,WACEE,QAAQC,IAAI,mBAAoBxC,KAAKoR,2BAErC,IAAIC,EAA6B,KAC7BrR,KAAKoR,0BAA0B1R,OAAS,GAC1C2R,EAAc,GAEdrR,KAAKoR,0BAA0B/N,SAAQ,SAAA+H,GACrC,IAAI9B,EAAO,GACX8B,EAAElI,QAAQG,SAAQ,SAAA6D,GAChB,IAAIoK,EAAQ,GAEZpK,EAAK7D,SAAQ,SAAAH,GACXoO,EAAKxQ,EAAOoC,GAEVA,EAAQ,GAAGqO,aAAerO,EAAQA,EAAQxD,OAAS,GAAG6R,YAEtDD,EAAM3Q,KAAKuC,EAAQ,IAErBoG,EAAK3I,KAAK2Q,SAIdD,EAAY1Q,KAAK2I,MAGnBtJ,KAAKmR,kBAAkB3B,aAAc,IAErCxP,KAAKmR,kBAAkB9B,QACvBrP,KAAKmR,kBAAkB3B,aAAc,GAEvCxP,KAAK6Q,gBAAgBxO,eAAegP,GACpCrR,KAAKwR,oBAGPZ,EAAAhR,UAAA4R,iBAAA,WACExR,KAAK8Q,0BAA0BrQ,KAAKT,KAAKoR,2BACzCpR,KAAKiR,yBAAyBxQ,KAAKT,KAAKmR,mBACxC5O,QAAQC,IAAI,qBAAsBxC,KAAKoR,4BAGzCR,EAAAhR,UAAA6R,eAAA,SAAevO,GACb,IAAM8L,EAAMhP,KAAKoR,0BAA0BnC,WACzC,SAAA7D,GAAK,OAAAA,EAAElI,QAAQ,KAAOA,KAExBlD,KAAKoR,0BAA0BM,OAAO1C,EAAK,GAC3ChP,KAAKqC,kBAGPuO,EAAAhR,UAAA+R,sBAAA,SAAsBzO,GACpB,IAAI0O,EAAQ,EACZrP,QAAQC,IAAI,mBAAoBU,GAChCX,QAAQC,IAAI,0BAA2BxC,KAAKoR,2BAE5CpR,KAAKoR,0BAA0B/N,SAAQ,SAAC+H,EAAG7L,GACzCgD,QAAQC,IAAI4I,EAAElI,SACd,IAAM2O,EAAKzG,EAAElI,QAAQ+L,WACnB,SAAA/H,GAAQ,OAAAA,EAAKqK,aAAerO,EAAQqO,cAElCM,GAAM,IACRD,EAAQrS,EACR6L,EAAEgD,cAAcsD,OAAOG,EAAI,GAC3BzG,EAAEiD,QAAQqD,OAAOG,EAAI,GACrBzG,EAAEkD,UAAUoD,OAAOG,EAAI,GACvBzG,EAAElI,QAAQwO,OAAOG,EAAI,GAErBtP,QAAQC,IAAI4I,EAAElI,UAEhBX,QAAQC,IAAI,OAAQqP,MAEtB7R,KAAKqC,iBACLE,QAAQC,IAAI,UAAWoP,GACnB5R,KAAKoR,0BAA0B1R,OAAS,GAC1CM,KAAKoR,0BAA0BM,OAAOE,EAAO,GAE/CrP,QAAQC,IAAI,0BAA2BxC,KAAKoR,4BAG9CR,EAAAhR,UAAAkS,gCAAA,WACE9R,KAAKoR,0BAA4B,IAGnCR,EAAAhR,UAAAmS,gCAAA,SAAgCC,GAAhC,IAAA7D,EAAAnO,KACEuC,QAAQC,IAAI,gBAAiBwP,GACzBA,EAAqBtS,OAAS,IAChCsS,EAAqB3O,SAAQ,SAAA4O,GAC3B1P,QAAQC,IAAIyP,EAAaC,YAAY,GAAGC,cACxC,IAAIC,EAAW,IAAIlE,EACjB+D,EAAaC,YAAY,GAAGC,cAE9BhE,EAAKiD,0BAA0BzQ,KAAKyR,MAEtCpS,KAAKqC,mBAITuO,EAAAhR,UAAA0P,SAAA,WACEtP,KAAKmR,kBAAkB7B,YAEzBsB,EAAAhR,UAAAyP,MAAA,WACErP,KAAKmR,kBAAkB9B,SAGzBuB,EAAAhR,UAAA8Q,YAAA,WACE1Q,KAAKmR,kBAAkBT,eAGzBE,EAAAhR,UAAA2Q,gBAAA,WACEvQ,KAAKmR,kBAAkBZ,oDAhIdK,GAAyByB,EAAA,YAAAnR,4CAAzB0P,EAAyBjO,QAAzBiO,EAAyBhO,KAAAC,WADZ,0kBCJ1ByP,EAAA,WAAA,SAAAA,IAOYtS,KAAAuS,gBAA4C,IAAIC,EAAAA,aAEhDxS,KAAAyS,YAAwC,IAAID,EAAAA,oBAEtDF,EAAA1S,UAAA8S,WAAA,SAAWC,GACT3S,KAAKuS,gBAAgBK,KAAKD,IAG5BL,EAAA1S,UAAAiT,OAAA,SAAOF,GACL3S,KAAKyS,YAAYG,KAAKD,qCAXbL,wCAAAA,EAAqBQ,UAAA,CAAA,CAAA,sBAAAC,QAAA,CAAAR,gBAAA,kBAAAE,YAAA,eAAAO,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,6BAAA,CAAA,EAAA,sBAAA,CAAA,EAAA,uBAAA,CAAA,EAAA,qBAAA,WAAA,EAAA,SAAA,CAAA,EAAA,yBAAA,CAAA,EAAA,qBAAA,OAAA,EAAA,UAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICPlCE,EAAAA,kBAAAA,EAAAA,MAAAA,GACEA,EAAAA,kBAAAA,EAAAA,MAAAA,GAAgCC,EAAAA,UAAAA,EAAAA,iBAAaC,EAAAA,kBAC7CF,EAAAA,kBAAAA,EAAAA,MAAAA,GACEA,EAAAA,kBAAAA,EAAAA,MAAAA,GAAyCG,EAAAA,cAAAA,SAAAA,SAAAA,GAAAA,OAASJ,EAAAX,WAAAC,MAAoBY,EAAAA,UAAAA,EAAAA,YAAQC,EAAAA,kBAC9EE,EAAAA,aAAAA,EAAAA,MAAAA,GACAJ,EAAAA,kBAAAA,EAAAA,MAAAA,GAAqCG,EAAAA,cAAAA,SAAAA,SAAAA,GAAAA,OAASJ,EAAAR,OAAAF,MAAiBY,EAAAA,UAAAA,EAAAA,QAAIC,EAAAA,kBACrEA,EAAAA,kBACFA,EAAAA,oCDLA,gBEQE,SAAAG,EACmBC,EACAC,GADA7T,KAAA4T,IAAAA,EACA5T,KAAA6T,SAAAA,EAJX7T,KAAA8T,iBAA0D,UAOlEH,EAAA/T,UAAAmU,YAAA,WACE/T,KAAKgU,iCAGPL,EAAA/T,UAAAqU,mBAAA,WACE,IACMC,EADsDlU,KAAK4T,IAAIO,wBAAwB7B,GACnB8B,OAAOpU,KAAK6T,UAEtF,OADA7T,KAAK8T,iBAAiBnT,KAAKuT,GACpBA,GAGTP,EAAA/T,UAAAoU,8BAAA,WACEhU,KAAK8T,iBAAiBzQ,SAAQ,SAAAgR,GACxBA,GACFA,EAAKC,aAGTtU,KAAK8T,iBAAmB,qCA1BfH,GAAyBtB,EAAA,YAAAA,EAAAkC,0BAAAlC,EAAA,YAAAA,EAAAmC,mDAAzBb,EAAyBhR,QAAzBgR,EAAyB/Q,KAAAC,WAFxB,cCAd4R,EAAA,WAEE,SAAAA,YAEAA,EAAA7U,UAAA8U,cAAA,SAAcC,GAEZ,OADUC,EAAAA,QAAUD,qCAJXF,2CAAAA,EAAoB9R,QAApB8R,EAAoB7R,KAAAC,WADP,WAA1B,gBCoCE,SAAAgS,EACUC,EACAC,EACAC,EACAC,EACAC,GALV,IAAA/G,EAAAnO,KACUA,KAAA8U,SAAAA,EACA9U,KAAA+U,eAAAA,EACA/U,KAAAgV,WAAAA,EACAhV,KAAAiV,mBAAAA,EACAjV,KAAAkV,cAAAA,EAvBVlV,KAAAmV,gBAA6C,IAAI/T,EAAAA,gBAC/CJ,EAAAA,SAASoU,KAEXpV,KAAAqV,UAAkCrV,KAAKmV,gBAAgB7T,eAEtCtB,KAAAsV,yBAAmC,GAM5CtV,KAAAgS,qBAAkD,GAClDhS,KAAAuV,OAAqB,GAGrBvV,KAAAwV,cAAgB,IAAIzE,EAAAA,QACpB/Q,KAAAyV,OAA+B,KASrCzV,KAAK8U,SAASzT,KAAKQ,KAAK2L,EAAAA,QAAO,SAAArN,GAAK,OAAM,OAANA,MAAauV,WAAU,SAAC5T,GAC1DqM,EAAKrM,IAAMA,EACXS,QAAQC,IAAI,kBAAmB2L,EAAKsH,QACpCtH,EAAKsH,OAASE,EACdpT,QAAQC,IAAI,cAAe2L,EAAKsH,QAChCtH,EAAKyH,YAAY,IACjBrT,QAAQC,IAAI,oBAAqB2L,EAAKsH,QACtCtH,EAAKoH,OAASM,EAAAA,SAAW,CAAC,CAAC,EAAG,IAAK1H,EAAKsH,OAAOK,iBAE/C3H,EAAK4H,kBAGP/V,KAAK8U,SAASlT,cACXC,KAAKmU,EAAAA,aAAa,KAAMC,EAAAA,UAAUjW,KAAKwV,gBACvCE,WAAU,SAACzT,GACVkM,EAAK+H,aAAajU,MAGtBjC,KAAKiV,mBAAmBjE,oBAAoB0E,WAAU,SAAAS,GACpD5T,QAAQC,IAAI,mBAAoB2T,aAMpCtB,EAAAjV,UAAAgW,YAAA,SAAYH,GAEVzV,KAAKyV,OAAMvW,EAAAA,EAAA,GAAQyW,GAAkBF,GAErCzV,KAAKoW,cAAgBpW,KAAKyV,OAAOW,cACjCpW,KAAKqW,MAAQrW,KAAKyV,OAAOY,OAI3BxB,EAAAjV,UAAA0W,cAAA,WAEEtW,KAAKuW,YAAYvV,EAAAA,SAASoU,KAC1BpV,KAAKwW,0BAIP3B,EAAAjV,UAAA6W,cAAA,SAAcvT,GAAd,IAAAiL,EAAAnO,KACEuC,QAAQC,IAAI,kBAAmBU,GAC3BlD,KAAKgS,qBAAqBtS,OAAS,GACrCM,KAAKgS,qBAAqB3O,SAAQ,SAAA4O,GAChC,IAAMyE,EAAQzE,EAAaC,YAAY,GACjCjL,EAAUyP,EAAMvE,aAChBzS,EAASuH,EAAQvH,OAEvBuH,EAAQ5D,SAAQ,SAACsT,EAAQ/E,GACvB,IAAIgF,EACEtN,EAAIxI,EAAO6V,GAEjBpU,QAAQC,IAAImU,GACRA,EAAOjX,OAAS,EAKlBkX,EAAW,CAACtN,EAAK,KAEbqN,EAAO,KAAOA,EAAOA,EAAOjX,OAAS,IACvC4J,EAAK3I,KAAKgW,EAAO,IAEnBC,EAAWtN,GAGb/G,QAAQC,IAAI,SAAUoU,GAEtBrU,QAAQC,IAAIU,GAEZ,IAAM2T,EAAS1I,EAAK2I,mBAAmBF,EAAU1T,GACjDX,QAAQC,IAAI,WAAYqU,EAAQ,YAAanX,GACzCmX,GAAqB,IAAXnX,GACZyO,EAAK8G,mBAAmBxD,eAAevO,GAEvCiL,EAAK4I,mBAAmB9E,GACxB1P,QAAQC,IAAIyP,EAAaC,cAChB2E,GAAUnX,EAAS,IAC5ByO,EAAK8G,mBAAmBtD,sBAAsB,CAACzO,IAC/C+D,EAAQyK,OAAOE,EAAO,GACtB8E,EAAMM,WAAW/P,GACjBkH,EAAK4I,mBAAmB9E,GACxB9D,EAAK8I,gBAAgBP,EAAMzJ,aAAa,WAOlD4H,EAAAjV,UAAA4W,uBAAA,WAAA,IAAArI,EAAAnO,KAEEA,KAAKgS,qBAAqB3O,SAAQ,SAAA6T,GAChC/I,EAAKrM,IAAIqV,YAAYD,MAGvBlX,KAAKgS,qBAAuB,GAC5BhS,KAAKiV,mBAAmBnD,kCACxB9R,KAAKiV,mBAAmB5F,QACxBrP,KAAKiV,mBAAmB5S,kBAG1BwS,EAAAjV,UAAAwX,YAAA,WAEE,OAAOpX,KAAKmV,gBAAgBvU,OAG9BiU,EAAAjV,UAAAyX,SAAA,SAASnU,GACPlD,KAAKiX,gBAAgB/T,GAAS,IAIhC2R,EAAAjV,UAAA0X,eAAA,SAAeC,GAAf,IAAApJ,EAAAnO,KACQiS,EAA+B,IAAIuF,EAAAA,aAEnCxP,EAAWhI,KAAKgV,WAAW3O,gBAC/BrG,KAAKyX,gBAAgBF,IAEvBhV,QAAQC,IAAIwF,GACZ,IAAM9E,EAAUlD,KAAK0X,WAAW1P,GAEhCiK,EAAa0F,SAASzU,GACtB,IAAM0U,EAAgB1U,EAAQiP,aAC9B5P,QAAQC,IAAI,YAAaoV,GACzBA,EAAcvU,SAAQ,SAAAH,GACpBA,EAAQG,SAAQ,SAACwU,EAAatY,GAClB,IAANA,EACF4O,EAAK2J,UAAUD,EAAa5F,IAE5B9D,EAAK4J,cAAcF,EAAa5F,GAChC1P,QAAQC,IAAI,SAAUqV,UAO5B7X,KAAKgS,qBAAqBrR,KAAKsR,GAC/BjS,KAAKiV,mBAAmBlD,gCACtB/R,KAAKgS,sBAEPhS,KAAKiV,mBAAmB3F,WACxBtP,KAAKiV,mBAAmBvE,eAIlBmE,EAAAjV,UAAA6X,gBAAR,SAAwBxQ,GACtB,IAAM+B,EAAS,GAEf,GADAzG,QAAQC,IAAIyE,EAAQvH,OAAQuH,GACxBA,EAAQvH,OAAS,GAAKuH,EAAQvH,OAAS,EAAG,CAC5C,IAAMiK,EAAc,GACpBpH,QAAQC,IACNwV,EAAAA,QAAUC,gBAAgBhR,EAAQA,EAAQvH,OAAS,IACnDuH,EAAQA,EAAQvH,OAAS,GAAGA,SAGxBwY,EAASlY,KAAKgV,WAAWlN,SAC7BkQ,EAAAA,QAAUC,gBAAgBhR,EAAQA,EAAQvH,OAAS,IACnDsY,EAAAA,QAAUC,gBAAgBhR,EAAQ,MAGlCA,EAAQ5D,SAAQ,SAAAH,GACdyG,EAAYhJ,KAAKqX,EAAAA,QAAUC,gBAAgB/U,OAG7C+D,EAAQ5D,SAAQ,SAAAH,GACd8F,EAAOrI,KAAK,CAACqX,EAAAA,QAAUC,gBAAgB/U,QAGvCyG,EAAYjK,QAAU,GACxBsJ,EAAOrI,KAAKgJ,GAEdpH,QAAQC,IAAI,WAAY0V,QACnB,GAAIjR,EAAQvH,OAAS,EAE1B,IADA,IAAMyY,EAAc,GACXvG,EAAQ,EAAGA,EAAQ3K,EAAQvH,OAAS,EAAGkS,IAAS,CACvD,IAAMsG,GAAAA,EAASlY,KAAKgV,WAAWlN,SAC7BkQ,EAAAA,QAAUC,gBAAgBhR,EAAQ2K,IAClCoG,EAAAA,QAAUC,gBAAgBhR,EAAQ,OAGlCA,EAAQ5D,SAAQ,SAAAH,GACdiV,EAAYxX,KAAKqX,EAAAA,QAAUC,gBAAgB/U,OAE7C8F,EAAOrI,KAAKwX,IAEZlR,EAAQ5D,SAAQ,SAAAH,GACd8F,EAAOrI,KAAK,CAACqX,EAAAA,QAAUC,gBAAgB/U,aAK7C8F,EAAOrI,KAAK,CAACqX,EAAAA,QAAUC,gBAAgBhR,EAAQ,MAGjD,OADA1E,QAAQC,IAAIwG,GACLA,GAID6L,EAAAjV,UAAAmW,aAAR,WAAA,IAAA5H,EAAAnO,KAGQoY,EAAyBpY,KAAK8B,IAAIuW,eAClCC,EAAWtY,KAAKoX,cAClBpX,KAAKyV,OAAO8C,eACdH,EAAUI,iBAAiB,cAAc,SAAAjY,GACnC+X,IAAatX,EAAAA,SAASoU,KACxBjH,EAAKsK,UAAUlY,MAInB6X,EAAUI,iBAAiB,YAAY,SAAAjY,GACjC+X,IAAatX,EAAAA,SAASoU,KACxBjH,EAAKuK,kBAITN,EAAUI,iBAAiB,aAAa,SAAAjY,GAClC+X,IAAatX,EAAAA,SAASoU,KACxBjH,EAAKwK,UAAUpY,OAKrBP,KAAK8B,IAAI6V,SAAS3X,KAAKuV,QACvBvV,KAAKuW,YAAYvV,EAAAA,SAASoU,MAGpBP,EAAAjV,UAAA6Y,UAAR,SAAkBG,GAGhB,GAFArW,QAAQC,IAAI,YAAaoW,GAEE,MAAvBA,EAAMC,cACR7Y,KAAKuV,OAAOyB,WAAW,CAAC4B,EAAMjC,aACzB,CACL,IAAMA,EAAS3W,KAAK8B,IAAIgX,uBAAuB,CAC7CF,EAAMG,QAAQ,GAAGC,QACjBJ,EAAMG,QAAQ,GAAGE,UAEnBjZ,KAAKuV,OAAOyB,WAAW,CAACL,IAE1B3W,KAAKkZ,aAICrE,EAAAjV,UAAA+Y,UAAR,SAAkBC,GAGhB,GAA2B,MAAvBA,EAAMC,cACR7Y,KAAKuV,OAAO4D,UAAUP,EAAMjC,YACvB,CACL,IAAMA,EAAS3W,KAAK8B,IAAIgX,uBAAuB,CAC7CF,EAAMG,QAAQ,GAAGC,QACjBJ,EAAMG,QAAQ,GAAGE,UAEnBjZ,KAAKuV,OAAO4D,UAAUxC,KAKlB9B,EAAAjV,UAAA8Y,aAAR,WAEE1Y,KAAKiV,mBAAmBnD,kCAExB,IAAMsH,EAEFpZ,KAAKgV,WAAWvP,eAAezF,KAAKuV,OAAOtI,aAE/C,OADAjN,KAAKqZ,WACGrZ,KAAKoX,eACX,KAAKpW,EAAAA,SAASsY,IACZtZ,KAAKuZ,WAAWH,GAAQ,GACxB,MACF,KAAKpY,EAAAA,SAASwY,SACZxZ,KAAKyZ,gBAAgBL,GAMzBpZ,KAAKiV,mBAAmBlD,gCACtB/R,KAAKgS,uBAKD6C,EAAAjV,UAAAsZ,UAAR,WAGElZ,KAAK0Z,mBAAkB,IAGjB7E,EAAAjV,UAAAyZ,SAAR,WAGErZ,KAAK2Z,eACL3Z,KAAK0Z,mBAAkB,IAGjB7E,EAAAjV,UAAAsW,aAAR,SAAqB0D,GAGfA,GAAa5Z,KAAKsV,yBACpBtV,KAAKiV,mBAAmB9D,kBAAkB/B,gBAAiB,GAE3DpP,KAAKiV,mBAAmB9D,kBAAkB/B,gBAAiB,EAC3DpP,KAAKiV,mBAAmBvE,eAE1B1Q,KAAKiV,mBAAmBzD,oBAGlBqD,EAAAjV,UAAA8Z,kBAAR,SAA0BG,GAGxB,IAAMC,EAAUD,EAAQ,KAAO,MAE/B7Z,KAAK8B,IAAIgY,GAAS,YAAa9Z,KAAK2Y,UAAW3Y,MAC/CA,KAAK8B,IAAIgY,GAAS,UAAW9Z,KAAK0Y,aAAc1Y,OAG1C6U,EAAAjV,UAAA6Z,gBAAR,SAAwBxS,GACtBjH,KAAK+Z,SAAS9S,IAGR4N,EAAAjV,UAAA2Z,WAAR,SACEtS,EACA+S,EACAC,QAAA,IAAAA,IAAAA,GAAA,GAEA1X,QAAQC,IACN,aACAyE,EACA+S,EACAC,EACAja,KAAKqW,MACLrW,KAAKyV,QAILzV,KAAKoW,gBACJ6D,GACDja,KAAKgS,qBAAqBtS,OAAS,IAClCM,KAAKqW,MAENrW,KAAKka,MAAMjT,GAEXjH,KAAKiX,gBAAgBhQ,EAAS+S,IAI1BnF,EAAAjV,UAAAqX,gBAAR,SACEhQ,EACA+S,GAFF,IAAA7L,EAAAnO,KAIQiS,EAA+B,IAAIuF,EAAAA,aAEnC7C,EAAUqF,EAAWha,KAAKgV,WAAW9O,cAAce,GAAWA,EACpE1E,QAAQC,IAAI,oBAAqBmS,GACjC,IAAMzR,EAAUlD,KAAK0X,WAAW/C,GAChC1C,EAAa0F,SAASzU,GACtBX,QAAQC,IAAIU,GACUA,EAAQiP,aAChB9O,SAAQ,SAAAH,GACpBA,EAAQG,SAAQ,SAACwU,EAAwBtY,GAC7B,IAANA,EACF4O,EAAK2J,UAAUD,EAAa5F,IAE5B9D,EAAK4J,cAAcF,EAAa5F,GAChC1P,QAAQC,IAAI,SAAUqV,UAO5B7X,KAAKgS,qBAAqBrR,KAAKsR,GAC/B1P,QAAQC,IAAI,UAAWxC,KAAKgS,sBAC5BhS,KAAKiV,mBAAmB3F,WACxBtP,KAAKuW,YAAYvV,EAAAA,SAASoU,KAE1BnD,EAAakI,GAAG,SAAS,SAAA5Z,GACvB4N,EAAKiM,eAAe7Z,EAAGoU,OAInBE,EAAAjV,UAAAwa,eAAR,SAAuB7Z,EAAQ2G,GAC7B,IAAMmT,EAAW9Z,EAAEoW,OACnB,GAA2B,iBAAvBzP,EAAKnB,SAASK,KAAyB,CACzC,IAAM2C,EAAa/I,KAAKgV,WAAWnM,qBAAqB3B,EAAM,CAC5DmT,EAAS5W,IACT4W,EAAS7W,MAEXxD,KAAKyW,cAAczW,KAAKsa,mBAAmBpT,IAC3ClH,KAAKiX,gBAAgBlO,GAAY,KAI7B8L,EAAAjV,UAAA8X,WAAR,SAAmBzQ,GACjB1E,QAAQC,IAAI,gBAAiByE,GAC7B,IAAM/D,EAAU8U,EAAAA,QAAUuC,gBAAgBtT,GAG1C,OADA/D,EAAQsX,SAASxa,KAAKyV,OAAOgF,gBACtBvX,GAGD2R,EAAAjV,UAAAsa,MAAR,SAAcjT,GAAd,IAAAkH,EAAAnO,KACEuC,QAAQC,IAAI,QAASyE,GACrB,IAAMyT,EAAiB,GACjBC,EAA6B,GAEnC3a,KAAKgS,qBAAqB3O,SAAQ,SAAA4O,GAChC,IAAM2I,EAAoB3I,EAAahF,YAEvC,GADA1K,QAAQC,IAAI,WAAYoY,EAAkB/U,SAAS,IAC/C+U,EAAkB/U,SAAS,GAAGE,SAASJ,YAAYjG,OAAS,EAC9Dkb,EAAkB/U,SAAS,GAAGE,SAASJ,YAAYtC,SAAQ,SAAA8D,GACzD,IAAMzB,EAAUyI,EAAK6G,WAAW3O,gBAAgB,CAACc,IAC9BgH,EAAK6G,WAAWhO,iBAAiBtB,EAASuB,KAE3D0T,EAASha,KAAKsR,GACdyI,EAAe/Z,KAAK+E,WAGnB,CACL,IAAMA,EAAUyI,EAAK6G,WAAWxP,eAC9BoV,EAAkB/U,SAAS,IAEVsI,EAAK6G,WAAWhO,iBAAiBtB,EAASuB,KAE3D0T,EAASha,KAAKsR,GACdyI,EAAe/Z,KAAK+E,QAI1BnD,QAAQC,IAAImY,GACRA,EAASjb,OAAS,EACpBM,KAAK6a,cAAcF,EAAU1T,EAASyT,GAEtC1a,KAAKiX,gBAAgBhQ,GAAS,IAI1B4N,EAAAjV,UAAAma,SAAR,SAAiB9S,GAAjB,IAAAkH,EAAAnO,KACM8a,EAAU7T,EACdjH,KAAKgS,qBAAqB3O,SAAQ,SAAA4O,GAChC,IAAM2I,EAAoB3I,EAAahF,YACjCyJ,EAAQkE,EAAkB/U,SAAS,GACnCqB,EAAOiH,EAAKmM,mBAAmB5D,GAC/BhR,EAAUyI,EAAK6G,WAAWxP,eAC9BoV,EAAkB/U,SAAS,IAEvBkD,EAAaoF,EAAK6G,WAAWlL,kBAAkBpE,EAASoV,GAC9D3M,EAAKsI,cAAcvP,GACnBiH,EAAK4M,0BAA0B9I,GAC/B6I,EAAU/R,KAGZ,IAAMiS,EAA8CF,EACrC9a,KAAKgV,WAAWpO,UAAUoU,GAClC3X,SAAQ,SAAAzC,GACbuN,EAAK8I,gBAAgB9I,EAAK6G,WAAW3O,gBAAgB,CAACzF,KAAS,OAI3DiU,EAAAjV,UAAAqb,OAAR,SAAepB,GACb,IAAMC,EAAUD,EAAQ,KAAO,MAC/B7Z,KAAK8B,IAAIgY,GAAS,YAAa9Z,KAAKyY,UAAWzY,OAGzC6U,EAAAjV,UAAAkY,UAAR,SAAkB7Q,EAAoBiU,GAAtC,IAAA/M,EAAAnO,KACQmb,EAAgBnb,KAAKob,eACzBnU,EACAjH,KAAKyV,OAAO4F,QAAQC,eAAeC,UAE/BC,EAAkBxb,KAAKob,eAC3BnU,EACAjH,KAAKyV,OAAO4F,QAAQI,iBAAiBF,UAGvCtU,EAAQ5D,SAAQ,SAACsT,EAAQpX,GACvB,IAAImc,EAAcvN,EAAKsH,OAAO4F,QAAQM,WAAWC,aAC7Crc,IAAM4b,GAAiBhN,EAAKsH,OAAO4F,QAAQQ,OAC7CH,EAAcvN,EAAKsH,OAAO4F,QAAQC,eAAeM,cAE/Crc,IAAMic,GAAmBrN,EAAKsH,OAAO4F,QAAQS,SAC/CJ,EAAcvN,EAAKsH,OAAO4F,QAAQI,iBAAiBG,cAErD,IAAMG,EAAS,IAAIC,EAAAA,OAASrF,EAAQ,CAClCsF,KAAM9N,EAAK+N,cAAcR,GACzBS,WAAW,EACXC,MAAO7c,EAAEgS,aAEX2J,EAAavD,SAASoE,GAAQM,MAAMlO,EAAKrM,KAEzCia,EAAO5B,GAAG,QAAQ,SAAA5Z,GAChB4N,EAAKmO,WAAWpB,MAElBa,EAAO5B,GAAG,WAAW,SAAA5Z,GACnB4N,EAAKoO,cAAcrB,MAEjB3b,IAAM4b,GAAiBhN,EAAKsH,OAAO4F,QAAQQ,MAM7CE,EAAO5B,GAAG,SAAS,SAAA5Z,GACjB4N,EAAKqO,uBAAuBvV,GAAS,MAIrC1H,IAAMic,GAAmBrN,EAAKsH,OAAO4F,QAAQS,QAC/CC,EAAO5B,GAAG,SAAS,SAAA5Z,GACjB4N,EAAKsI,cAAc,CAACxP,WAMpB4N,EAAAjV,UAAAmY,cAAR,SAAsB9Q,EAAoBiU,GAA1C,IAAA/M,EAAAnO,KACEiH,EAAQ5D,SAAQ,SAACsT,EAAQpX,GACvB,IAAMmc,EAAcvN,EAAKsH,OAAO4F,QAAQM,WAAWC,aAS7CG,EAAS,IAAIC,EAAAA,OAASrF,EAAQ,CAClCsF,KAAM9N,EAAK+N,cAAcR,GACzBS,WAAW,EACXC,MAAO7c,EAAEgS,aAEX2J,EAAavD,SAASoE,GAAQM,MAAMlO,EAAKrM,KAEzCia,EAAO5B,GAAG,QAAQ,SAAA5Z,GAChB4N,EAAKmO,WAAWpB,MAElBa,EAAO5B,GAAG,WAAW,SAAA5Z,GACnB4N,EAAKoO,cAAcrB,UAiBjBrG,EAAAjV,UAAAsc,cAAR,SAAsBO,GACpB,IAAMC,EAAUD,EAAWE,KAAK,KAEhC,OADaC,EAAAA,QAAU,CAAE9M,UAAW4M,KAI9B7H,EAAAjV,UAAA0c,WAAR,SAAmBpB,GACjB,IAAM2B,EAAS,GACXC,EAAY,GACZC,EAAO,GACLC,EAAc9B,EAAahJ,YAC3B+K,EAAYD,EAAY,GAAG7K,aACjC5P,QAAQC,IAAIya,GACZ1a,QAAQC,IAAI,eAAgBwa,GAC5B,IAAItd,EAAS,EACb,GAAIud,EAAUvd,OAAS,EACrB,IAAK,IAAIkS,EAAQ,EAAGA,EAAQqL,EAAUvd,OAAQkS,IAI5C,GAHAkL,EAAY,GACZC,EAAO,GACPxa,QAAQC,IAAI,eAAgBya,EAAUrL,IACxB,IAAVA,EAAa,CACf,GAAIqL,EAAU,GAAGvd,OAAS,EACxB,IAAK,IAAIH,EAAI,EAAGqS,EAAQqL,EAAU,GAAGvd,OAAQH,IAAK,CAChDgD,QAAQC,IAAI,iBAAkBya,EAAUrL,GAAOrS,IAE/C,IAAK,IAAIgI,EAAI,EAAGA,EAAI0V,EAAU,GAAG1d,GAAGG,OAAQ6H,IAC1CuV,EAAUnc,KAAKqc,EAAYzV,EAAI,GAAG2V,aAEpCH,EAAKpc,KAAKmc,OAEP,CACL,IAASvV,EAAI,EAAGA,EAAI0V,EAAU,GAAG,GAAGvd,OAAQ6H,IAC1CuV,EAAUnc,KAAKqc,EAAYzV,EAAI,GAAG2V,aAEpCH,EAAKpc,KAAKmc,GAEZva,QAAQC,IAAI,SAAUua,GACtBF,EAAOlc,KAAKoc,OACP,CACLrd,GAAUud,EAAUrL,EAAQ,GAAG,GAAGlS,OAClC6C,QAAQC,IAAI,gBAAiB9C,GAC7B,IAAS6H,EAAI7H,EAAQ6H,EAAI0V,EAAUrL,GAAO,GAAGlS,OAASA,EAAQ6H,IAC5DuV,EAAUnc,KAAMqc,EAAYzV,EAAI,GAAW2V,aAE7CH,EAAKpc,KAAKmc,GACVD,EAAOlc,KAAKoc,OAGX,CAELA,EAAO,GACP,IAAII,EAAU,EACd,IAASvL,EAAQ,EAAGA,EAAQqL,EAAU,GAAGvd,OAAQkS,IAAS,CAGxD,GAFAkL,EAAY,GACZva,QAAQC,IAAI,iBAAkBya,EAAU,GAAGrL,IAC7B,IAAVA,EACF,GAAIqL,EAAU,GAAGrL,GAAOlS,OAAS,EAC/B,IAAS6H,EAAI,EAAGA,EAAI0V,EAAU,GAAGrL,GAAOlS,OAAQ6H,IAC9CuV,EAAUnc,KAAKqc,EAAYzV,EAAI,GAAG2V,kBAGpC,IAAS3V,EAAI,EAAGA,EAAI0V,EAAU,GAAG,GAAGvd,OAAQ6H,IAC1CuV,EAAUnc,KAAKqc,EAAYzV,EAAI,GAAG2V,kBAMtC,IAAS3V,EAFT4V,GAAWF,EAAU,GAAGrL,EAAQ,GAAGlS,OAEb6H,EAAI0V,EAAU,GAAGrL,GAAOlS,OAASyd,EAAS5V,IAC9DuV,EAAUnc,KAAKqc,EAAYzV,EAAI,GAAG2V,aAGtCH,EAAKpc,KAAKmc,GAEZD,EAAOlc,KAAKoc,GACZxa,QAAQC,IAAI,WAAYua,GAE1Bxa,QAAQC,IAAI,mBAAoBqa,GAChCG,EAAY,GAAGhG,WAAW6F,IAGpBhI,EAAAjV,UAAA2c,cAAR,SAAsBrB,GAAtB,IAAA/M,EAAAnO,KACEA,KAAKiV,mBAAmBnD,kCACxB,IAAM8I,EAAoBM,EAAajO,YAKvC,GAJA1K,QAAQC,IACN,0BACAoY,EAAkB/U,SAAS,GAAGE,SAASJ,aAErCiV,EAAkB/U,SAAS,GAAGE,SAASJ,YAAYjG,OAAS,EAC9Dkb,EAAkB/U,SAAS,GAAGE,SAASJ,YAAYtC,SAAQ,SAAA8D,GACzD,IAAMzB,EAAUyI,EAAK6G,WAAW3O,gBAAgB,CAACc,IAGjD,GADA5E,QAAQC,IAAI,kBAAmBkD,GAC3ByI,EAAK6G,WAAWlO,SAASpB,GAAU,CACrCyI,EAAKkI,OAAQ,EACb,IAAM7P,EAAS2H,EAAK6G,WAAWzO,SAASb,GAExCyI,EAAK4I,mBAAmBmE,GACxB3Y,QAAQC,IAAI,WAAYgE,GACxBA,EAAOnD,SAAQ,SAAAH,GACbiL,EAAKoL,WACHpL,EAAK6G,WAAWxP,eAAetC,IAC/B,GACA,WAIJiL,EAAKkI,OAAQ,EACblI,EAAKoL,WAAW7T,GAAS,UAGxB,CACL,IAAMA,EAAU1F,KAAKgV,WAAW3O,gBAC9BuU,EAAkB/U,SAAS,GAAGE,SAASJ,aAGzC,GADApD,QAAQC,IAAI,kBAAmBkD,GAC3B1F,KAAKgV,WAAWlO,SAASpB,GAAU,CACrC1F,KAAKqW,OAAQ,EACb,IAAM7P,EAASxG,KAAKgV,WAAWzO,SAASb,GAExC1F,KAAK+W,mBAAmBmE,GACxB3Y,QAAQC,IAAI,WAAYgE,GACxBA,EAAOnD,SAAQ,SAAAH,GACbiL,EAAKoL,WAAWpL,EAAK6G,WAAWxP,eAAetC,IAAU,GAAO,WAIlElD,KAAKqW,OAAQ,EACbrW,KAAKuZ,WAAW7T,GAAS,GAG7B1F,KAAKiV,mBAAmBlD,gCACtB/R,KAAKgS,uBAID6C,EAAAjV,UAAA0a,mBAAR,SACE5U,GAGA,IAAI4E,EAiBJ,OAlBA/H,QAAQC,IAAI,uBAAwBkD,GAEhCA,IAKA4E,EAHA5E,EAAQK,SAASJ,YAAYjG,OAAS,GACZ,iBAA1BgG,EAAQK,SAASK,KAET4R,EAAAA,QAAUoF,gBAAgB1X,EAAQK,SAASJ,YAAY,GAAG,IAElED,EAAQK,SAASJ,YAAY,GAAGjG,OAAS,GACf,YAA1BgG,EAAQK,SAASK,KAET4R,EAAAA,QAAUoF,gBAAgB1X,EAAQK,SAASJ,YAAY,IAEvDqS,EAAAA,QAAUoF,gBAAgB1X,EAAQK,SAASJ,YAAY,GAAG,KAI/D2E,GAIDuK,EAAAjV,UAAAib,cAAR,SACEwC,EACApW,EACAyT,GAHF,IAAAvM,EAAAnO,KAKEuC,QAAQC,IAAI,gBAAiB6a,EAAQpW,EAASyT,GAE9C,IAAI4C,EAASrW,EACboW,EAAOha,SAAQ,SAAC4O,EAAc1S,GAC5B,IACMmX,EADoBzE,EAAahF,YACPpH,SAAS,GACnCqB,EAAOiH,EAAKmM,mBAAmB5D,GAC/BtR,EAAQ+I,EAAK6G,WAAW5P,MAAMkY,EAAQ5C,EAAenb,IAE3D4O,EAAKoP,qBAAqBrW,GAC1BiH,EAAK4I,mBAAmB9E,GAExBqL,EAASlY,KAGX,IAAM4V,EAA8CsC,EACpDtd,KAAKiX,gBAAgB+D,GAAY,IAG3BnG,EAAAjV,UAAAmX,mBAAR,SAA2B9E,GACzB1P,QAAQC,IAAI,qBAAsByP,GAElCA,EAAauL,cACbxd,KAAKgS,qBAAuBhS,KAAKgS,qBAAqBxE,QACpD,SAAA0J,GAAiB,OAAAA,IAAkBjF,KAGrCjS,KAAK8B,IAAIqV,YAAYlF,IAGf4C,EAAAjV,UAAAmb,0BAAR,SAAkC9I,GAChC1P,QAAQC,IAAI,4BAA6ByP,GAEzC,IAAM0I,EAAW,GACjB,GAAI1I,EAAaC,YAAY,GAAI,CAC/B,IAAMuL,EAAWxL,EAAaC,YAAY,GAAWC,aAAa,GAClEnS,KAAKiV,mBAAmB7D,0BAA0B/N,SAAQ,SAAA+H,GAEtDA,EAAElI,QAAQqO,aAAekM,EAAQ,GAAGlM,YACpCnG,EAAElI,QAAQ,GAAGqO,aAAekM,EAAQ,GAAG,GAAGlM,aAE1CnG,EAAElI,QAAUua,EACZ9C,EAASha,KAAKyK,IAIdA,EAAElI,QAAQqO,aAAekM,EAAQ,GAAGlM,YACpCnG,EAAElI,QAAQ,GAAGqO,aAAekM,EAAQ,GAAG,GAAGlM,YAE1CoJ,EAASha,KAAKyK,MAGlB6G,EAAauL,cACbxd,KAAKgS,qBAAuBhS,KAAKgS,qBAAqBxE,QACpD,SAAA0J,GAAiB,OAAAA,IAAkBjF,KAGrCjS,KAAK8B,IAAIqV,YAAYlF,KAIjB4C,EAAAjV,UAAA2d,qBAAR,SAA6Bra,GAA7B,IAAAiL,EAAAnO,KACEuC,QAAQC,IAAI,uBAAwBU,GACpC,IAAI8E,EAAW,GACXhI,KAAKgS,qBAAqBtS,OAAS,GACrCM,KAAKgS,qBAAqB3O,SAAQ,SAAA4O,GAChC,IACMhL,EADQgL,EAAaC,YAAY,GACjBC,aAAa,GACnCnK,EAAQlH,EAAOmG,EAAQ,IACnBA,EAAQ,GAAG,KAAOA,EAAQ,GAAGA,EAAQ,GAAGvH,OAAS,IACnDsI,EAASrH,KAAKsG,EAAQ,GAAG,IAEZkH,EAAKuP,wBAAwB1V,EAAU9E,KAGpDX,QAAQC,IAAI,SAAUU,GACtBiL,EAAK4M,0BAA0B9I,GAC/B9D,EAAKsI,cAAcvT,GACnBiL,EAAK8G,mBAAmBxD,eAAevO,QAQvC2R,EAAAjV,UAAA8d,wBAAR,SAAgCrY,EAAcC,GAC5C,OAAOD,EAAMkM,aAAejM,EAAMiM,YAG5BsD,EAAAjV,UAAAkX,mBAAR,SAA2BzR,EAAcC,GAGvC,GAAID,EAAM,GAAG,IACX,IAAKA,EAAM,GAAG,GAAGwR,OAAOvR,EAAM,GAAG,IAC/B,OAAO,OAGT,IAAKD,EAAM,GAAGwR,OAAOvR,EAAM,IACzB,OAAO,EAGX,OAAID,EAAM3F,SAAW4F,EAAM5F,QAOrBmV,EAAAjV,UAAA+d,oBAAR,SACEC,EACAC,EACAC,GAIAF,EAAiB5d,KAAK8B,IAAIic,SAASC,SAAWhe,KAAK8B,IAAIic,SAASE,UAChEJ,EACI7d,KAAK8B,IAAIoc,gBAAgBF,SACzBhe,KAAK8B,IAAIoc,gBAAgBD,UAC7BH,EACI9d,KAAK8B,IAAIqc,gBAAgBH,SACzBhe,KAAK8B,IAAIqc,gBAAgBF,WAG/BpJ,EAAAjV,UAAA2W,YAAA,SAAY6H,GAGV,GAFA7b,QAAQC,IAAI,cAAexC,KAAK8B,KAChC9B,KAAKmV,gBAAgB1U,KAAK2d,GACpBpe,KAAK8B,IAAK,CACd,IAAIuc,GAAmB,EACvB,OAAQD,GACN,KAAKpd,EAAAA,SAASoU,IACZkJ,EAAAA,QAAUjO,YACRrQ,KAAK8B,IAAIuW,eACT,4BAEFrY,KAAKib,QAAO,GACZjb,KAAKqZ,WACLrZ,KAAKuV,OAAOiF,SAAS,CACnB+D,MAAO,KAETve,KAAK2d,qBAAoB,GAAM,GAAM,GACrCU,GAAmB,EACnB,MACF,KAAKrd,EAAAA,SAASsY,IACZgF,EAAAA,QAAU7N,SACRzQ,KAAK8B,IAAIuW,eACT,4BAEFrY,KAAKib,QAAO,GACZjb,KAAKuV,OAAOiF,SAAS,CACnB+D,MAAO5I,EAAcG,gBAAgByI,QAEvCve,KAAK2d,qBAAoB,GAAO,GAAO,GACvC,MACF,KAAK3c,EAAAA,SAASwY,SACZ8E,EAAAA,QAAU7N,SACRzQ,KAAK8B,IAAIuW,eACT,4BAEFrY,KAAKib,QAAO,GACZjb,KAAKuV,OAAOiF,SAAS,CACnB+D,MAAO,YAETve,KAAK2d,qBAAoB,GAAO,GAAO,GAIvCU,EACFre,KAAKiV,mBAAmB1E,kBAExBvQ,KAAKiV,mBAAmBvE,gBAK9BmE,EAAAjV,UAAA4e,WAAA,SAAWJ,GACTpe,KAAKuW,YAAY6H,GACjBpe,KAAKiV,mBAAmBzD,oBAG1BqD,EAAAjV,UAAA6e,cAAA,WACMze,KAAKiV,mBAAmB9D,kBAAkBvB,gBAC5C5P,KAAKiV,mBAAmBvE,cACxB1Q,KAAKuW,YAAYvV,EAAAA,SAASoU,OAE1BpV,KAAKiV,mBAAmB1E,kBACxBvQ,KAAKuW,YAAYvV,EAAAA,SAASsY,MAE5BtZ,KAAKiV,mBAAmBzD,oBAG1BqD,EAAAjV,UAAA8e,kBAAA,WACE1e,KAAKuW,YAAYvV,EAAAA,SAASsY,KAC1BtZ,KAAKiV,mBAAmB3F,WACxBtP,KAAKiV,mBAAmBzD,oBAI1BqD,EAAAjV,UAAA+e,cAAA,WACE3e,KAAKuW,YAAYvV,EAAAA,SAASwY,UAC1BxZ,KAAKiV,mBAAmBzD,oBAGlBqD,EAAAjV,UAAA+Z,aAAR,WACE3Z,KAAKuV,OAAOyB,WAAW,CAAC,CAAC,EAAG,MAG9BnC,EAAAjV,UAAAgf,iBAAA,WACEC,MAAM,cAEAhK,EAAAjV,UAAAkf,eAAR,SAAuBC,GACrB,IAAMC,EAAOhf,KAAK+U,eAAed,qBASjC,OARA+K,EAAKC,SAASxM,YAAYiD,WAAU,SAAAnV,GAClCgC,QAAQC,IAAI,eAAgBjC,GAC5Bwe,EAASxe,MAEXye,EAAKC,SAAS1M,gBAAgBmD,WAAU,SAAAnV,GACtCgC,QAAQC,IAAI,mBAAoBjC,GAChCwe,EAASxe,MAEJye,EAAKE,SAASC,eAEftK,EAAAjV,UAAA4c,uBAAR,SACEvV,EACAqB,QAAA,IAAAA,IAAAA,GAAA,GAEAtI,KAAKyW,cAAc,CAACxP,IACpB,IAAM/D,EAAUlD,KAAKgV,WAAW3O,gBAC9BrG,KAAKyX,gBAAgB,CAACxQ,KAElB8B,EAAa/I,KAAKgV,WAAW3M,4BACjCnF,EACAoF,GAGFtI,KAAKiX,gBAAgBjX,KAAKgV,WAAWxP,eAAeuD,IAAa,IAE3D8L,EAAAjV,UAAAwf,2BAAR,SAAmCnY,GACjCjH,KAAKyW,cAAc,CAACxP,IACpB,IAAM8B,EAAa/I,KAAKgV,WAAW3O,gBACjCrG,KAAKyX,gBAAgB,CAACxQ,KAExBjH,KAAKiX,gBAAgBjX,KAAKgV,WAAWxP,eAAeuD,IAAa,IAE3D8L,EAAAjV,UAAAwb,eAAR,SAAuBnU,EAAoBsU,GACzC,IAAMxY,EAAyBC,EAAaC,UAC1CgE,EACAyE,KAAKW,KAAK,GAAK,GAQXgT,EANU,IAAIzb,EAClBb,EAAO4J,WACP5J,EAAO6J,UACP7J,EAAO2J,WACP3J,EAAO8J,WAEwBnI,aAAa6W,GACxC+D,EAAuB,CAC3B9b,IAAK6b,EAAiB7b,IACtBC,IAAK4b,EAAiB5b,KAElBsH,EAAc/K,KAAKgV,WAAWzK,SAAS+U,GACvCC,EAAKvf,KAAKgV,WAAW9J,0BAA0BjE,GAMrD,OALwBjH,KAAKgV,WAAWlK,qBACtCC,EACAwU,qCAr/BO1K,GAAexC,EAAA,YAAAnR,GAAAmR,EAAA,YAAAsB,GAAAtB,EAAA,YAAArN,GAAAqN,EAAA,YAAAzB,GAAAyB,EAAA,YAAAoC,4CAAfI,EAAelS,QAAfkS,EAAejS,KAAAC,WAHd,2BCdd,SAAA2c,+CAKaA,oEAAAA,IAAWC,QAAA,CAHb,+EAGED,EAAW,CAAAE,aAAA,CAJNpN","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolyStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n    \r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n    private mapStateSubject = new BehaviorSubject<MapStateModel>(new MapStateModel());\r\n    mapState$: Observable<MapStateModel> = this.mapStateSubject.asObservable();\r\n    mapZoomLevel$: Observable<number>  = this.mapState$.pipe(map((state: MapStateModel) => state.mapBoundState.zoom));\r\n\r\n    private updateMapStates(newState: any): void {\r\n        let state = this.mapStateSubject.value;\r\n        state = { ...state, ...newState };\r\n\r\n        this.mapStateSubject.next(state);\r\n    }\r\n\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n        this.polygonSubject.next(polygons)\r\n    }\r\n    updateMapBounds(mapBounds: MapBoundsState) {\r\n        this.updateMapStates({ mapBoundState: mapBounds });\r\n    }\r\n}\r\n\r\nclass MapStateModel {\r\n    constructor(\r\n      \r\n        public mapBoundState: MapBoundsState = new MapBoundsState(null, 11)) { }\r\n}\r\nclass MapBoundsState {\r\n    constructor(\r\n        public bounds: L.LatLngBounds,\r\n        public zoom: number) { }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log('poly1: ', poly1);\r\n    console.log('poly2: ', poly2);\r\n\r\n    let union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    let points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log('Get TurfPolygon:', polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    let coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    let poly = [];\r\n    let poly2 = [];\r\n\r\n    console.log('polygonIntersect', polygon, latlngs);\r\n\r\n    let latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    let polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      let feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log('Ytre: ', polygon2);\r\n    return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));\r\n  }\r\n\r\n  equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>, addMidpointMarkers: boolean = false): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    let coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log('polygon: ', polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log('test', test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      let pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        let polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log('coordinates', coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(polygon, MarkerPosition: ICompass, useOffset, offsetDirection) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number {\r\n    let index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from './polygon.util';\r\n\r\nexport class PolygonInfo {\r\n  polygon: ILatLng[][][] = [];\r\n  trashcanPoint: ILatLng[] = [];\r\n  sqmArea: number[] = [];\r\n  perimeter: number[] = [];\r\n  constructor(polygon) {\r\n    console.log('PolygonInfo: ', polygon);\r\n    polygon.forEach((polygons, i) => {\r\n      this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n      this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n      this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n      console.log(polygons[0]);\r\n      this.polygon[i] = polygons;\r\n    });\r\n  }\r\n  setSqmArea(area: number): void {\r\n    this.sqmArea[0] = area;\r\n  }\r\n  private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n    const res = Math.max.apply(\r\n      Math,\r\n      polygon.map(o => o.lat)\r\n    );\r\n    const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n    let previousPoint: ILatLng;\r\n    let nextPoint: ILatLng;\r\n\r\n    if (idx > 0) {\r\n      previousPoint = polygon[idx - 1];\r\n      if (idx < polygon.length - 1) {\r\n        nextPoint = polygon[idx + 1];\r\n      } else {\r\n        nextPoint = polygon[0];\r\n      }\r\n    } else {\r\n      previousPoint = polygon[polygon.length - 1];\r\n      nextPoint = polygon[idx + 1];\r\n    }\r\n\r\n    const secondPoint =\r\n      previousPoint.lng < nextPoint.lng ? previousPoint : nextPoint;\r\n\r\n    const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n    return midpoint;\r\n  }\r\n  private calculatePolygonArea(polygon: ILatLng[]): number {\r\n    const area = PolygonUtil.getSqmArea(polygon as any);\r\n    return area;\r\n  }\r\n  private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n    const perimeter = PolygonUtil.getPerimeter(polygon as any);\r\n    return perimeter;\r\n  }\r\n}\r\nconst addClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.add(className);\r\n  }\r\n};\r\n\r\nconst removeClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.remove(className);\r\n  }\r\n};\r\n\r\nexport class PolygonDrawStates {\r\n  isActivated: boolean;\r\n  isFreeDrawMode: boolean;\r\n  isMoveMode: boolean;\r\n  canRevert: boolean;\r\n  isAuto: boolean;\r\n  hasPolygons: boolean;\r\n  canUsePolyDraw: boolean;\r\n\r\n  constructor() {\r\n    this.canUsePolyDraw = false;\r\n    this.reset();\r\n  }\r\n\r\n  activate(): void {\r\n    this.reset();\r\n    this.isActivated = true;\r\n  }\r\n\r\n  reset(): void {\r\n    this.isActivated = false;\r\n    this.hasPolygons = false;\r\n    this.canRevert = false;\r\n    this.isAuto = false;\r\n\r\n    this.resetDrawModes();\r\n  }\r\n\r\n  resetDrawModes(): void {\r\n    this.isFreeDrawMode = false;\r\n    removeClass('img.leaflet-tile', 'disable-events');\r\n    this.isMoveMode = false;\r\n  }\r\n\r\n  setFreeDrawMode(isAuto: boolean = false): void {\r\n    if (isAuto) {\r\n      this.isActivated = true;\r\n    }\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isFreeDrawMode = true;\r\n      addClass('img.leaflet-tile', 'disable-events');\r\n      if (isAuto) {\r\n        this.isAuto = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  setMoveMode(): void {\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isMoveMode = true;\r\n    }\r\n  }\r\n\r\n  forceCanUseFreeDraw(): void {\r\n    this.canUsePolyDraw = true;\r\n  }\r\n}\r\n\r\nexport interface ILatLng {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyDrawService } from \"./polydraw.service\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\r\n    PolygonInfo[]\r\n  >();\r\n  polygonInformation$: Observable<\r\n    PolygonInfo[]\r\n  > = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\r\n    PolygonDrawStates\r\n  >();\r\n  polygonDrawStates$: Observable<\r\n    PolygonDrawStates\r\n  > = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonDrawStates: PolygonDrawStates = null;\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: PolyStateService) {\r\n    this.polygonDrawStates = new PolygonDrawStates();\r\n  }\r\n\r\n  updatePolygons() {\r\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n\r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = [];\r\n        v.polygon.forEach(poly => {\r\n          let test2 = [];\r\n\r\n          poly.forEach(polygon => {\r\n            test2 = [...polygon];\r\n            if (\r\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\r\n            ) {\r\n              test2.push(polygon[0]);\r\n            }\r\n            test.push(test2);\r\n          });\r\n        });\r\n\r\n        newPolygons.push(test);\r\n      });\r\n\r\n      this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      this.polygonDrawStates.reset();\r\n      this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\r\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(\r\n      v => v.polygon[0] === polygon\r\n    );\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log(\"DeleteTrashCan: \", polygon);\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(\r\n        poly => poly.toString() === polygon.toString()\r\n      );\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log(\"ID: \", id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log(\"Index: \", index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(\r\n          featureGroup.getLayers()[0].getLatLngs()\r\n        );\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n\r\n  activate() {\r\n    this.polygonDrawStates.activate();\r\n  }\r\n  reset() {\r\n    this.polygonDrawStates.reset();\r\n  }\r\n\r\n  setMoveMode() {\r\n    this.polygonDrawStates.setMoveMode();\r\n  }\r\n\r\n  setFreeDrawMode() {\r\n    this.polygonDrawStates.setFreeDrawMode();\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","<div class=\"marker-menu-inner-wrapper\">\r\n  <div class=\"marker-menu-header\">Alter polygon</div>\r\n  <div class=\"marker-menu-content\">\r\n    <div class=\"marker-menu-button simplify\" (click)=\"onSimplify($event)\">Simplify</div>\r\n    <div class=\"marker-menu-separator\"></div>\r\n    <div class=\"marker-menu-button bbox\" (click)=\"onBbox($event)\" >bbox</div>\r\n  </div>\r\n</div>","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from \"rxjs\";\r\nimport { filter, debounceTime, takeUntil } from \"rxjs/operators\";\r\nimport { Feature, Polygon, MultiPolygon } from \"@turf/turf\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\nimport { TurfHelperService } from \"./turf-helper.service\";\r\nimport { PolygonInformationService } from \"./polygon-information.service\";\r\nimport defaultConfig from \"./polyinfo.json\";\r\nimport { ILatLng, PolygonDrawStates } from \"./polygon-helpers\";\r\nimport { ComponentGeneraterService } from \"./component-generater.service\";\r\nimport { Compass, PolyDrawUtil } from \"./utils\";\r\nimport { MarkerPosition, DrawMode } from \"./enums\";\r\nimport { LeafletHelperService } from \"./leaflet-helper.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private readonly minimumFreeDrawZoomLevel: number = 12;\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: PolyStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log(\"pre this.config\", this.config);\r\n      this.config = defaultConfig;\r\n      console.log(\"this.config\", this.config);\r\n      this.configurate({});\r\n      console.log(\"after this.config\", this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.mapState.mapZoomLevel$\r\n      .pipe(debounceTime(100), takeUntil(this.ngUnsubscribe))\r\n      .subscribe((zoom: number) => {\r\n        this.onZoomChange(zoom);\r\n      });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log(\"PolyInfo start: \", k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log(\"deletePolygon: \", polygon);\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            /* if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n              }  */\r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log(\"Test: \", polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log(\"equals: \", equals, \" length: \", length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    this.polygonInformation.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][]): void {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords(geographicBorders)\r\n    );\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log(\"markers: \", markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log(\"Hull: \", polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.setMoveMode();\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        latlngs[latlngs.length - 1].length\r\n      );\r\n      // tslint:disable-next-line: max-line-length\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log(\"Within1 \", within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener(\"touchstart\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchend\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchmove\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log(\"mouseDown\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.Add:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.Subtract:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n\r\n  private onZoomChange(zoomLevel: number): void {\r\n    // console.log(\"onZoomChange\", zoomLevel);\r\n\r\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\r\n    } else {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\r\n      this.polygonInformation.setMoveMode();\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n\r\n    this.map[onoroff](\"mousemove\", this.mouseMove, this);\r\n    this.map[onoroff](\"mouseup\", this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    console.log(\r\n      \"addPolygon\",\r\n      latlngs,\r\n      simplify,\r\n      noMerge,\r\n      this.kinks,\r\n      this.config\r\n    );\r\n\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log(\"AddPolygonLayer: \", latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log(\"Hull: \", polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log(\"Array: \", this.arrayOfFeatureGroups);\r\n    this.polygonInformation.activate();\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on(\"click\", e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === \"MultiPolygon\") {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log(\"getPolygons: \", latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log(\"merge\", latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      console.log(\"Merger: \", featureCollection.features[0]);\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n    this.map[onoroff](\"mousedown\", this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      }\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on(\"drag\", e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        marker.on(\"click\", e => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on(\"drag\", e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(\" \");\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    console.log(\"markerdrag: \", layerLength);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log(\"Posisjoner: \", posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log(\"Posisjoner 2: \", posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log(\"Hole: \", hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log(\"STart index: \", length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log(\"Polygon drag: \", posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log(\"Hole 2: \", hole);\r\n    }\r\n    console.log(\"Nye posisjoner: \", newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log(\r\n      \"Markerdragend polygon: \",\r\n      featureCollection.features[0].geometry.coordinates\r\n    );\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        console.log(\"Markerdragend: \", feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log(\"Unkink: \", unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n      console.log(\"Markerdragend: \", feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log(\"Unkink: \", unkink);\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    console.log(\"getLatLngsFromJson: \", feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === \"MultiPolygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === \"Polygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    console.log(\"unionPolygons\", layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log(\"removeFeatureGroup\", featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      featureGroups => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log(\"removeFeatureGroupOnMerge\", featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        featureGroups => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log(\"deletePolygonOnMerge\", polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log(\"EQUALS\", polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) {\r\n        return false;\r\n      }\r\n    }\r\n    if (poly1.length !== poly2.length) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log(\"setDrawMode\", this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: \"\"\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.Add:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.Subtract:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: \"#D9460F\"\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n\r\n      if (isActiveDrawMode) {\r\n        this.polygonInformation.setFreeDrawMode();\r\n      } else {\r\n        this.polygonInformation.setMoveMode();\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\r\n      this.polygonInformation.setMoveMode();\r\n      this.setDrawMode(DrawMode.Off);\r\n    } else {\r\n      this.polygonInformation.setFreeDrawMode();\r\n      this.setDrawMode(DrawMode.Add);\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.Add);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.Subtract);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert(\"open menu\");\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log(\"bbox clicked\", e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log(\"simplyfi clicked\", e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(\r\n    latlngs: ILatLng[],\r\n    addMidpointMarkers: boolean = false\r\n  ) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(\r\n      polygon,\r\n      addMidpointMarkers\r\n    );\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getSouth(),\r\n      bounds.getWest(),\r\n      bounds.getNorth(),\r\n      bounds.getEast()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection.lat,\r\n      lng: compassDirection.lng\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  exports: [ ]\r\n})\r\nexport class MyLibModule {}\r\n"]}