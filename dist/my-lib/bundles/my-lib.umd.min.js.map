{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPlacement","MapStateService","mapSubject","BehaviorSubject","map$","asObservable","updateMapState","map","updatePolygons","polygons","console","log","Injectable","providedIn","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","bounds","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","turf.intersect","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","bbox","turf.bbox","turf.bboxPolygon","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","test","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","turf.booleanPointInPolygon","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","markerplacement","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","tracer","polygonDrawStates","ngUnsubscribe","config","pipe","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","AddPolygon","addPolygon","SubtractPolygon","subtractPolygon","drawStartedEvents","resetTracker","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","menu","delete","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","classNames","classes","join","L.divIcon","className","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","L.DomUtil","removeClass","color","addClass","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","convertToBoundsPolygon","compassDirection","latLngPoint","fc","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","tslib_1.__decorate","Output","Component","selector","template","MyLibModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPlacement {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MapStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n\r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        console.log(\"map-state\",polygons);\r\n    }\r\n}","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPlacement } from \"./enums\";\r\nimport { TurfHelperService } from \"./turf-helper.service\"\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n        \r\n        this.direction.North = {lat: maxLat, lng: (minLng + maxLng) / 2};\r\n        this.direction.NorthEast = {lat: maxLat, lng: maxLng};\r\n        this.direction.East = {lat: (minLat + maxLat) / 2, lng: maxLng};\r\n        this.direction.SouthEast = {lat: minLat, lng: maxLng};\r\n        this.direction.South = {lat: minLat, lng: (minLng + maxLng) / 2};\r\n        this.direction.SouthWest = {lat: minLat, lng: minLng};\r\n        this.direction.West = {lat:(minLat + maxLat) / 2, lng: minLng};\r\n        this.direction.NorthWest = {lat: maxLat, lng: minLng};\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPlacement) {\r\n        switch (direction) {\r\n            // case MarkerPlacement.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPlacement.North:\r\n                return this.direction.North;\r\n            case MarkerPlacement.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPlacement.East:\r\n                return this.direction.East;\r\n            case MarkerPlacement.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPlacement.South:\r\n                return this.direction.South;\r\n            case MarkerPlacement.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPlacement.West:\r\n                return this.direction.West;\r\n            case MarkerPlacement.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPlacement.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\n\r\nimport * as turf from \"@turf/turf\";\r\nimport concaveman from \"concaveman\";\r\nimport { Feature, Polygon, MultiPolygon, Position } from \"@turf/turf\";\r\nimport { MarkerPlacement } from \"./enums\";\r\nimport { ICompass } from \"./interface\";\r\nimport { Compass } from \"./utils\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    console.log(\"poly1: \", poly1);\r\n    console.log(\"poly2: \", poly2);\r\n\r\n    let union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    //console.log(\"turfConcaveman\", points);\r\n    let points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    console.log(\"Get TurfPolygon:\", polygon);\r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === \"Polygon\") {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    let coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    let poly = [];\r\n    let poly2 = [];\r\n\r\n    console.log(\"polygonIntersect\", polygon, latlngs);\r\n\r\n    let latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      let feat = { type: \"Polygon\", coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    let polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      let feat = { type: \"Polygon\", coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    console.log(polygon1);\r\n    console.log(\"Ytre: \", polygon2);\r\n    return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));\r\n  }\r\n\r\n  equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>) {\r\n    console.log(polygon1);\r\n    console.log(polygon2);\r\n    console.log(turf.booleanEqual(polygon1, polygon2));\r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    let coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    console.log(\"polygon: \", polygon);\r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      console.log(turf.nearestPoint(point, polygonPoints));\r\n      let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      console.log(\"test\", test);\r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      let pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        let polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          let index = turf.nearestPoint(point, polygonPoints).properties.featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          console.log(\"coordinates\", coordinates);\r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon> {\r\n    let diff = turf.difference(polygon1, polygon2);\r\n    console.log(diff);\r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(polygon, markerplacement: ICompass, useOffset, offsetDirection) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number {\r\n    let index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}\r\n","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from \"./polygon.util\";\r\n\r\nexport class PolygonInfo {\r\n    polygon: ILatLng[][][] = [];\r\n    trashcanPoint: ILatLng[] = [];\r\n    sqmArea: number[] = [];\r\n    perimeter: number[] = [];\r\n    constructor(polygon) {\r\n        console.log(\"PolygonInfo: \", polygon);\r\n        polygon.forEach((polygons, i) => { this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n            this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n            this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n            console.log(polygons[0]);\r\n            this.polygon[i] = polygons\r\n        })\r\n        \r\n    }\r\n    setSqmArea(area: number): void {\r\n        this.sqmArea[0] = area;\r\n    }\r\n    private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n\r\n        const res = Math.max.apply(Math, polygon.map(o => o.lat));\r\n        const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n        let previousPoint: ILatLng;\r\n        let nextPoint: ILatLng;\r\n\r\n        if (idx > 0) {\r\n            previousPoint = polygon[idx - 1];\r\n            if (idx < polygon.length - 1) {\r\n                nextPoint = polygon[idx + 1];\r\n            } else {\r\n                nextPoint = polygon[0];\r\n            }\r\n        } else {\r\n            previousPoint = polygon[polygon.length - 1];\r\n            nextPoint = polygon[idx + 1];\r\n        }\r\n\r\n        const secondPoint = (previousPoint.lng < nextPoint.lng) ? previousPoint : nextPoint;\r\n\r\n        const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n        return midpoint;\r\n    }\r\n    private calculatePolygonArea(polygon: ILatLng[]): number {\r\n        const area = PolygonUtil.getSqmArea((polygon) as any);\r\n        return area;\r\n    }\r\n    private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n        const perimeter = PolygonUtil.getPerimeter((polygon) as any);\r\n        return perimeter;\r\n    }\r\n    \r\n}\r\n\r\nexport class PolygonDrawStates {\r\n    isActivated: boolean;\r\n    isFreeDrawMode: boolean;\r\n    isMoveMode: boolean;\r\n    canRevert: boolean;\r\n    isAuto: boolean;\r\n    hasPolygons: boolean;\r\n    canUsePolyDraw: boolean;\r\n\r\n\r\n    constructor() {\r\n        this.canUsePolyDraw = false;\r\n        this.reset();\r\n    }\r\n\r\n    activate(): void {\r\n        this.reset();\r\n        this.isActivated = true;\r\n    }\r\n\r\n    reset(): void {\r\n        this.isActivated = false;\r\n        this.hasPolygons = false;\r\n        this.canRevert = false;\r\n        this.isAuto = false;\r\n\r\n        this.resetDrawModes();\r\n    }\r\n\r\n    resetDrawModes(): void {\r\n        this.isFreeDrawMode = false;\r\n        this.isMoveMode = false;\r\n    }\r\n\r\n    setFreeDrawMode(isAuto: boolean = false): void {\r\n        if (isAuto) {\r\n            this.isActivated = true;\r\n        }\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isFreeDrawMode = true;\r\n            if (isAuto) {\r\n                this.isAuto = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMoveMode(): void {\r\n        if (this.isActivated) {\r\n            this.resetDrawModes();\r\n            this.isMoveMode = true;\r\n        }\r\n    }\r\n\r\n    forceCanUseFreeDraw(): void {\r\n        this.canUsePolyDraw = true;\r\n    }\r\n}\r\n\r\nexport interface ILatLng {\r\n    lat: number, \r\n    lng: number;\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyDrawService } from \"./polydraw.service\";\r\nimport { MapStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<PolygonInfo[]>();\r\n  polygonInformation$: Observable<PolygonInfo[]> = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<PolygonDrawStates>();\r\n  polygonDrawStates$: Observable<PolygonDrawStates> = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: MapStateService) {}\r\n\r\n  updatePolygons() {\r\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n      \r\n      \r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = []\r\n        v.polygon.forEach((poly) => {\r\n          let test2 = []\r\n            \r\n            poly.forEach(polygon => {\r\n              test2 = [...polygon]\r\n              if (polygon[0].toString() !== polygon[polygon.length - 1].toString()) {\r\n                test2.push(polygon[0]);             \r\n            }  \r\n            test.push(test2)\r\n            });\r\n            \r\n            \r\n            });\r\n           \r\n            newPolygons.push(test)\r\n        });\r\n\r\n      // this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      // this.polygonDrawStates.reset();\r\n      // this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(v => v.polygon[0] === polygon);\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    console.log(\"DeleteTrashCan: \", polygon);\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      console.log(v.polygon);\r\n      const id = v.polygon.findIndex(poly => poly.toString() === polygon.toString());\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        console.log(v.polygon);\r\n      }\r\n      console.log(\"ID: \", id);\r\n    });\r\n    this.updatePolygons();\r\n    console.log(\"Index: \", index);\r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        console.log(featureGroup.getLayers()[0].getLatLngs());\r\n        let polyInfo = new PolygonInfo(featureGroup.getLayers()[0].getLatLngs());\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from \"rxjs\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport { Feature, Polygon, MultiPolygon } from \"@turf/turf\";\r\nimport { MapStateService } from \"./map-state.service\";\r\nimport { TurfHelperService } from \"./turf-helper.service\";\r\nimport { PolygonInformationService } from \"./polygon-information.service\";\r\nimport defaultConfig from \"./polyinfo.json\";\r\n\r\nimport { ComponentGeneraterService } from \"./component-generater.service\";\r\nimport { Compass, PolyDrawUtil } from \"./utils\";\r\nimport { MarkerPlacement } from \"./enums\";\r\nimport { LeafletHelperService } from \"./leaflet-helper.service\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  private readonly polygonDrawStates = null;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: MapStateService,\r\n    // private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      console.log(\"pre this.config\", this.config);\r\n      this.config = defaultConfig;\r\n      console.log(\"this.config\", this.config);\r\n      this.configurate({});\r\n      console.log(\"after this.config\", this.config);\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.polygonInformation.polygonInformation$.subscribe(k => {\r\n      console.log(\"PolyInfo start: \", k);\r\n    });\r\n\r\n    // TODO - lage en config observable i mapState og oppdater this.config med den\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    // console.log(\"closeAndReset\");\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    console.log(\"deletePolygon: \", polygon);\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          console.log(latlng);\r\n          if (latlng.length > 1) {\r\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n            }\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          console.log(\"Test: \", polygon3);\r\n\r\n          console.log(polygon);\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n          console.log(\"equals: \", equals, \" length: \", length);\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n            console.log(featureGroup.getLayers());\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    // console.log(\"removeAllFeatureGroups\", null);\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // this.polygonDrawStates.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    // console.log(\"getDrawMode\", null);\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][]): void {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const polygon2 = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords(geographicBorders)\r\n    );\r\n    console.log(polygon2);\r\n    const polygon = this.getPolygon(polygon2);\r\n\r\n    featureGroup.addLayer(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    console.log(\"markers: \", markerLatlngs);\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement, i) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log(\"Hull: \", polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n\r\n  // innehÃ¥ll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n    console.log(latlngs.length, latlngs);\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n      console.log(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        latlngs[latlngs.length - 1].length\r\n      );\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n      console.log(\"Within1 \", within);\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n    console.log(coords);\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    // console.log(\"initPolyDraw\", null);\r\n\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener(\"touchstart\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchend\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener(\"touchmove\", e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    console.log(\"mouseDown\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    // console.log(\"mouseMove\", event);\r\n\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    // console.log(\"mouseUpLeave\", null);\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    // console.log(\"------------------------------Delete trashcans\", null);\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.AddPolygon:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.SubtractPolygon:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    // console.log(\"------------------------------create trashcans\", null);\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    // console.log(\"startDraw\", null);\r\n\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    // console.log(\"stopDraw\", null);\r\n\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    // console.log(\"drawStartedEvents\", onoff);\r\n\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n\r\n    this.map[onoroff](\"mousemove\", this.mouseMove, this);\r\n    this.map[onoroff](\"mouseup\", this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    console.log(\r\n      \"addPolygon\",\r\n      latlngs,\r\n      simplify,\r\n      noMerge,\r\n      this.kinks,\r\n      this.config\r\n    );\r\n\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n    console.log(\"AddPolygonLayer: \", latLngs);\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n    console.log(polygon);\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n          console.log(\"Hull: \", polyElement);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, sÃ¥ har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n    console.log(\"Array: \", this.arrayOfFeatureGroups);\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on(\"click\", e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === \"MultiPolygon\") {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log(\"getPolygons: \", latlngs);\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    console.log(\"merge\", latlngs);\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n    console.log(newArray);\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? \"on\" : \"off\";\r\n    this.map[onoroff](\"mousedown\", this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      }\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n      // console.log(\"FeatureGroup: \", FeatureGroup);\r\n      marker.on(\"drag\", e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n        //     console.log(\"clicked on\", e.target);\r\n        //   })\r\n        // );\r\n        // marker.on(\"click\", e => {\r\n        //   this.convertToBoundsPolygon(e, latlngs)\r\n        // })\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on(\"drag\", e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on(\"dragend\", e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n          console.log(\"clicked on\", e.target);\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(\" \");\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n    console.log(posarrays);\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n        console.log(\"Posisjoner: \", posarrays[index]);\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              console.log(\"Posisjoner 2: \", posarrays[index][i]);\r\n\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n          console.log(\"Hole: \", hole);\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n          console.log(\"STart index: \", length);\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n        console.log(\"Polygon drag: \", posarrays[0][index]);\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n      console.log(\"Hole 2: \", hole);\r\n    }\r\n    console.log(\"Nye posisjoner: \", newPos);\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n    console.log(\r\n      \"Markerdragend polygon: \",\r\n      featureCollection.features[0].geometry.coordinates\r\n    );\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        console.log(\"Markerdragend: \", feature);\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n          console.log(\"Unkink: \", unkink);\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n      console.log(\"Markerdragend: \", feature);\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n        console.log(\"Unkink: \", unkink);\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    console.log(\"getLatLngsFromJson: \", feature);\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === \"MultiPolygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === \"Polygon\"\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    console.log(\"unionPolygons\", layers, latlngs, polygonFeature);\r\n\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    console.log(\"removeFeatureGroup\", featureGroup);\r\n\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      featureGroups => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    console.log(\"removeFeatureGroupOnMerge\", featureGroup);\r\n\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        featureGroups => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    console.log(\"deletePolygonOnMerge\", polygon);\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          console.log(\"EQUALS\", polygon);\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\r\n\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) {\r\n        return false;\r\n      }\r\n    }\r\n    if (poly1.length !== poly2.length) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\r\n\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    console.log(\"setDrawMode\", this.map);\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: \"\"\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.AddPolygon:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.SubtractPolygon:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            \"crosshair-cursor-enabled\"\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: \"#D9460F\"\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.AddPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.SubtractPolygon);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert(\"open menu\");\r\n  }\r\n  /*   private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      console.log('bbox clicked', e);\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      console.log('simplyfi clicked', e);\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  } */\r\n  private convertToBoundsPolygon(latlngs: ILatLng[]) {\r\n    const lPoly = this.leafletHelper.createPolygon(latlngs);\r\n\r\n    // const coords = this.convertToCoords([latlngs]);\r\n    // const p = this.getPolygon()\r\n\r\n    // if (poly.geometry.type === \"MultiPolygon\") {\r\n    //   let newPolygon = this.turfHelper.convertToBoundingBoxPolygon(poly);\r\n    //   this.deletePolygon(this.getLatLngsFromJson(poly));\r\n    //   this.addPolygonLayer(newPolygon, false);\r\n    // }\r\n  }\r\n  private getMarkerIndex(\r\n    latlngs: ILatLng[],\r\n    position: MarkerPlacement\r\n  ): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getWest(),\r\n      bounds.getSouth(),\r\n      bounds.getEast(),\r\n      bounds.getNorth()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection[1],\r\n      lng: compassDirection[0]\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n// flytt til enum.ts\r\nexport enum DrawMode {\r\n  Off = 0,\r\n  AddPolygon = 1,\r\n  EditPolygon = 2,\r\n  SubtractPolygon = 3,\r\n  LoadPolygon = 4\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  exports: [ AlterPolygonComponent]\r\n})\r\nexport class MyLibModule {}\r\n"]}