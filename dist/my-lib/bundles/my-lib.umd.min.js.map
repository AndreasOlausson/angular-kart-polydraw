{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://my-lib/lib/enums.ts","ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","DrawMode","MarkerPosition","PolyStateService","mapSubject","BehaviorSubject","map$","asObservable","polygonSubject","polygons$","mapStateSubject","MapStateModel","mapState$","mapZoomLevel$","pipe","map","state","mapBoundState","zoom","updateMapStates","newState","updateMapState","updatePolygons","polygons","console","log","updateMapBounds","mapBounds","Injectable","providedIn","MapBoundsState","bounds","PolyDrawUtil","getBounds","polygon","padding","tmpLatLng","forEach","ll","isNaN","lat","lng","L.Polyline","pad","Compass","minLat","minLng","maxLat","maxLng","direction","East","North","NorthEast","NorthWest","South","SouthEast","SouthWest","West","getDirection","getPositions","startNode","clockwise","addClosingNode","positions","TurfHelperService","simplifyTolerance","tolerance","highQuality","union","poly1","poly2","turf.union","getTurfPolygon","turfConcaveman","feature","coordinates","turf.explode","features","f","geometry","turf.multiPolygon","concaveman","getSimplified","turf.simplify","type","getMultiPolygon","polygonArray","getKinks","unkink","turf.unkinkPolygon","turf.featureEach","current","getCoords","turf.getCoords","hasKinks","turf.kinks","polygonIntersect","latlngs","poly","element","feat","intersect","loop1","j","test","turf.intersect","_a","turf.booleanPointInPolygon","_b","getIntersection","getDistance","point1","point2","turf.distance","isWithin","polygon1","polygon2","turf.booleanWithin","turf.polygon","equalPolygons","turf.booleanEqual","convertToBoundingBoxPolygon","addMidpointMarkers","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","compassPositions","polygonToMultiPolygon","injectPointToPolygon","point","newPolygon","coords","polygonPoints","turf.nearestPoint","index_1","properties","featureIndex","turf.coordReduce","accumulator","oldPoint","pos_1","coordinates_1","index_2","polygonDifference","diff","turf.difference","getBoundingBoxCompassPosition","useOffset","offsetDirection","compass","getBoundingBoxCompass","coord","getCoord","b","turf.centerOfMass","minX","minY","maxX","maxY","getNearestPointIndex","targetPoint","points","turf.getCoord","getFeaturePointCollection","pts","v","turf.point","turf.featureCollection","PolygonUtil","getCenter","pi","Math","PI","x","y","z","lat1","lon1","cos","sin","atan2","hyp","sqrt","getSouthWest","getNorthWest","getNorthEast","getSouthEast","getNorth","getSouth","getWest","getEast","getSqmArea","geoJsonPoly","L.Polygon","toGeoJSON","turf.area","getPerimeter","turf.length","units","getPolygonChecksum","uniqueLatLngs","filter","a","indexOf","find","reduce","getMidPoint","p1","p2","midpoint","turf.midpoint","PolygonInfo","_this","trashcanPoint","sqmArea","perimeter","getTrashcanPoint","calculatePolygonArea","calculatePolygonPerimeter","setSqmArea","area","previousPoint","nextPoint","res","max","idx","findIndex","secondPoint","addClass","selector","className","elements","document","querySelectorAll","item","classList","add","removeClass","remove","PolygonDrawStates","canUsePolyDraw","reset","activate","isActivated","hasPolygons","canRevert","isAuto","resetDrawModes","isFreeDrawMode","isMoveMode","setFreeDrawMode","setMoveMode","forceCanUseFreeDraw","PolygonInformationService","mapStateService","polygonInformationSubject","Subject","polygonInformation$","polygonDrawStatesSubject","polygonDrawStates$","polygonDrawStates","polygonInformationStorage","newPolygons","test2","toString","saveCurrentState","deleteTrashcan","splice","deleteTrashCanOnMulti","index","id","deletePolygonInformationStorage","createPolygonInformationStorage","arrayOfFeatureGroups","featureGroup","getLayers","getLatLngs","polyInfo","AlterPolygonComponent","simplyfiClicked","EventEmitter","bboxClicked","onSimplify","$event","emit","onBbox","Output","Component","template","ComponentGeneraterService","cfr","injector","clusterPopuprefs","ngOnDestroy","destroyAngularPopupComponents","generateAlterPopup","popupComponentRef","resolveComponentFactory","create","cref","destroy","ComponentFactoryResolver","Injector","LeafletHelperService","createPolygon","latLngs","L.polygon","PolyDrawService","mapState","popupGenerator","turfHelper","polygonInformation","leafletHelper","drawModeSubject","Off","drawMode$","minimumFreeDrawZoomLevel","tracer","ngUnsubscribe","config","subscribe","defaultConfig","configurate","L.polyline","polyLineOptions","initPolyDraw","debounceTime","takeUntil","onZoomChange","k","mergePolygons","kinks","closeAndReset","setDrawMode","removeAllFeatureGroups","deletePolygon","layer","latlng","polygon3","equals","polygonArrayEquals","removeFeatureGroup","setLatLngs","addPolygonLayer","featureGroups","removeLayer","getDrawMode","addViken","addAutoPolygon","geographicBorders","group","L.FeatureGroup","convertToCoords","getPolygon","addLayer","markerLatlngs","polyElement","addMarker","addHoleMarker","L.GeoJSON","latLngsToCoords","within","coordinates_2","container","getContainer","drawMode","touchSupport","addEventListener","mouseDown","mouseUpLeave","mouseMove","event","originalEvent","containerPointToLatLng","touches","clientX","clientY","startDraw","addLatLng","geoPos","stopDraw","Add","addPolygon","Subtract","subtractPolygon","drawStartedEvents","resetTracker","zoomLevel","onoff","onoroff","subtract","simplify","noMerge","merge","on","polygonClicked","newPoint","getLatLngsFromJson","geometryToLayer","setStyle","polygonOptions","polygonFeature","newArray","featureCollection","unionPolygons","addHole","removeFeatureGroupOnMerge","newLatlngs","events","FeatureGroup","menuMarkerIdx","getMarkerIndex","markers","markerMenuIcon","position","deleteMarkerIdx","markerDeleteIcon","iconClasses","markerIcon","styleClasses","marker","L.Marker","icon","createDivIcon","draggable","title","addTo","markerDrag","markerDragEnd","menu","convertToBoundsPolygon","delete","classNames","classes","join","L.divIcon","newPos","testarray","hole","layerLength","posarrays","getLatLng","length2","coordsToLatLngs","layers","addNew","deletePolygonOnMerge","clearLayers","polygon_1","polygonArrayEqualsMerge","setLeafletMapEvents","enableDragging","enableDoubleClickZoom","enableScrollWheelZoom","dragging","enable","disable","doubleClickZoom","scrollWheelZoom","mode","isActiveDrawMode","L.DomUtil","color","modeChange","drawModeClick","freedrawMenuClick","subtractClick","toggleMarkerMenu","alert","getHtmlContent","callBack","comp","instance","location","nativeElement","convertToSimplifiedPolygon","compassDirection","latLngPoint","fc","MyLibModule","NgModule","declarations","imports","providers","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum DrawMode {\n    Off = 0,\n    Add = 1,\n    Edit = 2,\n    Subtract = 4,\n    AppendMarker = 8,\n    LoadPredefined = 16\n}\nexport enum MarkerPosition {\n    // CenterOfMass = 0,\n    North = 1,\n    East = 2,\n    South = 3,\n    West = 4,\n    NorthEast = 5,\n    NorthWest = 6,\n    SouthEast = 7,\n    SouthWest = 8,\n    // BoundingBoxCenter = 9\n}\n\n\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport * as L from \"leaflet\"\nimport { ILatLng } from './polygon-helpers';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PolyStateService {\n    constructor() { }\n    \n\n    private mapSubject = new BehaviorSubject<L.Map>(null); \n    \n    map$: Observable<L.Map> = this.mapSubject.asObservable();\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \n\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\n    private mapStateSubject = new BehaviorSubject<MapStateModel>(new MapStateModel());\n    mapState$: Observable<MapStateModel> = this.mapStateSubject.asObservable();\n    mapZoomLevel$: Observable<number>  = this.mapState$.pipe(map((state: MapStateModel) => state.mapBoundState.zoom));\n\n    private updateMapStates(newState: any): void {\n        let state = this.mapStateSubject.value;\n        state = { ...state, ...newState };\n\n        this.mapStateSubject.next(state);\n    }\n\n\n    updateMapState(map: L.Map){\n        this.mapSubject.next(map)\n    }\n\n    updatePolygons(polygons: ILatLng[][][]):void{\n        console.log(\"map-state\",polygons);\n        this.polygonSubject.next(polygons)\n    }\n    updateMapBounds(mapBounds: MapBoundsState) {\n        this.updateMapStates({ mapBoundState: mapBounds });\n    }\n}\n\nclass MapStateModel {\n    constructor(\n      \n        public mapBoundState: MapBoundsState = new MapBoundsState(null, 11)) { }\n}\nclass MapBoundsState {\n    constructor(\n        public bounds: L.LatLngBounds,\n        public zoom: number) { }\n}","import { ICompass } from \"./interface\";\nimport * as L from \"leaflet\";\nimport { ILatLng } from \"./polygon-helpers\";\nimport { MarkerPosition } from \"./enums\";\n\nexport class PolyDrawUtil {\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\n        const tmpLatLng: L.LatLng[] = [];\n        polygon.forEach(ll => {\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\n            }\n            tmpLatLng.push(ll as L.LatLng);\n        });\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\n        const bounds = polyLine.getBounds();\n        if (padding !== 0) {\n            return bounds.pad(padding);\n        }\n        return bounds;\n    }\n}\n//TODO make compass ILatLng\nexport class Compass {\n\n    public direction: ICompass = {\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\n        // CenterOfMass: { lat: 0, lng: 0 },\n        East: { lat: 0, lng: 0 },\n        North: { lat: 0, lng: 0 },\n        NorthEast: { lat: 0, lng: 0 },\n        NorthWest: { lat: 0, lng: 0 },\n        South: { lat: 0, lng: 0 },\n        SouthEast: { lat: 0, lng: 0 },\n        SouthWest: { lat: 0, lng: 0 },\n        West: { lat: 0, lng: 0 }\n    };\n\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\n\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\n    }\n    //TODO default return.\n    getDirection(direction: MarkerPosition) {\n        switch (direction) {\n            // case MarkerPosition.CenterOfMass:\n            //     return this.direction.CenterOfMass;\n            case MarkerPosition.North:\n                return this.direction.North;\n            case MarkerPosition.NorthEast:\n                return this.direction.NorthEast;\n            case MarkerPosition.East:\n                return this.direction.East;\n            case MarkerPosition.SouthEast:\n                return this.direction.SouthEast;\n            case MarkerPosition.South:\n                return this.direction.South;\n            case MarkerPosition.SouthWest:\n                return this.direction.SouthWest;\n            case MarkerPosition.West:\n                return this.direction.West;\n            case MarkerPosition.NorthWest:\n                return this.direction.NorthWest;\n            // case MarkerPosition.BoundingBoxCenter:\n            //     return this.direction.BoundingBoxCenter;\n            default:\n                return this.direction.North;\n        }\n    }\n    //TODO startNode, go clockwise or not\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\n\n        let positions: number[][] = [];\n\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\n        if (addClosingNode) {\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\n        }\n\n\n\n        return positions;\n    }\n}","import { Injectable } from '@angular/core';\n\nimport * as turf from '@turf/turf';\nimport concaveman from 'concaveman';\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\nimport { MarkerPosition } from './enums';\nimport { ICompass } from './interface';\nimport { Compass } from './utils';\nimport { ILatLng } from './polygon-helpers';\n\n@Injectable({ providedIn: 'root' })\nexport class TurfHelperService {\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\n  constructor() {}\n\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\n    console.log('poly1: ', poly1);\n    console.log('poly2: ', poly2);\n\n    const union = turf.union(poly1, poly2);\n\n    return this.getTurfPolygon(union);\n  }\n\n  turfConcaveman(\n    feature: Feature<Polygon | MultiPolygon>\n  ): Feature<Polygon | MultiPolygon> {\n    //console.log(\"turfConcaveman\", points);\n    const points = turf.explode(feature);\n\n    const coordinates = points.features.map(f => f.geometry.coordinates);\n    return turf.multiPolygon([[concaveman(coordinates)]]);\n  }\n\n  //TODO add some sort of dynamic tolerance\n  getSimplified(\n    polygon: Feature<Polygon | MultiPolygon>\n  ): Feature<Polygon | MultiPolygon> {\n    const tolerance = this.simplifyTolerance;\n    const simplified = turf.simplify(polygon, tolerance);\n    return simplified;\n  }\n\n  getTurfPolygon(\n    polygon: Feature<Polygon | MultiPolygon>\n  ): Feature<Polygon | MultiPolygon> {\n    let turfPolygon;\n    console.log('Get TurfPolygon:', polygon);\n    // if (polygon.geometry)\n    if (polygon.geometry.type === 'Polygon') {\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\n    } else {\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\n    }\n    return turfPolygon;\n  }\n\n  getMultiPolygon(\n    polygonArray: Position[][][]\n  ): Feature<Polygon | MultiPolygon> {\n    return turf.multiPolygon(polygonArray);\n  }\n\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\n    const unkink = turf.unkinkPolygon(feature);\n    const coordinates = [];\n    turf.featureEach(unkink, current => {\n      coordinates.push(current);\n    });\n\n    return coordinates;\n  }\n\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\n    return turf.getCoords(feature);\n  }\n\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\n    const kinks = turf.kinks(feature);\n    return kinks.features.length > 0;\n  }\n\n  polygonIntersect(\n    polygon: Feature<Polygon | MultiPolygon>,\n    latlngs: Feature<Polygon | MultiPolygon>\n  ): boolean {\n    // const oldPolygon = polygon.toGeoJSON();\n    const poly = [];\n    const poly2 = [];\n\n    console.log('polygonIntersect', polygon, latlngs);\n\n    const latlngsCoords = turf.getCoords(latlngs);\n    latlngsCoords.forEach(element => {\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\n\n      poly.push(feat);\n    });\n    const polygonCoords = turf.getCoords(polygon);\n    polygonCoords.forEach(element => {\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\n\n      poly2.push(feat);\n    });\n    let intersect = false;\n    loop1: for (let i = 0; i < poly.length; i++) {\n      if (this.getKinks(poly[i]).length < 2) {\n        for (let j = 0; j < poly2.length; j++) {\n          if (this.getKinks(poly2[j]).length < 2) {\n            const test = turf.intersect(poly[i], poly2[j]);\n            if (test?.geometry.type === 'Point') {\n              intersect = !(\n                turf.booleanPointInPolygon(test, poly[i]) &&\n                turf.booleanPointInPolygon(test, poly2[j])\n              );\n              console.log('Intersect test: ');\n            } else if (test?.geometry.type === 'Polygon') {\n              intersect = !!turf.intersect(poly[i], poly2[j]);\n            }\n\n            if (intersect) {\n              break loop1;\n            }\n          }\n        }\n      }\n    }\n\n    return intersect;\n  }\n\n  getIntersection(poly1, poly2): Feature {\n    return turf.intersect(poly1, poly2);\n  }\n  getDistance(point1, point2): number {\n    return turf.distance(point1, point2);\n  }\n\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\n    console.log(polygon1);\n    console.log('Ytre: ', polygon2);\n    return turf.booleanWithin(\n      turf.polygon([polygon1]),\n      turf.polygon([polygon2])\n    );\n  }\n\n  equalPolygons(\n    polygon1: Feature<Polygon | MultiPolygon>,\n    polygon2: Feature<Polygon | MultiPolygon>\n  ) {\n    console.log(polygon1);\n    console.log(polygon2);\n    console.log(turf.booleanEqual(polygon1, polygon2));\n  }\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\n  convertToBoundingBoxPolygon(\n    polygon: Feature<Polygon | MultiPolygon>,\n    addMidpointMarkers: boolean = false\n  ): Feature<Polygon> {\n    const bbox = turf.bbox(polygon.geometry);\n    const bboxPolygon = turf.bboxPolygon(bbox);\n\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\n\n    const compassPositions = compass.getPositions();\n\n    bboxPolygon.geometry.coordinates = [];\n    bboxPolygon.geometry.coordinates = [compassPositions];\n\n    return bboxPolygon;\n  }\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\n    return multi;\n  }\n  //TODO -cleanup\n  injectPointToPolygon(polygon, point) {\n    const coords = turf.getCoords(polygon);\n    let newPolygon;\n    console.log('polygon: ', polygon);\n    if (coords.length < 2) {\n      const polygonPoints = turf.explode(polygon);\n      console.log(turf.nearestPoint(point, polygonPoints));\n      const index = turf.nearestPoint(point, polygonPoints).properties\n        .featureIndex;\n      const test = turf.coordReduce(\n        polygonPoints,\n        function(accumulator, oldPoint, i) {\n          if (index === i) {\n            return [...accumulator, oldPoint, point];\n          }\n          return [...accumulator, oldPoint];\n        },\n        []\n      );\n      console.log('test', test);\n      newPolygon = turf.multiPolygon([[test]]);\n    } else {\n      const pos = [];\n      let coordinates = [];\n      coords.forEach(element => {\n        const polygon = turf.polygon(element);\n        // turf.booleanPointInPolygon(point, polygon)\n        if (turf.booleanPointInPolygon(point, polygon)) {\n          const polygonPoints = turf.explode(polygon);\n          const index = turf.nearestPoint(point, polygonPoints).properties\n            .featureIndex;\n          coordinates = turf.coordReduce(\n            polygonPoints,\n            function(accumulator, oldPoint, i) {\n              if (index === i) {\n                return [...accumulator, oldPoint, point];\n              }\n              return [...accumulator, oldPoint];\n            },\n            []\n          );\n          console.log('coordinates', coordinates);\n        } else {\n          pos.push(element);\n        }\n      });\n      pos.push([coordinates]);\n      newPolygon = turf.multiPolygon(pos);\n    }\n    return newPolygon;\n  }\n\n  polygonDifference(\n    polygon1: Feature<Polygon | MultiPolygon>,\n    polygon2: Feature<Polygon | MultiPolygon>\n  ): Feature<Polygon | MultiPolygon> {\n    const diff = turf.difference(polygon1, polygon2);\n    console.log(diff);\n    return this.getTurfPolygon(diff);\n  }\n  getBoundingBoxCompassPosition(\n    polygon,\n    MarkerPosition: ICompass,\n    useOffset,\n    offsetDirection\n  ) {\n    const p = this.getMultiPolygon(polygon);\n    const compass = this.getBoundingBoxCompass(polygon);\n    const polygonPoints = turf.explode(polygon);\n    const coord = this.getCoord(compass.direction.North);\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\n\n    return null;\n  }\n  private getBoundingBoxCompass(polygon): Compass {\n    const p = this.getMultiPolygon(polygon);\n    const centerOfMass = turf.centerOfMass(p);\n    const b = turf.bbox(p);\n    const minX = b[0];\n    const minY = b[1];\n    const maxX = b[2];\n    const maxY = b[3];\n    const compass = new Compass(minX, minY, maxX, maxY);\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\n\n    return compass;\n  }\n\n  getNearestPointIndex(\n    targetPoint: turf.Coord,\n    points: turf.FeatureCollection<turf.Point>\n  ): number {\n    const index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\n    return index;\n  }\n  getCoord(point: ILatLng): turf.Coord {\n    const coord = turf.getCoord([point.lng, point.lat]);\n    return coord;\n  }\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\n    const pts = [];\n    points.forEach(v => {\n      const p = turf.point([v.lng, v.lat], {});\n      pts.push(p);\n    });\n\n    const fc = turf.featureCollection(pts);\n\n    return fc;\n  }\n}\n","\nimport * as L from \"leaflet\";\nimport * as turf from \"@turf/turf\"\nimport { ILatLng } from \"./polygon-helpers\";\n\nexport class PolygonUtil {\n    static getCenter(polygon: ILatLng[]) {\n        const pi = Math.PI;\n        let x = 0;\n        let y = 0;\n        let z = 0;\n\n        polygon.forEach(v => {\n            let lat1 = v.lat;\n            let lon1 = v.lng;\n            lat1 = lat1 * pi / 180;\n            lon1 = lon1 * pi / 180;\n            x += Math.cos(lat1) * Math.cos(lon1);\n            y += Math.cos(lat1) * Math.sin(lon1);\n            z += Math.sin(lat1);\n        });\n\n        let lng = Math.atan2(y, x);\n        const hyp = Math.sqrt(x * x + y * y);\n        let lat = Math.atan2(z, hyp);\n        lat = lat * 180 / pi;\n        lng = lng * 180 / pi;\n        const center: ILatLng = { lat: lat, lng: lng };\n\n        return center;\n    }\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\n        const bounds = this.getBounds(polygon);\n        return bounds.getNorthWest();\n    }\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\n        const bounds = this.getBounds(polygon);\n        return bounds.getNorthEast();\n    }\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\n        const bounds = this.getBounds(polygon);\n        return bounds.getNorthWest();\n    }\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\n        const bounds = this.getBounds(polygon);\n        return bounds.getSouthEast();\n    }\n    static getNorth(polygon: ILatLng[]): number {\n        const bounds = this.getBounds(polygon);\n        return bounds.getNorth();\n    }\n    static getSouth(polygon: ILatLng[]): number {\n        const bounds = this.getBounds(polygon);\n        return bounds.getSouth();\n    }\n    static getWest(polygon: ILatLng[]): number {\n        const bounds = this.getBounds(polygon);\n        return bounds.getWest();\n    }\n    static getEast(polygon: ILatLng[]): number {\n        const bounds = this.getBounds(polygon);\n        return bounds.getEast();\n    }\n    static getSqmArea(polygon: ILatLng[]): number {\n        const poly: L.Polygon = new L.Polygon(polygon);\n        const geoJsonPoly = poly.toGeoJSON();\n\n        const area = turf.area((geoJsonPoly) as any);\n\n        return area;\n    }\n    static getPerimeter(polygon: ILatLng[]): number {\n        const poly: L.Polygon = new L.Polygon(polygon);\n        const geoJsonPoly = poly.toGeoJSON();\n\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\n\n        return perimeter;\n    }\n    static getPolygonChecksum(polygon: ILatLng[]): number {\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\n        });\n\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\n    }\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\n\n        const p1 = turf.point([point1.lng, point1.lat]);\n        const p2 = turf.point([point2.lng, point2.lat]);\n\n        const midpoint = turf.midpoint(p1, p2);\n\n        const returnPoint: ILatLng = {\n            lat: midpoint.geometry.coordinates[1],\n            lng: midpoint.geometry.coordinates[0]\n        };\n\n        return returnPoint;\n    }\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\n        const tmpLatLng: L.LatLng[] = [];\n\n        polygon.forEach(ll => {\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\n            }\n            tmpLatLng.push(ll as L.LatLng);\n        });\n\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\n        const bounds = polyLine.getBounds();\n\n        return bounds;\n\n    }\n}\n\n//export class FreedrawSubtract extends L.FreeDraw {\n\n\n//    constructor() {\n\n//        //this will become L.FreeDraw\n//        super(null);\n//        //call methods in freedraw by this\n//        const foo = this.size();\n\n//        this.consoleLogNumberOfPolygons(foo);\n\n//    }\n\n//    consoleLogNumberOfPolygons(size: number): void {\n//        console.log(\"Number of polygons: \", size);\n//    }\n\n//}","import { PolygonUtil } from './polygon.util';\n\nexport class PolygonInfo {\n  polygon: ILatLng[][][] = [];\n  trashcanPoint: ILatLng[] = [];\n  sqmArea: number[] = [];\n  perimeter: number[] = [];\n  constructor(polygon) {\n    console.log('PolygonInfo: ', polygon);\n    polygon.forEach((polygons, i) => {\n      this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\n      this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\n      this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\n      console.log(polygons[0]);\n      this.polygon[i] = polygons;\n    });\n  }\n  setSqmArea(area: number): void {\n    this.sqmArea[0] = area;\n  }\n  private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\n    const res = Math.max.apply(\n      Math,\n      polygon.map(o => o.lat)\n    );\n    const idx = polygon.findIndex(o => o.lat === res);\n\n    let previousPoint: ILatLng;\n    let nextPoint: ILatLng;\n\n    if (idx > 0) {\n      previousPoint = polygon[idx - 1];\n      if (idx < polygon.length - 1) {\n        nextPoint = polygon[idx + 1];\n      } else {\n        nextPoint = polygon[0];\n      }\n    } else {\n      previousPoint = polygon[polygon.length - 1];\n      nextPoint = polygon[idx + 1];\n    }\n\n    const secondPoint =\n      previousPoint.lng < nextPoint.lng ? previousPoint : nextPoint;\n\n    const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\n\n    return midpoint;\n  }\n  private calculatePolygonArea(polygon: ILatLng[]): number {\n    const area = PolygonUtil.getSqmArea(polygon as any);\n    return area;\n  }\n  private calculatePolygonPerimeter(polygon: ILatLng[]): number {\n    const perimeter = PolygonUtil.getPerimeter(polygon as any);\n    return perimeter;\n  }\n}\nconst addClass: (selector: string, className: string) => void = (\n  selector: string,\n  className: string\n): void => {\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\n  for (let i = 0; i < elements.length; i++) {\n    elements.item(i).classList.add(className);\n  }\n};\n\nconst removeClass: (selector: string, className: string) => void = (\n  selector: string,\n  className: string\n): void => {\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\n  for (let i = 0; i < elements.length; i++) {\n    elements.item(i).classList.remove(className);\n  }\n};\n\nexport class PolygonDrawStates {\n  isActivated: boolean;\n  isFreeDrawMode: boolean;\n  isMoveMode: boolean;\n  canRevert: boolean;\n  isAuto: boolean;\n  hasPolygons: boolean;\n  canUsePolyDraw: boolean;\n\n  constructor() {\n    this.canUsePolyDraw = false;\n    this.reset();\n  }\n\n  activate(): void {\n    this.reset();\n    this.isActivated = true;\n  }\n\n  reset(): void {\n    this.isActivated = false;\n    this.hasPolygons = false;\n    this.canRevert = false;\n    this.isAuto = false;\n\n    this.resetDrawModes();\n  }\n\n  resetDrawModes(): void {\n    this.isFreeDrawMode = false;\n    removeClass('img.leaflet-tile', 'disable-events');\n    this.isMoveMode = false;\n  }\n\n  setFreeDrawMode(isAuto: boolean = false): void {\n    if (isAuto) {\n      this.isActivated = true;\n    }\n    if (this.isActivated) {\n      this.resetDrawModes();\n      this.isFreeDrawMode = true;\n      addClass('img.leaflet-tile', 'disable-events');\n      if (isAuto) {\n        this.isAuto = true;\n      }\n    }\n  }\n\n  setMoveMode(): void {\n    if (this.isActivated) {\n      this.resetDrawModes();\n      this.isMoveMode = true;\n    }\n  }\n\n  forceCanUseFreeDraw(): void {\n    this.canUsePolyDraw = true;\n  }\n}\n\nexport interface ILatLng {\n  lat: number;\n  lng: number;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject, Observable } from \"rxjs\";\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\nimport { PolyDrawService } from \"./polydraw.service\";\nimport { PolyStateService } from \"./map-state.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class PolygonInformationService {\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\n    PolygonInfo[]\n  >();\n  polygonInformation$: Observable<\n    PolygonInfo[]\n  > = this.polygonInformationSubject.asObservable();\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\n    PolygonDrawStates\n  >();\n  polygonDrawStates$: Observable<\n    PolygonDrawStates\n  > = this.polygonDrawStatesSubject.asObservable();\n\n  polygonDrawStates: PolygonDrawStates = null;\n  polygonInformationStorage = [];\n  constructor(private mapStateService: PolyStateService) {\n    this.polygonDrawStates = new PolygonDrawStates();\n  }\n\n  updatePolygons() {\n    console.log(\"updatePolygons: \", this.polygonInformationStorage);\n\n    let newPolygons: ILatLng[][][] = null;\n    if (this.polygonInformationStorage.length > 0) {\n      newPolygons = [];\n\n      this.polygonInformationStorage.forEach(v => {\n        let test = [];\n        v.polygon.forEach(poly => {\n          let test2 = [];\n\n          poly.forEach(polygon => {\n            test2 = [...polygon];\n            if (\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\n            ) {\n              test2.push(polygon[0]);\n            }\n            test.push(test2);\n          });\n        });\n\n        newPolygons.push(test);\n      });\n\n      this.polygonDrawStates.hasPolygons = true;\n    } else {\n      this.polygonDrawStates.reset();\n      this.polygonDrawStates.hasPolygons = false;\n    }\n    this.mapStateService.updatePolygons(newPolygons);\n    this.saveCurrentState();\n  }\n\n  saveCurrentState(): void {\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\n    console.log(\"saveCurrentState: \", this.polygonInformationStorage);\n  }\n\n  deleteTrashcan(polygon) {\n    const idx = this.polygonInformationStorage.findIndex(\n      v => v.polygon[0] === polygon\n    );\n    this.polygonInformationStorage.splice(idx, 1);\n    this.updatePolygons();\n  }\n\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\n    let index = 0;\n    console.log(\"DeleteTrashCan: \", polygon);\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\n    this.polygonInformationStorage.forEach((v, i) => {\n      console.log(v.polygon);\n      const id = v.polygon.findIndex(\n        poly => poly.toString() === polygon.toString()\n      );\n      if (id >= 0) {\n        index = i;\n        v.trashcanPoint.splice(id, 1);\n        v.sqmArea.splice(id, 1);\n        v.perimeter.splice(id, 1);\n        v.polygon.splice(id, 1);\n\n        console.log(v.polygon);\n      }\n      console.log(\"ID: \", id);\n    });\n    this.updatePolygons();\n    console.log(\"Index: \", index);\n    if (this.polygonInformationStorage.length > 1) {\n      this.polygonInformationStorage.splice(index, 1);\n    }\n    console.log(\"deleteTrashCanOnMulti: \", this.polygonInformationStorage);\n  }\n\n  deletePolygonInformationStorage() {\n    this.polygonInformationStorage = [];\n  }\n\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\n    console.log(\"Create Info: \", arrayOfFeatureGroups);\n    if (arrayOfFeatureGroups.length > 0) {\n      arrayOfFeatureGroups.forEach(featureGroup => {\n        console.log(featureGroup.getLayers()[0].getLatLngs());\n        let polyInfo = new PolygonInfo(\n          featureGroup.getLayers()[0].getLatLngs()\n        );\n        this.polygonInformationStorage.push(polyInfo);\n      });\n      this.updatePolygons();\n    }\n  }\n\n  activate() {\n    this.polygonDrawStates.activate();\n  }\n  reset() {\n    this.polygonDrawStates.reset();\n  }\n\n  setMoveMode() {\n    this.polygonDrawStates.setMoveMode();\n  }\n\n  setFreeDrawMode() {\n    this.polygonDrawStates.setFreeDrawMode();\n  }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-alter-polygon',\n  templateUrl: './alter-polygon.component.html',\n  styleUrls: ['./alter-polygon.component.css']\n})\nexport class AlterPolygonComponent {\n\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  onSimplify($event: MouseEvent): void {\n    this.simplyfiClicked.emit($event);\n  }\n\n  onBbox($event: MouseEvent): void {\n    this.bboxClicked.emit($event);\n  }\n\n}\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentGeneraterService implements OnDestroy {\n\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\n\n  constructor(\n    private readonly cfr: ComponentFactoryResolver,\n    private readonly injector: Injector\n  ) { }\n\n  ngOnDestroy(): void {\n    this.destroyAngularPopupComponents();\n  }\n\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\n    this.clusterPopuprefs.push(popupComponentRef);\n    return popupComponentRef;\n  }\n\n  destroyAngularPopupComponents(): void {\n    this.clusterPopuprefs.forEach(cref => {\n      if (cref) {\n        cref.destroy();\n      }\n    });\n    this.clusterPopuprefs = [];\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport * as L from \"leaflet\";\nimport { ILatLng } from \"./polygon-helpers\";\n\n@Injectable({ providedIn: \"root\" })\nexport class LeafletHelperService {\n  constructor() {}\n\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\n    const p = L.polygon(latLngs);\n    return p;\n  }\n}\n","import { Injectable, Optional } from \"@angular/core\";\nimport * as L from \"leaflet\";\n// import * as turf from \"@turf/turf\";\nimport { Observable, BehaviorSubject, Subject } from \"rxjs\";\nimport { filter, debounceTime, takeUntil } from \"rxjs/operators\";\nimport { Feature, Polygon, MultiPolygon } from \"@turf/turf\";\nimport { PolyStateService } from \"./map-state.service\";\nimport { TurfHelperService } from \"./turf-helper.service\";\nimport { PolygonInformationService } from \"./polygon-information.service\";\nimport defaultConfig from \"./polyinfo.json\";\nimport { ILatLng, PolygonDrawStates } from \"./polygon-helpers\";\nimport { ComponentGeneraterService } from \"./component-generater.service\";\nimport { Compass, PolyDrawUtil } from \"./utils\";\nimport { MarkerPosition, DrawMode } from \"./enums\";\nimport { LeafletHelperService } from \"./leaflet-helper.service\";\n\n@Injectable({\n  providedIn: \"root\"\n})\n// Rename - PolyDrawService\nexport class PolyDrawService {\n  // DrawModes, determine UI buttons etc...\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\n    DrawMode.Off\n  );\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\n\n  private readonly minimumFreeDrawZoomLevel: number = 12;\n  private map: L.Map;\n\n  private mergePolygons: boolean;\n  private kinks: boolean;\n  // add to config\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\n  private tracer: L.Polyline = {} as any;\n  // end add to config\n\n  private ngUnsubscribe = new Subject();\n  private config: typeof defaultConfig = null;\n\n  constructor(\n    private mapState: PolyStateService,\n    private popupGenerator: ComponentGeneraterService,\n    private turfHelper: TurfHelperService,\n    private polygonInformation: PolygonInformationService,\n    private leafletHelper: LeafletHelperService\n  ) {\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\n      this.map = map;\n      console.log(\"Kartet i polydraw: \", this.map);\n      console.log(\"pre this.config\", this.config);\n      this.config = defaultConfig;\n      console.log(\"this.config\", this.config);\n      this.configurate({});\n      console.log(\"after this.config\", this.config);\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\n      console.log(\"Tracer pipe: \", this.tracer);\n      this.initPolyDraw();\n    });\n\n    this.mapState.mapZoomLevel$\n      .pipe(debounceTime(100), takeUntil(this.ngUnsubscribe))\n      .subscribe((zoom: number) => {\n        this.onZoomChange(zoom);\n      });\n\n    this.polygonInformation.polygonInformation$.subscribe(k => {\n      console.log(\"PolyInfo start: \", k);\n    });\n\n    // TODO - lage en config observable i mapState og oppdater this.config med den\n  }\n  // new\n  configurate(config: Object): void {\n    // TODO if config is path...\n    this.config = { ...defaultConfig, ...config };\n\n    this.mergePolygons = this.config.mergePolygons;\n    this.kinks = this.config.kinks;\n  }\n\n  // fine\n  closeAndReset(): void {\n    // console.log(\"closeAndReset\");\n    this.setDrawMode(DrawMode.Off);\n    this.removeAllFeatureGroups();\n  }\n\n  // make readable\n  deletePolygon(polygon: ILatLng[][]) {\n    console.log(\"deletePolygon: \", polygon);\n    if(polygon.length > 1) {\n      polygon.length = 1;\n    }\n    if (this.arrayOfFeatureGroups.length > 0) {\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\n        const layer = featureGroup.getLayers()[0] as any;\n        const latlngs = layer.getLatLngs();\n        const length = latlngs.length;\n        //  = []\n        console.log(latlngs);\n        latlngs.forEach((latlng, index) => {\n          let polygon3;\n          const test = [...latlng];\n\n          console.log(latlng);\n          if (latlng.length > 1) {\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\n              test[0].push(latlng[0][0]);\n              } \n\n            polygon3 = [test[0]];\n          } else {\n            if (latlng[0] !== latlng[latlng.length - 1]) {\n              test.push(latlng[0]);\n            }\n            polygon3 = test;\n          }\n\n          console.log(\"Test: \", polygon3);\n\n          console.log(polygon);\n\n          const equals = this.polygonArrayEquals(polygon3, polygon);\n          console.log(\"equals: \", equals, \" length: \", length);\n          if (equals && length === 1) {\n            this.polygonInformation.deleteTrashcan(polygon);\n\n            this.removeFeatureGroup(featureGroup);\n            console.log(featureGroup.getLayers());\n          } else if (equals && length > 1) {\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\n            latlngs.splice(index, 1);\n            layer.setLatLngs(latlngs);\n            this.removeFeatureGroup(featureGroup);\n            this.addPolygonLayer(layer.toGeoJSON(), false);\n          }\n        });\n      });\n    }\n  }\n  // fine\n  removeAllFeatureGroups() {\n    // console.log(\"removeAllFeatureGroups\", null);\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\n      this.map.removeLayer(featureGroups);\n    });\n\n    this.arrayOfFeatureGroups = [];\n    this.polygonInformation.deletePolygonInformationStorage();\n    this.polygonInformation.reset();\n    this.polygonInformation.updatePolygons();\n  }\n  // fine\n  getDrawMode(): DrawMode {\n    // console.log(\"getDrawMode\", null);\n    return this.drawModeSubject.value;\n  }\n\n  addViken(polygon) {\n    this.addPolygonLayer(polygon, true);\n  }\n\n  // check this\n  addAutoPolygon(geographicBorders: L.LatLng[][][]): void {\n    geographicBorders.forEach(group => {\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\n\n    const polygon2 = this.turfHelper.getMultiPolygon(\n      this.convertToCoords(group)\n    );\n    console.log(polygon2);\n    const polygon = this.getPolygon(polygon2);\n\n    featureGroup.addLayer(polygon);\n    const markerLatlngs = polygon.getLatLngs();\n    console.log(\"markers: \", markerLatlngs);\n    markerLatlngs.forEach(polygon => {\n      polygon.forEach((polyElement, i) => {\n        if (i === 0) {\n          this.addMarker(polyElement, featureGroup);\n        } else {\n          this.addHoleMarker(polyElement, featureGroup);\n          console.log(\"Hull: \", polyElement);\n        }\n      });\n      // this.addMarker(polygon[0], featureGroup);\n      // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\n    });\n\n    this.arrayOfFeatureGroups.push(featureGroup);\n    \n    });\n    this.polygonInformation.createPolygonInformationStorage(\n      this.arrayOfFeatureGroups\n    );\n    this.polygonInformation.activate();\n    this.polygonInformation.setMoveMode();\n    console.log(this.polygonInformation.polygonInformationStorage);\n  }\n\n  // innehåll i if'ar flytta till egna metoder\n  private convertToCoords(latlngs: ILatLng[][]) {\n    const coords = [];\n    console.log(latlngs.length, latlngs);\n    if (latlngs.length > 1 && latlngs.length < 3) {\n      const coordinates = [];\n      console.log(\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\n        latlngs[latlngs.length - 1].length\n      );\n      // tslint:disable-next-line: max-line-length\n      const within = this.turfHelper.isWithin(\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\n        L.GeoJSON.latLngsToCoords(latlngs[0])\n      );\n      if (within) {\n        latlngs.forEach(polygon => {\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\n        });\n      } else {\n        latlngs.forEach(polygon => {\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\n        });\n      }\n      if (coordinates.length >= 1) {\n        coords.push(coordinates);\n      }\n      console.log(\"Within1 \", within);\n    } else if (latlngs.length > 2) {\n      const coordinates = [];\n      for (let index = 1; index < latlngs.length - 1; index++) {\n        const within = this.turfHelper.isWithin(\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\n          L.GeoJSON.latLngsToCoords(latlngs[0])\n        );\n        if (within) {\n          latlngs.forEach(polygon => {\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\n          });\n          coords.push(coordinates);\n        } else {\n          latlngs.forEach(polygon => {\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\n          });\n        }\n      }\n    } else {\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\n    }\n    console.log(coords);\n    return coords;\n  }\n\n  // fine\n  private initPolyDraw() {\n    // console.log(\"initPolyDraw\", null);\n\n    const container: HTMLElement = this.map.getContainer();\n    const drawMode = this.getDrawMode();\n    if (this.config.touchSupport) {\n      container.addEventListener(\"touchstart\", e => {\n        if (drawMode !== DrawMode.Off) {\n          this.mouseDown(e);\n        }\n      });\n\n      container.addEventListener(\"touchend\", e => {\n        if (drawMode !== DrawMode.Off) {\n          this.mouseUpLeave();\n        }\n      });\n\n      container.addEventListener(\"touchmove\", e => {\n        if (drawMode !== DrawMode.Off) {\n          this.mouseMove(e);\n        }\n      });\n    }\n    console.log(\"Map init: \", this.map);\n    console.log(\"Tracer init: \", this.tracer);\n    this.map.addLayer(this.tracer);\n    this.setDrawMode(DrawMode.Off);\n  }\n  // Test L.MouseEvent\n  private mouseDown(event) {\n    console.log(\"mouseDown\", event);\n\n    if (event.originalEvent != null) {\n      this.tracer.setLatLngs([event.latlng]);\n    } else {\n      const latlng = this.map.containerPointToLatLng([\n        event.touches[0].clientX,\n        event.touches[0].clientY\n      ]);\n      this.tracer.setLatLngs([latlng]);\n    }\n    this.startDraw();\n  }\n\n  // TODO event type, create containerPointToLatLng-method\n  private mouseMove(event) {\n    // console.log(\"mouseMove\", event);\n\n    if (event.originalEvent != null) {\n      this.tracer.addLatLng(event.latlng);\n    } else {\n      const latlng = this.map.containerPointToLatLng([\n        event.touches[0].clientX,\n        event.touches[0].clientY\n      ]);\n      this.tracer.addLatLng(latlng);\n    }\n  }\n\n  // fine\n  private mouseUpLeave() {\n    // console.log(\"mouseUpLeave\", null);\n    this.polygonInformation.deletePolygonInformationStorage();\n    // console.log(\"------------------------------Delete trashcans\", null);\n    const geoPos: Feature<\n      Polygon | MultiPolygon\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\n    this.stopDraw();\n    switch (this.getDrawMode()) {\n      case DrawMode.Add:\n        this.addPolygon(geoPos, true);\n        break;\n      case DrawMode.Subtract:\n        this.subtractPolygon(geoPos);\n        break;\n\n      default:\n        break;\n    }\n    this.polygonInformation.createPolygonInformationStorage(\n      this.arrayOfFeatureGroups\n    );\n    // console.log(\"------------------------------create trashcans\", null);\n  }\n  // fine\n  private startDraw() {\n    // console.log(\"startDraw\", null);\n\n    this.drawStartedEvents(true);\n  }\n  // fine\n  private stopDraw() {\n    // console.log(\"stopDraw\", null);\n\n    this.resetTracker();\n    this.drawStartedEvents(false);\n  }\n\n  private onZoomChange(zoomLevel: number): void {\n    // console.log(\"onZoomChange\", zoomLevel);\n\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\n    } else {\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\n      this.polygonInformation.setMoveMode();\n    }\n    this.polygonInformation.saveCurrentState();\n  }\n  // fine\n  private drawStartedEvents(onoff: boolean) {\n    // console.log(\"drawStartedEvents\", onoff);\n\n    const onoroff = onoff ? \"on\" : \"off\";\n\n    this.map[onoroff](\"mousemove\", this.mouseMove, this);\n    this.map[onoroff](\"mouseup\", this.mouseUpLeave, this);\n  }\n  // On hold\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\n    this.subtract(latlngs);\n  }\n  // fine\n  private addPolygon(\n    latlngs: Feature<Polygon | MultiPolygon>,\n    simplify: boolean,\n    noMerge: boolean = false\n  ) {\n    console.log(\n      \"addPolygon\",\n      latlngs,\n      simplify,\n      noMerge,\n      this.kinks,\n      this.config\n    );\n\n    if (\n      this.mergePolygons &&\n      !noMerge &&\n      this.arrayOfFeatureGroups.length > 0 &&\n      !this.kinks\n    ) {\n      this.merge(latlngs);\n    } else {\n      this.addPolygonLayer(latlngs, simplify);\n    }\n  }\n  // fine\n  private addPolygonLayer(\n    latlngs: Feature<Polygon | MultiPolygon>,\n    simplify: boolean\n  ) {\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\n\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\n    console.log(\"AddPolygonLayer: \", latLngs);\n    const polygon = this.getPolygon(latLngs);\n    featureGroup.addLayer(polygon);\n    console.log(polygon);\n    const markerLatlngs = polygon.getLatLngs();\n    markerLatlngs.forEach(polygon => {\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\n        if (i === 0) {\n          this.addMarker(polyElement, featureGroup);\n        } else {\n          this.addHoleMarker(polyElement, featureGroup);\n          console.log(\"Hull: \", polyElement);\n        }\n      });\n      // this.addMarker(polygon[0], featureGroup);\n      // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\n    });\n\n    this.arrayOfFeatureGroups.push(featureGroup);\n    console.log(\"Array: \", this.arrayOfFeatureGroups);\n    this.polygonInformation.activate();\n    this.setDrawMode(DrawMode.Off);\n\n    featureGroup.on(\"click\", e => {\n      this.polygonClicked(e, latLngs);\n    });\n  }\n  // fine\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\n    const newPoint = e.latlng;\n    if (poly.geometry.type === \"MultiPolygon\") {\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\n        newPoint.lng,\n        newPoint.lat\n      ]);\n      this.deletePolygon(this.getLatLngsFromJson(poly));\n      this.addPolygonLayer(newPolygon, false);\n    }\n  }\n  // fine\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\n    console.log(\"getPolygons: \", latlngs);\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\n\n    polygon.setStyle(this.config.polygonOptions);\n    return polygon;\n  }\n  // fine\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\n    console.log(\"merge\", latlngs);\n    const polygonFeature = [];\n    const newArray: L.FeatureGroup[] = [];\n    let polyIntersection = false;\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\n      const featureCollection = featureGroup.toGeoJSON() as any;\n      console.log(\"Merger: \", featureCollection.features[0]);\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\n          const feature = this.turfHelper.getMultiPolygon([element]);\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\n          if (polyIntersection) {\n            newArray.push(featureGroup);\n            polygonFeature.push(feature);\n          }\n        });\n      } else {\n        const feature = this.turfHelper.getTurfPolygon(\n          featureCollection.features[0]\n        );\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\n        if (polyIntersection) {\n          newArray.push(featureGroup);\n          polygonFeature.push(feature);\n        }\n      }\n    });\n    console.log(newArray);\n    if (newArray.length > 0) {\n      this.unionPolygons(newArray, latlngs, polygonFeature);\n    } else {\n      this.addPolygonLayer(latlngs, true);\n    }\n  }\n  // next\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\n    let addHole = latlngs;\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\n      const featureCollection = featureGroup.toGeoJSON() as any;\n      const layer = featureCollection.features[0];\n      const poly = this.getLatLngsFromJson(layer);\n      const feature = this.turfHelper.getTurfPolygon(\n        featureCollection.features[0]\n      );\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\n      this.deletePolygon(poly);\n      this.removeFeatureGroupOnMerge(featureGroup);\n      addHole = newPolygon;\n    });\n\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\n    const coords = this.turfHelper.getCoords(newLatlngs);\n    coords.forEach(value => {\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\n    });\n  }\n  // fine\n  private events(onoff: boolean) {\n    const onoroff = onoff ? \"on\" : \"off\";\n    this.map[onoroff](\"mousedown\", this.mouseDown, this);\n  }\n  // fine, TODO: if special markers\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\n    const menuMarkerIdx = this.getMarkerIndex(\n      latlngs,\n      this.config.markers.markerMenuIcon.position\n    );\n    const deleteMarkerIdx = this.getMarkerIndex(\n      latlngs,\n      this.config.markers.markerDeleteIcon.position\n    );\n\n    latlngs.forEach((latlng, i) => {\n      let iconClasses = this.config.markers.markerIcon.styleClasses;\n      /*   if (i === menuMarkerIdx && this.config.markers.menu) {\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\n      }\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\n      } */\n      const marker = new L.Marker(latlng, {\n        icon: this.createDivIcon(iconClasses),\n        draggable: true,\n        title: i.toString()\n      });\n      FeatureGroup.addLayer(marker).addTo(this.map);\n      // console.log(\"FeatureGroup: \", FeatureGroup);\n      marker.on(\"drag\", e => {\n        this.markerDrag(FeatureGroup);\n      });\n      marker.on(\"dragend\", e => {\n        this.markerDragEnd(FeatureGroup);\n      });\n      if (i === menuMarkerIdx && this.config.markers.menu) {\n        // marker.bindPopup(\n        //   this.getHtmlContent(e => {\n        //     console.log(\"clicked on\", e.target);\n        //   })\n        // );\n        marker.on(\"click\", e => {\n          this.convertToBoundsPolygon(latlngs, true);\n          // this.convertToSimplifiedPolygon(latlngs);\n        });\n      }\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\n        marker.on(\"click\", e => {\n          this.deletePolygon([latlngs]);\n        });\n      }\n    });\n  }\n\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\n    latlngs.forEach((latlng, i) => {\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\n      /*  if (i === 0 && this.config.markers.menu) {\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\n      }\n\n      //TODO- legg til fill icon\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\n      } */\n      const marker = new L.Marker(latlng, {\n        icon: this.createDivIcon(iconClasses),\n        draggable: true,\n        title: i.toString()\n      });\n      FeatureGroup.addLayer(marker).addTo(this.map);\n\n      marker.on(\"drag\", e => {\n        this.markerDrag(FeatureGroup);\n      });\n      marker.on(\"dragend\", e => {\n        this.markerDragEnd(FeatureGroup);\n      });\n      /*   if (i === 0 && this.config.markers.menu) {\n        marker.bindPopup(this.getHtmlContent((e) => {\n          console.log(\"clicked on\", e.target);\n        }));\n        // marker.on(\"click\", e => {\n        //   this.toggleMarkerMenu();\n        // })\n      }\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\n        marker.on(\"click\", e => {\n          this.deletePolygon([latlngs]);\n        });\n      } */\n    });\n  }\n  private createDivIcon(classNames: string[]): L.DivIcon {\n    const classes = classNames.join(\" \");\n    const icon = L.divIcon({ className: classes });\n    return icon;\n  }\n  // TODO: Cleanup\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\n    const newPos = [];\n    let testarray = [];\n    let hole = [];\n    const layerLength = FeatureGroup.getLayers() as any;\n    const posarrays = layerLength[0].getLatLngs();\n    console.log(posarrays);\n    console.log(\"markerdrag: \", layerLength);\n    let length = 0;\n    if (posarrays.length > 1) {\n      for (let index = 0; index < posarrays.length; index++) {\n        testarray = [];\n        hole = [];\n        console.log(\"Posisjoner: \", posarrays[index]);\n        if (index === 0) {\n          if (posarrays[0].length > 1) {\n            for (let i = 0; index < posarrays[0].length; i++) {\n              console.log(\"Posisjoner 2: \", posarrays[index][i]);\n\n              for (let j = 0; j < posarrays[0][i].length; j++) {\n                testarray.push(layerLength[j + 1].getLatLng());\n              }\n              hole.push(testarray);\n            }\n          } else {\n            for (let j = 0; j < posarrays[0][0].length; j++) {\n              testarray.push(layerLength[j + 1].getLatLng());\n            }\n            hole.push(testarray);\n          }\n          console.log(\"Hole: \", hole);\n          newPos.push(hole);\n        } else {\n          length += posarrays[index - 1][0].length;\n          console.log(\"STart index: \", length);\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\n            testarray.push((layerLength[j + 1] as any).getLatLng());\n          }\n          hole.push(testarray);\n          newPos.push(hole);\n        }\n      }\n    } else {\n      // testarray = []\n      hole = [];\n      let length2 = 0;\n      for (let index = 0; index < posarrays[0].length; index++) {\n        testarray = [];\n        console.log(\"Polygon drag: \", posarrays[0][index]);\n        if (index === 0) {\n          if (posarrays[0][index].length > 1) {\n            for (let j = 0; j < posarrays[0][index].length; j++) {\n              testarray.push(layerLength[j + 1].getLatLng());\n            }\n          } else {\n            for (let j = 0; j < posarrays[0][0].length; j++) {\n              testarray.push(layerLength[j + 1].getLatLng());\n            }\n          }\n        } else {\n          length2 += posarrays[0][index - 1].length;\n\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\n            testarray.push(layerLength[j + 1].getLatLng());\n          }\n        }\n        hole.push(testarray);\n      }\n      newPos.push(hole);\n      console.log(\"Hole 2: \", hole);\n    }\n    console.log(\"Nye posisjoner: \", newPos);\n    layerLength[0].setLatLngs(newPos);\n  }\n  // check this\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\n    this.polygonInformation.deletePolygonInformationStorage();\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\n    console.log(\n      \"Markerdragend polygon: \",\n      featureCollection.features[0].geometry.coordinates\n    );\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\n        const feature = this.turfHelper.getMultiPolygon([element]);\n\n        console.log(\"Markerdragend: \", feature);\n        if (this.turfHelper.hasKinks(feature)) {\n          this.kinks = true;\n          const unkink = this.turfHelper.getKinks(feature);\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\n          this.removeFeatureGroup(FeatureGroup);\n          console.log(\"Unkink: \", unkink);\n          unkink.forEach(polygon => {\n            this.addPolygon(\n              this.turfHelper.getTurfPolygon(polygon),\n              false,\n              true\n            );\n          });\n        } else {\n          this.kinks = false;\n          this.addPolygon(feature, false);\n        }\n      });\n    } else {\n      const feature = this.turfHelper.getMultiPolygon(\n        featureCollection.features[0].geometry.coordinates\n      );\n      console.log(\"Markerdragend: \", feature);\n      if (this.turfHelper.hasKinks(feature)) {\n        this.kinks = true;\n        const unkink = this.turfHelper.getKinks(feature);\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\n        this.removeFeatureGroup(FeatureGroup);\n        console.log(\"Unkink: \", unkink);\n        let testCoord = []\n        unkink.forEach(polygon => {\n          this.addPolygon(\n            this.turfHelper.getTurfPolygon(polygon),\n            false,\n            true\n          );\n        });\n        // this.addPolygon(this.turfHelper.getMultiPolygon(testCoord), false, true);\n      } else {\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\n        this.kinks = false;\n        this.addPolygon(feature, false);\n      }\n    }\n    this.polygonInformation.createPolygonInformationStorage(\n      this.arrayOfFeatureGroups\n    );\n  }\n  // fine, check the returned type\n  private getLatLngsFromJson(\n    feature: Feature<Polygon | MultiPolygon>\n  ): ILatLng[][] {\n    console.log(\"getLatLngsFromJson: \", feature);\n    let coord;\n    if (feature) {\n      if (\n        feature.geometry.coordinates.length > 1 &&\n        feature.geometry.type === \"MultiPolygon\"\n      ) {\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\n      } else if (\n        feature.geometry.coordinates[0].length > 1 &&\n        feature.geometry.type === \"Polygon\"\n      ) {\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\n      } else {\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\n      }\n    }\n\n    return coord;\n  }\n\n  // fine\n  private unionPolygons(\n    layers,\n    latlngs: Feature<Polygon | MultiPolygon>,\n    polygonFeature\n  ) {\n    console.log(\"unionPolygons\", layers, latlngs, polygonFeature);\n\n    let addNew = latlngs;\n    layers.forEach((featureGroup, i) => {\n      const featureCollection = featureGroup.toGeoJSON();\n      const layer = featureCollection.features[0];\n      const poly = this.getLatLngsFromJson(layer);\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\n      // Needs a cleanup for the new version\n      this.deletePolygonOnMerge(poly);\n      this.removeFeatureGroup(featureGroup);\n\n      addNew = union;\n    });\n\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\n    this.addPolygonLayer(newLatlngs, true);\n  }\n  // fine\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\n    console.log(\"removeFeatureGroup\", featureGroup);\n\n    featureGroup.clearLayers();\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\n      featureGroups => featureGroups !== featureGroup\n    );\n    // this.updatePolygons();\n    this.map.removeLayer(featureGroup);\n  }\n  // fine until refactoring\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\n    console.log(\"removeFeatureGroupOnMerge\", featureGroup);\n\n    const newArray = [];\n    if (featureGroup.getLayers()[0]) {\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\n        if (\n          v.polygon.toString() !== polygon[0].toString() &&\n          v.polygon[0].toString() === polygon[0][0].toString()\n        ) {\n          v.polygon = polygon;\n          newArray.push(v);\n        }\n\n        if (\n          v.polygon.toString() !== polygon[0].toString() &&\n          v.polygon[0].toString() !== polygon[0][0].toString()\n        ) {\n          newArray.push(v);\n        }\n      });\n      featureGroup.clearLayers();\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\n        featureGroups => featureGroups !== featureGroup\n      );\n\n      this.map.removeLayer(featureGroup);\n    }\n  }\n  // fine until refactoring\n  private deletePolygonOnMerge(polygon) {\n    console.log(\"deletePolygonOnMerge\", polygon);\n    let polygon2 = [];\n    if (this.arrayOfFeatureGroups.length > 0) {\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\n        const layer = featureGroup.getLayers()[0] as any;\n        const latlngs = layer.getLatLngs()[0];\n        polygon2 = [...latlngs[0]];\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\n          polygon2.push(latlngs[0][0]);\n        }\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\n\n        if (equals) {\n          console.log(\"EQUALS\", polygon);\n          this.removeFeatureGroupOnMerge(featureGroup);\n          this.deletePolygon(polygon);\n          this.polygonInformation.deleteTrashcan(polygon);\n          // this.updatePolygons();\n        }\n      });\n    }\n  }\n\n  // TODO - legge et annet sted\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\n    return poly1.toString() === poly2.toString();\n  }\n  // TODO - legge et annet sted\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\n    // console.log(\"polygonArrayEquals\", poly1, poly2);\n\n    if (poly1[0][0]) {\n      if (!poly1[0][0].equals(poly2[0][0])) {\n        return false;\n      }\n    } else {\n      if (!poly1[0].equals(poly2[0])) {\n        return false;\n      }\n    }\n    if (poly1.length !== poly2.length) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  // fine\n  private setLeafletMapEvents(\n    enableDragging: boolean,\n    enableDoubleClickZoom: boolean,\n    enableScrollWheelZoom: boolean\n  ) {\n    // console.log(\"setLeafletMapEvents\", enableDragging, enableDoubleClickZoom, enableScrollWheelZoom);\n\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\n    enableDoubleClickZoom\n      ? this.map.doubleClickZoom.enable()\n      : this.map.doubleClickZoom.disable();\n    enableScrollWheelZoom\n      ? this.map.scrollWheelZoom.enable()\n      : this.map.scrollWheelZoom.disable();\n  }\n  // fine\n  setDrawMode(mode: DrawMode) {\n    console.log(\"setDrawMode\", this.map);\n    this.drawModeSubject.next(mode);\n    if (!!this.map) {\n      let isActiveDrawMode = true;\n      switch (mode) {\n        case DrawMode.Off:\n          L.DomUtil.removeClass(\n            this.map.getContainer(),\n            \"crosshair-cursor-enabled\"\n          );\n          this.events(false);\n          this.stopDraw();\n          this.tracer.setStyle({\n            color: \"\"\n          });\n          this.setLeafletMapEvents(true, true, true);\n          isActiveDrawMode = false;\n          break;\n        case DrawMode.Add:\n          L.DomUtil.addClass(\n            this.map.getContainer(),\n            \"crosshair-cursor-enabled\"\n          );\n          this.events(true);\n          this.tracer.setStyle({\n            color: defaultConfig.polyLineOptions.color\n          });\n          this.setLeafletMapEvents(false, false, false);\n          break;\n        case DrawMode.Subtract:\n          L.DomUtil.addClass(\n            this.map.getContainer(),\n            \"crosshair-cursor-enabled\"\n          );\n          this.events(true);\n          this.tracer.setStyle({\n            color: \"#D9460F\"\n          });\n          this.setLeafletMapEvents(false, false, false);\n          break;\n      }\n\n      if (isActiveDrawMode) {\n        this.polygonInformation.setFreeDrawMode();\n      } else {\n        this.polygonInformation.setMoveMode();\n      }\n    }\n  }\n\n  modeChange(mode: DrawMode): void {\n    this.setDrawMode(mode);\n    this.polygonInformation.saveCurrentState();\n  }\n  // remove, use modeChange\n  drawModeClick(): void {\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\n      this.polygonInformation.setMoveMode();\n      this.setDrawMode(DrawMode.Off);\n    } else {\n      this.polygonInformation.setFreeDrawMode();\n      this.setDrawMode(DrawMode.Add);\n    }\n    this.polygonInformation.saveCurrentState();\n  }\n  // remove, use modeChange\n  freedrawMenuClick(): void {\n    this.setDrawMode(DrawMode.Add);\n    this.polygonInformation.activate();\n    this.polygonInformation.saveCurrentState();\n  }\n\n  // remove, use modeChange\n  subtractClick(): void {\n    this.setDrawMode(DrawMode.Subtract);\n    this.polygonInformation.saveCurrentState();\n  }\n  // fine\n  private resetTracker() {\n    this.tracer.setLatLngs([[0, 0]]);\n  }\n\n  toggleMarkerMenu(): void {\n    alert(\"open menu\");\n  }\n  private getHtmlContent(callBack: Function): HTMLElement {\n    const comp = this.popupGenerator.generateAlterPopup();\n    comp.instance.bboxClicked.subscribe(e => {\n      console.log(\"bbox clicked\", e);\n      callBack(e);\n    });\n    comp.instance.simplyfiClicked.subscribe(e => {\n      console.log(\"simplyfi clicked\", e);\n      callBack(e);\n    });\n    return comp.location.nativeElement;\n  }\n  private convertToBoundsPolygon(\n    latlngs: ILatLng[],\n    addMidpointMarkers: boolean = false\n  ) {\n    this.deletePolygon([latlngs]);\n    const polygon = this.turfHelper.getMultiPolygon(\n      this.convertToCoords([latlngs])\n    );\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(\n      polygon,\n      addMidpointMarkers\n    );\n\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\n  }\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\n    this.deletePolygon([latlngs]);\n    const newPolygon = this.turfHelper.getMultiPolygon(\n      this.convertToCoords([latlngs])\n    );\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\n  }\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\n      latlngs,\n      Math.sqrt(2) / 2\n    );\n    const compass = new Compass(\n      bounds.getSouth(),\n      bounds.getWest(),\n      bounds.getNorth(),\n      bounds.getEast()\n    );\n    const compassDirection = compass.getDirection(position);\n    const latLngPoint: ILatLng = {\n      lat: compassDirection.lat,\n      lng: compassDirection.lng\n    };\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\n      targetPoint,\n      fc as any\n    );\n\n    return nearestPointIdx;\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\nimport { PolyDrawService } from './polydraw.service';\nimport { PolygonInformationService } from './polygon-information.service';\nimport { PolyStateService } from './map-state.service';\n\n@NgModule({\n  declarations: [ AlterPolygonComponent],\n  imports: [],\n  providers: [PolyDrawService, PolygonInformationService, PolyStateService],\n  exports: [AlterPolygonComponent ],\n  entryComponents: [AlterPolygonComponent]\n})\nexport class MyLibModule {}\n"]}