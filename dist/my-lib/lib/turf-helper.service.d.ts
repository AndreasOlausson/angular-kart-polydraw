import * as turf from '@turf/turf';
import { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';
import { ICompass } from './interface';
import { ILatLng } from './polygon-helpers';
import * as i0 from "@angular/core";
export declare class TurfHelperService {
    private simplifyTolerance;
    constructor();
    union(poly1: any, poly2: any): Feature<Polygon | MultiPolygon>;
    turfConcaveman(feature: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon>;
    getSimplified(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon>;
    getTurfPolygon(polygon: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon>;
    getMultiPolygon(polygonArray: Position[][][]): Feature<Polygon | MultiPolygon>;
    getKinks(feature: Feature<Polygon | MultiPolygon>): any[];
    getCoords(feature: Feature<Polygon | MultiPolygon>): any[];
    hasKinks(feature: Feature<Polygon | MultiPolygon>): boolean;
    polygonIntersect(polygon: Feature<Polygon | MultiPolygon>, latlngs: Feature<Polygon | MultiPolygon>): boolean;
    getIntersection(poly1: any, poly2: any): Feature;
    getDistance(point1: any, point2: any): number;
    isWithin(polygon1: Position[], polygon2: Position[]): boolean;
    equalPolygons(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): void;
    convertToBoundingBoxPolygon(polygon: Feature<Polygon | MultiPolygon>, addMidpointMarkers?: boolean): Feature<Polygon>;
    polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon>;
    injectPointToPolygon(polygon: any, point: any): any;
    polygonDifference(polygon1: Feature<Polygon | MultiPolygon>, polygon2: Feature<Polygon | MultiPolygon>): Feature<Polygon | MultiPolygon>;
    getBoundingBoxCompassPosition(polygon: any, MarkerPosition: ICompass, useOffset: any, offsetDirection: any): any;
    private getBoundingBoxCompass;
    getNearestPointIndex(targetPoint: turf.Coord, points: turf.FeatureCollection<turf.Point>): number;
    getCoord(point: ILatLng): turf.Coord;
    getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection;
    static ɵfac: i0.ɵɵFactoryDeclaration<TurfHelperService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TurfHelperService>;
}
