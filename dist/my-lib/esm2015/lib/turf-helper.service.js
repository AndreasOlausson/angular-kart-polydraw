import { Injectable } from '@angular/core';
import * as turf from '@turf/turf';
import concaveman from 'concaveman';
import { Compass } from './utils';
import * as i0 from "@angular/core";
export class TurfHelperService {
    constructor() {
        this.simplifyTolerance = { tolerance: 0.0001, highQuality: false };
    }
    union(poly1, poly2) {
        const union = turf.union(poly1, poly2);
        return this.getTurfPolygon(union);
    }
    turfConcaveman(feature) {
        const points = turf.explode(feature);
        const coordinates = points.features.map(f => f.geometry.coordinates);
        return turf.multiPolygon([[concaveman(coordinates)]]);
    }
    //TODO add some sort of dynamic tolerance
    getSimplified(polygon) {
        const tolerance = this.simplifyTolerance;
        const simplified = turf.simplify(polygon, tolerance);
        return simplified;
    }
    getTurfPolygon(polygon) {
        let turfPolygon;
        // if (polygon.geometry)
        if (polygon.geometry.type === 'Polygon') {
            turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);
        }
        else {
            turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);
        }
        return turfPolygon;
    }
    getMultiPolygon(polygonArray) {
        return turf.multiPolygon(polygonArray);
    }
    getKinks(feature) {
        const unkink = turf.unkinkPolygon(feature);
        const coordinates = [];
        turf.featureEach(unkink, current => {
            coordinates.push(current);
        });
        return coordinates;
    }
    getCoords(feature) {
        return turf.getCoords(feature);
    }
    hasKinks(feature) {
        const kinks = turf.kinks(feature);
        return kinks.features.length > 0;
    }
    polygonIntersect(polygon, latlngs) {
        // const oldPolygon = polygon.toGeoJSON();
        const poly = [];
        const poly2 = [];
        const latlngsCoords = turf.getCoords(latlngs);
        latlngsCoords.forEach(element => {
            const feat = { type: 'Polygon', coordinates: [element[0]] };
            poly.push(feat);
        });
        const polygonCoords = turf.getCoords(polygon);
        polygonCoords.forEach(element => {
            const feat = { type: 'Polygon', coordinates: [element[0]] };
            poly2.push(feat);
        });
        let intersect = false;
        loop1: for (let i = 0; i < poly.length; i++) {
            if (this.getKinks(poly[i]).length < 2) {
                for (let j = 0; j < poly2.length; j++) {
                    if (this.getKinks(poly2[j]).length < 2) {
                        const test = turf.intersect(poly[i], poly2[j]);
                        if ((test === null || test === void 0 ? void 0 : test.geometry.type) === 'Point') {
                            intersect = !(turf.booleanPointInPolygon(test, poly[i]) &&
                                turf.booleanPointInPolygon(test, poly2[j]));
                        }
                        else if ((test === null || test === void 0 ? void 0 : test.geometry.type) === 'Polygon') {
                            intersect = !!turf.intersect(poly[i], poly2[j]);
                        }
                        if (intersect) {
                            break loop1;
                        }
                    }
                }
            }
        }
        return intersect;
    }
    getIntersection(poly1, poly2) {
        return turf.intersect(poly1, poly2);
    }
    getDistance(point1, point2) {
        return turf.distance(point1, point2);
    }
    isWithin(polygon1, polygon2) {
        return turf.booleanWithin(turf.polygon([polygon1]), turf.polygon([polygon2]));
    }
    equalPolygons(polygon1, polygon2) {
    }
    //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)
    convertToBoundingBoxPolygon(polygon, addMidpointMarkers = false) {
        const bbox = turf.bbox(polygon.geometry);
        const bboxPolygon = turf.bboxPolygon(bbox);
        const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);
        const compassPositions = compass.getPositions();
        bboxPolygon.geometry.coordinates = [];
        bboxPolygon.geometry.coordinates = [compassPositions];
        return bboxPolygon;
    }
    polygonToMultiPolygon(poly) {
        const multi = turf.multiPolygon([poly.geometry.coordinates]);
        return multi;
    }
    //TODO -cleanup
    injectPointToPolygon(polygon, point) {
        const coords = turf.getCoords(polygon);
        let newPolygon;
        if (coords.length < 2) {
            const polygonPoints = turf.explode(polygon);
            const index = turf.nearestPoint(point, polygonPoints).properties
                .featureIndex;
            const test = turf.coordReduce(polygonPoints, function (accumulator, oldPoint, i) {
                if (index === i) {
                    return [...accumulator, oldPoint, point];
                }
                return [...accumulator, oldPoint];
            }, []);
            newPolygon = turf.multiPolygon([[test]]);
        }
        else {
            const pos = [];
            let coordinates = [];
            coords.forEach(element => {
                const polygon = turf.polygon(element);
                // turf.booleanPointInPolygon(point, polygon)
                if (turf.booleanPointInPolygon(point, polygon)) {
                    const polygonPoints = turf.explode(polygon);
                    const index = turf.nearestPoint(point, polygonPoints).properties
                        .featureIndex;
                    coordinates = turf.coordReduce(polygonPoints, function (accumulator, oldPoint, i) {
                        if (index === i) {
                            return [...accumulator, oldPoint, point];
                        }
                        return [...accumulator, oldPoint];
                    }, []);
                }
                else {
                    pos.push(element);
                }
            });
            pos.push([coordinates]);
            newPolygon = turf.multiPolygon(pos);
        }
        return newPolygon;
    }
    polygonDifference(polygon1, polygon2) {
        const diff = turf.difference(polygon1, polygon2);
        return this.getTurfPolygon(diff);
    }
    getBoundingBoxCompassPosition(polygon, MarkerPosition, useOffset, offsetDirection) {
        const p = this.getMultiPolygon(polygon);
        const compass = this.getBoundingBoxCompass(polygon);
        const polygonPoints = turf.explode(polygon);
        const coord = this.getCoord(compass.direction.North);
        const nearestPoint = turf.nearestPoint(coord, polygonPoints);
        return null;
    }
    getBoundingBoxCompass(polygon) {
        const p = this.getMultiPolygon(polygon);
        const centerOfMass = turf.centerOfMass(p);
        const b = turf.bbox(p);
        const minX = b[0];
        const minY = b[1];
        const maxX = b[2];
        const maxY = b[3];
        const compass = new Compass(minX, minY, maxX, maxY);
        // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];
        return compass;
    }
    getNearestPointIndex(targetPoint, points) {
        const index = turf.nearestPoint(targetPoint, points).properties.featureIndex;
        return index;
    }
    getCoord(point) {
        const coord = turf.getCoord([point.lng, point.lat]);
        return coord;
    }
    getFeaturePointCollection(points) {
        const pts = [];
        points.forEach(v => {
            const p = turf.point([v.lng, v.lat], {});
            pts.push(p);
        });
        const fc = turf.featureCollection(pts);
        return fc;
    }
}
TurfHelperService.ɵfac = function TurfHelperService_Factory(t) { return new (t || TurfHelperService)(); };
TurfHelperService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TurfHelperService, factory: TurfHelperService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TurfHelperService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,