import * as L from "leaflet";
import * as turf from "@turf/turf";
export class PolygonUtil {
    static getCenter(polygon) {
        const pi = Math.PI;
        let x = 0;
        let y = 0;
        let z = 0;
        polygon.forEach(v => {
            let lat1 = v.lat;
            let lon1 = v.lng;
            lat1 = lat1 * pi / 180;
            lon1 = lon1 * pi / 180;
            x += Math.cos(lat1) * Math.cos(lon1);
            y += Math.cos(lat1) * Math.sin(lon1);
            z += Math.sin(lat1);
        });
        let lng = Math.atan2(y, x);
        const hyp = Math.sqrt(x * x + y * y);
        let lat = Math.atan2(z, hyp);
        lat = lat * 180 / pi;
        lng = lng * 180 / pi;
        const center = { lat: lat, lng: lng };
        return center;
    }
    static getSouthWest(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getNorthWest();
    }
    static getNorthEast(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getNorthEast();
    }
    static getNorthWest(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getNorthWest();
    }
    static getSouthEast(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getSouthEast();
    }
    static getNorth(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getNorth();
    }
    static getSouth(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getSouth();
    }
    static getWest(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getWest();
    }
    static getEast(polygon) {
        const bounds = this.getBounds(polygon);
        return bounds.getEast();
    }
    static getSqmArea(polygon) {
        const poly = new L.Polygon(polygon);
        const geoJsonPoly = poly.toGeoJSON();
        const area = turf.area((geoJsonPoly));
        return area;
    }
    static getPerimeter(polygon) {
        const poly = new L.Polygon(polygon);
        const geoJsonPoly = poly.toGeoJSON();
        const perimeter = turf.length((geoJsonPoly), { units: "meters" });
        return perimeter;
    }
    static getPolygonChecksum(polygon) {
        const uniqueLatLngs = polygon.filter((v, i, a) => {
            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;
        });
        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);
    }
    static getMidPoint(point1, point2) {
        const p1 = turf.point([point1.lng, point1.lat]);
        const p2 = turf.point([point2.lng, point2.lat]);
        const midpoint = turf.midpoint(p1, p2);
        const returnPoint = {
            lat: midpoint.geometry.coordinates[1],
            lng: midpoint.geometry.coordinates[0]
        };
        return returnPoint;
    }
    static getBounds(polygon) {
        const tmpLatLng = [];
        polygon.forEach(ll => {
            if (isNaN(ll.lat) || isNaN(ll.lng)) {
            }
            tmpLatLng.push(ll);
        });
        const polyLine = new L.Polyline(tmpLatLng);
        const bounds = polyLine.getBounds();
        return bounds;
    }
}
//export class FreedrawSubtract extends L.FreeDraw {
//    constructor() {
//        //this will become L.FreeDraw
//        super(null);
//        //call methods in freedraw by this
//        const foo = this.size();
//        this.consoleLogNumberOfPolygons(foo);
//    }
//    consoleLogNumberOfPolygons(size: number): void {
//        console.log("Number of polygons: ", size);
//    }
//}
//# sourceMappingURL=data:application/json;base64,