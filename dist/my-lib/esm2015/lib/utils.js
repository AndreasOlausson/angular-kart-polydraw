import * as L from "leaflet";
import { MarkerPosition } from "./enums";
export class PolyDrawUtil {
    static getBounds(polygon, padding = 0) {
        const tmpLatLng = [];
        polygon.forEach(ll => {
            if (isNaN(ll.lat) || isNaN(ll.lng)) {
            }
            tmpLatLng.push(ll);
        });
        const polyLine = new L.Polyline(tmpLatLng);
        const bounds = polyLine.getBounds();
        if (padding !== 0) {
            return bounds.pad(padding);
        }
        return bounds;
    }
}
//TODO make compass ILatLng
export class Compass {
    constructor(minLat = 0, minLng = 0, maxLat = 0, maxLng = 0) {
        this.direction = {
            // BoundingBoxCenter: { lat: 0, lng: 0 },
            // CenterOfMass: { lat: 0, lng: 0 },
            East: { lat: 0, lng: 0 },
            North: { lat: 0, lng: 0 },
            NorthEast: { lat: 0, lng: 0 },
            NorthWest: { lat: 0, lng: 0 },
            South: { lat: 0, lng: 0 },
            SouthEast: { lat: 0, lng: 0 },
            SouthWest: { lat: 0, lng: 0 },
            West: { lat: 0, lng: 0 }
        };
        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };
        this.direction.NorthEast = { lat: maxLat, lng: maxLng };
        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };
        this.direction.SouthEast = { lat: minLat, lng: maxLng };
        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };
        this.direction.SouthWest = { lat: minLat, lng: minLng };
        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };
        this.direction.NorthWest = { lat: maxLat, lng: minLng };
        // this.direction.CenterOfMass = { lat: 0, lng: 0 };
        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};
    }
    //TODO default return.
    getDirection(direction) {
        switch (direction) {
            // case MarkerPosition.CenterOfMass:
            //     return this.direction.CenterOfMass;
            case MarkerPosition.North:
                return this.direction.North;
            case MarkerPosition.NorthEast:
                return this.direction.NorthEast;
            case MarkerPosition.East:
                return this.direction.East;
            case MarkerPosition.SouthEast:
                return this.direction.SouthEast;
            case MarkerPosition.South:
                return this.direction.South;
            case MarkerPosition.SouthWest:
                return this.direction.SouthWest;
            case MarkerPosition.West:
                return this.direction.West;
            case MarkerPosition.NorthWest:
                return this.direction.NorthWest;
            // case MarkerPosition.BoundingBoxCenter:
            //     return this.direction.BoundingBoxCenter;
            default:
                return this.direction.North;
        }
    }
    //TODO startNode, go clockwise or not
    getPositions(startNode = MarkerPosition.SouthWest, clockwise = false, addClosingNode = true) {
        let positions = [];
        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);
        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);
        positions.push([this.direction.South.lng, this.direction.South.lat]);
        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);
        positions.push([this.direction.East.lng, this.direction.East.lat]);
        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);
        positions.push([this.direction.North.lng, this.direction.North.lat]);
        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);
        positions.push([this.direction.West.lng, this.direction.West.lat]);
        if (addClosingNode) {
            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);
        }
        return positions;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9teS1saWIvIiwic291cmNlcyI6WyJsaWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxLQUFLLENBQUMsTUFBTSxTQUFTLENBQUM7QUFFN0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV6QyxNQUFNLE9BQU8sWUFBWTtJQUNyQixNQUFNLENBQUMsU0FBUyxDQUFDLE9BQWtCLEVBQUUsVUFBa0IsQ0FBQztRQUNwRCxNQUFNLFNBQVMsR0FBZSxFQUFFLENBQUM7UUFDakMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNqQixJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTthQUNuQztZQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBYyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLFFBQVEsR0FBZSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3BDLElBQUksT0FBTyxLQUFLLENBQUMsRUFBRTtZQUNmLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM5QjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUNELDJCQUEyQjtBQUMzQixNQUFNLE9BQU8sT0FBTztJQWVoQixZQUFZLFNBQWlCLENBQUMsRUFBRSxTQUFpQixDQUFDLEVBQUUsU0FBaUIsQ0FBQyxFQUFFLFNBQWlCLENBQUM7UUFibkYsY0FBUyxHQUFhO1lBQ3pCLHlDQUF5QztZQUN6QyxvQ0FBb0M7WUFDcEMsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1lBQ3hCLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtZQUN6QixTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDN0IsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1lBQzdCLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtZQUN6QixTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDN0IsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1lBQzdCLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtTQUMzQixDQUFDO1FBSUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNuRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ3hELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFDbEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUN4RCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFN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RyxDQUFDLENBQUMsQ0FBQztRQUNuRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0UsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3RSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxjQUFjLEVBQUU7WUFDaEIsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2hGO1FBSUQsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbXBhc3MgfSBmcm9tIFwiLi9pbnRlcmZhY2VcIjtcclxuaW1wb3J0ICogYXMgTCBmcm9tIFwibGVhZmxldFwiO1xyXG5pbXBvcnQgeyBJTGF0TG5nIH0gZnJvbSBcIi4vcG9seWdvbi1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IE1hcmtlclBvc2l0aW9uIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb2x5RHJhd1V0aWwge1xyXG4gICAgc3RhdGljIGdldEJvdW5kcyhwb2x5Z29uOiBJTGF0TG5nW10sIHBhZGRpbmc6IG51bWJlciA9IDApOiBMLkxhdExuZ0JvdW5kcyB7XHJcbiAgICAgICAgY29uc3QgdG1wTGF0TG5nOiBMLkxhdExuZ1tdID0gW107XHJcbiAgICAgICAgcG9seWdvbi5mb3JFYWNoKGxsID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKGxsLmxhdCkgfHwgaXNOYU4obGwubG5nKSkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRtcExhdExuZy5wdXNoKGxsIGFzIEwuTGF0TG5nKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwb2x5TGluZTogTC5Qb2x5bGluZSA9IG5ldyBMLlBvbHlsaW5lKHRtcExhdExuZyk7XHJcbiAgICAgICAgY29uc3QgYm91bmRzID0gcG9seUxpbmUuZ2V0Qm91bmRzKCk7XHJcbiAgICAgICAgaWYgKHBhZGRpbmcgIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJvdW5kcy5wYWQocGFkZGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBib3VuZHM7XHJcbiAgICB9XHJcbn1cclxuLy9UT0RPIG1ha2UgY29tcGFzcyBJTGF0TG5nXHJcbmV4cG9ydCBjbGFzcyBDb21wYXNzIHtcclxuXHJcbiAgICBwdWJsaWMgZGlyZWN0aW9uOiBJQ29tcGFzcyA9IHtcclxuICAgICAgICAvLyBCb3VuZGluZ0JveENlbnRlcjogeyBsYXQ6IDAsIGxuZzogMCB9LFxyXG4gICAgICAgIC8vIENlbnRlck9mTWFzczogeyBsYXQ6IDAsIGxuZzogMCB9LFxyXG4gICAgICAgIEVhc3Q6IHsgbGF0OiAwLCBsbmc6IDAgfSxcclxuICAgICAgICBOb3J0aDogeyBsYXQ6IDAsIGxuZzogMCB9LFxyXG4gICAgICAgIE5vcnRoRWFzdDogeyBsYXQ6IDAsIGxuZzogMCB9LFxyXG4gICAgICAgIE5vcnRoV2VzdDogeyBsYXQ6IDAsIGxuZzogMCB9LFxyXG4gICAgICAgIFNvdXRoOiB7IGxhdDogMCwgbG5nOiAwIH0sXHJcbiAgICAgICAgU291dGhFYXN0OiB7IGxhdDogMCwgbG5nOiAwIH0sXHJcbiAgICAgICAgU291dGhXZXN0OiB7IGxhdDogMCwgbG5nOiAwIH0sXHJcbiAgICAgICAgV2VzdDogeyBsYXQ6IDAsIGxuZzogMCB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1pbkxhdDogbnVtYmVyID0gMCwgbWluTG5nOiBudW1iZXIgPSAwLCBtYXhMYXQ6IG51bWJlciA9IDAsIG1heExuZzogbnVtYmVyID0gMCkge1xyXG5cclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi5Ob3J0aCA9IHsgbGF0OiBtYXhMYXQsIGxuZzogKG1pbkxuZyArIG1heExuZykgLyAyIH07XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24uTm9ydGhFYXN0ID0geyBsYXQ6IG1heExhdCwgbG5nOiBtYXhMbmcgfTtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi5FYXN0ID0geyBsYXQ6IChtaW5MYXQgKyBtYXhMYXQpIC8gMiwgbG5nOiBtYXhMbmcgfTtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi5Tb3V0aEVhc3QgPSB7IGxhdDogbWluTGF0LCBsbmc6IG1heExuZyB9O1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uLlNvdXRoID0geyBsYXQ6IG1pbkxhdCwgbG5nOiAobWluTG5nICsgbWF4TG5nKSAvIDIgfTtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbi5Tb3V0aFdlc3QgPSB7IGxhdDogbWluTGF0LCBsbmc6IG1pbkxuZyB9O1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uLldlc3QgPSB7IGxhdDogKG1pbkxhdCArIG1heExhdCkgLyAyLCBsbmc6IG1pbkxuZyB9O1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uLk5vcnRoV2VzdCA9IHsgbGF0OiBtYXhMYXQsIGxuZzogbWluTG5nIH07XHJcbiAgICAgICAgLy8gdGhpcy5kaXJlY3Rpb24uQ2VudGVyT2ZNYXNzID0geyBsYXQ6IDAsIGxuZzogMCB9O1xyXG4gICAgICAgIC8vIHRoaXMuZGlyZWN0aW9uLkJvdW5kaW5nQm94Q2VudGVyID0ge2xhdDogKG1pbkxhdCArIG1heExhdCkgLyAyLCBsbmc6IChtaW5MbmcgKyBtYXhMbmcpIC8gMn07XHJcbiAgICB9XHJcbiAgICAvL1RPRE8gZGVmYXVsdCByZXR1cm4uXHJcbiAgICBnZXREaXJlY3Rpb24oZGlyZWN0aW9uOiBNYXJrZXJQb3NpdGlvbikge1xyXG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIGNhc2UgTWFya2VyUG9zaXRpb24uQ2VudGVyT2ZNYXNzOlxyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uLkNlbnRlck9mTWFzcztcclxuICAgICAgICAgICAgY2FzZSBNYXJrZXJQb3NpdGlvbi5Ob3J0aDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbi5Ob3J0aDtcclxuICAgICAgICAgICAgY2FzZSBNYXJrZXJQb3NpdGlvbi5Ob3J0aEVhc3Q6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24uTm9ydGhFYXN0O1xyXG4gICAgICAgICAgICBjYXNlIE1hcmtlclBvc2l0aW9uLkVhc3Q6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24uRWFzdDtcclxuICAgICAgICAgICAgY2FzZSBNYXJrZXJQb3NpdGlvbi5Tb3V0aEVhc3Q6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24uU291dGhFYXN0O1xyXG4gICAgICAgICAgICBjYXNlIE1hcmtlclBvc2l0aW9uLlNvdXRoOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uLlNvdXRoO1xyXG4gICAgICAgICAgICBjYXNlIE1hcmtlclBvc2l0aW9uLlNvdXRoV2VzdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbi5Tb3V0aFdlc3Q7XHJcbiAgICAgICAgICAgIGNhc2UgTWFya2VyUG9zaXRpb24uV2VzdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbi5XZXN0O1xyXG4gICAgICAgICAgICBjYXNlIE1hcmtlclBvc2l0aW9uLk5vcnRoV2VzdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbi5Ob3J0aFdlc3Q7XHJcbiAgICAgICAgICAgIC8vIGNhc2UgTWFya2VyUG9zaXRpb24uQm91bmRpbmdCb3hDZW50ZXI6XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24uQm91bmRpbmdCb3hDZW50ZXI7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24uTm9ydGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9UT0RPIHN0YXJ0Tm9kZSwgZ28gY2xvY2t3aXNlIG9yIG5vdFxyXG4gICAgZ2V0UG9zaXRpb25zKHN0YXJ0Tm9kZTogTWFya2VyUG9zaXRpb24gPSBNYXJrZXJQb3NpdGlvbi5Tb3V0aFdlc3QsIGNsb2Nrd2lzZTogYm9vbGVhbiA9IGZhbHNlLCBhZGRDbG9zaW5nTm9kZTogYm9vbGVhbiA9IHRydWUpOiBudW1iZXJbXVtdIHtcclxuXHJcbiAgICAgICAgbGV0IHBvc2l0aW9uczogbnVtYmVyW11bXSA9IFtdO1xyXG5cclxuICAgICAgICBwb3NpdGlvbnMucHVzaChbdGhpcy5kaXJlY3Rpb24uU291dGhXZXN0LmxuZywgdGhpcy5kaXJlY3Rpb24uU291dGhXZXN0LmxhdF0pO1xyXG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKFt0aGlzLmRpcmVjdGlvbi5Tb3V0aFdlc3QubG5nLCB0aGlzLmRpcmVjdGlvbi5Tb3V0aFdlc3QubGF0XSk7XHJcbiAgICAgICAgcG9zaXRpb25zLnB1c2goW3RoaXMuZGlyZWN0aW9uLlNvdXRoLmxuZywgdGhpcy5kaXJlY3Rpb24uU291dGgubGF0XSk7XHJcbiAgICAgICAgcG9zaXRpb25zLnB1c2goW3RoaXMuZGlyZWN0aW9uLlNvdXRoRWFzdC5sbmcsIHRoaXMuZGlyZWN0aW9uLlNvdXRoRWFzdC5sYXRdKTtcclxuICAgICAgICBwb3NpdGlvbnMucHVzaChbdGhpcy5kaXJlY3Rpb24uRWFzdC5sbmcsIHRoaXMuZGlyZWN0aW9uLkVhc3QubGF0XSk7XHJcbiAgICAgICAgcG9zaXRpb25zLnB1c2goW3RoaXMuZGlyZWN0aW9uLk5vcnRoRWFzdC5sbmcsIHRoaXMuZGlyZWN0aW9uLk5vcnRoRWFzdC5sYXRdKTtcclxuICAgICAgICBwb3NpdGlvbnMucHVzaChbdGhpcy5kaXJlY3Rpb24uTm9ydGgubG5nLCB0aGlzLmRpcmVjdGlvbi5Ob3J0aC5sYXRdKTtcclxuICAgICAgICBwb3NpdGlvbnMucHVzaChbdGhpcy5kaXJlY3Rpb24uTm9ydGhXZXN0LmxuZywgdGhpcy5kaXJlY3Rpb24uTm9ydGhXZXN0LmxhdF0pO1xyXG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKFt0aGlzLmRpcmVjdGlvbi5XZXN0LmxuZywgdGhpcy5kaXJlY3Rpb24uV2VzdC5sYXRdKTtcclxuICAgICAgICBpZiAoYWRkQ2xvc2luZ05vZGUpIHtcclxuICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goW3RoaXMuZGlyZWN0aW9uLlNvdXRoV2VzdC5sbmcsIHRoaXMuZGlyZWN0aW9uLlNvdXRoV2VzdC5sYXRdKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9ucztcclxuICAgIH1cclxufSJdfQ==