{"version":3,"file":"my-lib.js","sources":["ng://my-lib/lib/map-state.service.ts","ng://my-lib/lib/enums.ts","ng://my-lib/lib/utils.ts","ng://my-lib/lib/turf-helper.service.ts","ng://my-lib/lib/polygon.util.ts","ng://my-lib/lib/polygon-helpers.ts","ng://my-lib/lib/polygon-information.service.ts","ng://my-lib/lib/popups/alter-polygon/alter-polygon.component.ts","ng://my-lib/lib/component-generater.service.ts","ng://my-lib/lib/leaflet-helper.service.ts","ng://my-lib/lib/polydraw.service.ts","ng://my-lib/lib/my-lib.module.ts","ng://my-lib/public-api.ts","ng://my-lib/my-lib.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as L from \"leaflet\"\r\nimport { ILatLng } from './polygon-helpers';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PolyStateService {\r\n    constructor() { }\r\n    \r\n\r\n    private mapSubject = new BehaviorSubject<L.Map>(null); \r\n    \r\n    map$: Observable<L.Map> = this.mapSubject.asObservable();\r\n    private polygonSubject = new BehaviorSubject<ILatLng[][][]>(null); \r\n\r\n    polygons$: Observable<ILatLng[][][]> = this.polygonSubject.asObservable();\r\n    private mapStateSubject = new BehaviorSubject<MapStateModel>(new MapStateModel());\r\n    mapState$: Observable<MapStateModel> = this.mapStateSubject.asObservable();\r\n    mapZoomLevel$: Observable<number>  = this.mapState$.pipe(map((state: MapStateModel) => state.mapBoundState.zoom));\r\n\r\n    private updateMapStates(newState: any): void {\r\n        let state = this.mapStateSubject.value;\r\n        state = { ...state, ...newState };\r\n\r\n        this.mapStateSubject.next(state);\r\n    }\r\n\r\n\r\n    updateMapState(map: L.Map){\r\n        this.mapSubject.next(map)\r\n    }\r\n\r\n    updatePolygons(polygons: ILatLng[][][]):void{\r\n        \r\n        this.polygonSubject.next(polygons)\r\n    }\r\n    updateMapBounds(mapBounds: MapBoundsState) {\r\n        this.updateMapStates({ mapBoundState: mapBounds });\r\n    }\r\n}\r\n\r\nclass MapStateModel {\r\n    constructor(\r\n      \r\n        public mapBoundState: MapBoundsState = new MapBoundsState(null, 11)) { }\r\n}\r\nclass MapBoundsState {\r\n    constructor(\r\n        public bounds: L.LatLngBounds,\r\n        public zoom: number) { }\r\n}","export enum DrawMode {\r\n    Off = 0,\r\n    Add = 1,\r\n    Edit = 2,\r\n    Subtract = 4,\r\n    AppendMarker = 8,\r\n    LoadPredefined = 16\r\n}\r\nexport enum MarkerPosition {\r\n    // CenterOfMass = 0,\r\n    North = 1,\r\n    East = 2,\r\n    South = 3,\r\n    West = 4,\r\n    NorthEast = 5,\r\n    NorthWest = 6,\r\n    SouthEast = 7,\r\n    SouthWest = 8,\r\n    // BoundingBoxCenter = 9\r\n}\r\n\r\n\r\n","import { ICompass } from \"./interface\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\nimport { MarkerPosition } from \"./enums\";\r\n\r\nexport class PolyDrawUtil {\r\n    static getBounds(polygon: ILatLng[], padding: number = 0): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n        if (padding !== 0) {\r\n            return bounds.pad(padding);\r\n        }\r\n        return bounds;\r\n    }\r\n}\r\n//TODO make compass ILatLng\r\nexport class Compass {\r\n\r\n    public direction: ICompass = {\r\n        // BoundingBoxCenter: { lat: 0, lng: 0 },\r\n        // CenterOfMass: { lat: 0, lng: 0 },\r\n        East: { lat: 0, lng: 0 },\r\n        North: { lat: 0, lng: 0 },\r\n        NorthEast: { lat: 0, lng: 0 },\r\n        NorthWest: { lat: 0, lng: 0 },\r\n        South: { lat: 0, lng: 0 },\r\n        SouthEast: { lat: 0, lng: 0 },\r\n        SouthWest: { lat: 0, lng: 0 },\r\n        West: { lat: 0, lng: 0 }\r\n    };\r\n\r\n    constructor(minLat: number = 0, minLng: number = 0, maxLat: number = 0, maxLng: number = 0) {\r\n\r\n        this.direction.North = { lat: maxLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.NorthEast = { lat: maxLat, lng: maxLng };\r\n        this.direction.East = { lat: (minLat + maxLat) / 2, lng: maxLng };\r\n        this.direction.SouthEast = { lat: minLat, lng: maxLng };\r\n        this.direction.South = { lat: minLat, lng: (minLng + maxLng) / 2 };\r\n        this.direction.SouthWest = { lat: minLat, lng: minLng };\r\n        this.direction.West = { lat: (minLat + maxLat) / 2, lng: minLng };\r\n        this.direction.NorthWest = { lat: maxLat, lng: minLng };\r\n        // this.direction.CenterOfMass = { lat: 0, lng: 0 };\r\n        // this.direction.BoundingBoxCenter = {lat: (minLat + maxLat) / 2, lng: (minLng + maxLng) / 2};\r\n    }\r\n    //TODO default return.\r\n    getDirection(direction: MarkerPosition) {\r\n        switch (direction) {\r\n            // case MarkerPosition.CenterOfMass:\r\n            //     return this.direction.CenterOfMass;\r\n            case MarkerPosition.North:\r\n                return this.direction.North;\r\n            case MarkerPosition.NorthEast:\r\n                return this.direction.NorthEast;\r\n            case MarkerPosition.East:\r\n                return this.direction.East;\r\n            case MarkerPosition.SouthEast:\r\n                return this.direction.SouthEast;\r\n            case MarkerPosition.South:\r\n                return this.direction.South;\r\n            case MarkerPosition.SouthWest:\r\n                return this.direction.SouthWest;\r\n            case MarkerPosition.West:\r\n                return this.direction.West;\r\n            case MarkerPosition.NorthWest:\r\n                return this.direction.NorthWest;\r\n            // case MarkerPosition.BoundingBoxCenter:\r\n            //     return this.direction.BoundingBoxCenter;\r\n            default:\r\n                return this.direction.North;\r\n        }\r\n    }\r\n    //TODO startNode, go clockwise or not\r\n    getPositions(startNode: MarkerPosition = MarkerPosition.SouthWest, clockwise: boolean = false, addClosingNode: boolean = true): number[][] {\r\n\r\n        let positions: number[][] = [];\r\n\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        positions.push([this.direction.South.lng, this.direction.South.lat]);\r\n        positions.push([this.direction.SouthEast.lng, this.direction.SouthEast.lat]);\r\n        positions.push([this.direction.East.lng, this.direction.East.lat]);\r\n        positions.push([this.direction.NorthEast.lng, this.direction.NorthEast.lat]);\r\n        positions.push([this.direction.North.lng, this.direction.North.lat]);\r\n        positions.push([this.direction.NorthWest.lng, this.direction.NorthWest.lat]);\r\n        positions.push([this.direction.West.lng, this.direction.West.lat]);\r\n        if (addClosingNode) {\r\n            positions.push([this.direction.SouthWest.lng, this.direction.SouthWest.lat]);\r\n        }\r\n\r\n\r\n\r\n        return positions;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport * as turf from '@turf/turf';\r\nimport concaveman from 'concaveman';\r\nimport { Feature, Polygon, MultiPolygon, Position } from '@turf/turf';\r\nimport { MarkerPosition } from './enums';\r\nimport { ICompass } from './interface';\r\nimport { Compass } from './utils';\r\nimport { ILatLng } from './polygon-helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TurfHelperService {\r\n  private simplifyTolerance = { tolerance: 0.0001, highQuality: false };\r\n  constructor() {}\r\n\r\n  union(poly1, poly2): Feature<Polygon | MultiPolygon> {\r\n    \r\n    \r\n\r\n    const union = turf.union(poly1, poly2);\r\n\r\n    return this.getTurfPolygon(union);\r\n  }\r\n\r\n  turfConcaveman(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    \r\n    const points = turf.explode(feature);\r\n\r\n    const coordinates = points.features.map(f => f.geometry.coordinates);\r\n    return turf.multiPolygon([[concaveman(coordinates)]]);\r\n  }\r\n\r\n  //TODO add some sort of dynamic tolerance\r\n  getSimplified(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const tolerance = this.simplifyTolerance;\r\n    const simplified = turf.simplify(polygon, tolerance);\r\n    return simplified;\r\n  }\r\n\r\n  getTurfPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    let turfPolygon;\r\n    \r\n    // if (polygon.geometry)\r\n    if (polygon.geometry.type === 'Polygon') {\r\n      turfPolygon = turf.multiPolygon([polygon.geometry.coordinates]);\r\n    } else {\r\n      turfPolygon = turf.multiPolygon(polygon.geometry.coordinates);\r\n    }\r\n    return turfPolygon;\r\n  }\r\n\r\n  getMultiPolygon(\r\n    polygonArray: Position[][][]\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    return turf.multiPolygon(polygonArray);\r\n  }\r\n\r\n  getKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const unkink = turf.unkinkPolygon(feature);\r\n    const coordinates = [];\r\n    turf.featureEach(unkink, current => {\r\n      coordinates.push(current);\r\n    });\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  getCoords(feature: Feature<Polygon | MultiPolygon>) {\r\n    return turf.getCoords(feature);\r\n  }\r\n\r\n  hasKinks(feature: Feature<Polygon | MultiPolygon>) {\r\n    const kinks = turf.kinks(feature);\r\n    return kinks.features.length > 0;\r\n  }\r\n\r\n  polygonIntersect(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    latlngs: Feature<Polygon | MultiPolygon>\r\n  ): boolean {\r\n    // const oldPolygon = polygon.toGeoJSON();\r\n    const poly = [];\r\n    const poly2 = [];\r\n\r\n    \r\n\r\n    const latlngsCoords = turf.getCoords(latlngs);\r\n    latlngsCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly.push(feat);\r\n    });\r\n    const polygonCoords = turf.getCoords(polygon);\r\n    polygonCoords.forEach(element => {\r\n      const feat = { type: 'Polygon', coordinates: [element[0]] };\r\n\r\n      poly2.push(feat);\r\n    });\r\n    let intersect = false;\r\n    loop1: for (let i = 0; i < poly.length; i++) {\r\n      if (this.getKinks(poly[i]).length < 2) {\r\n        for (let j = 0; j < poly2.length; j++) {\r\n          if (this.getKinks(poly2[j]).length < 2) {\r\n            const test = turf.intersect(poly[i], poly2[j]);\r\n            if (test?.geometry.type === 'Point') {\r\n              intersect = !(\r\n                turf.booleanPointInPolygon(test, poly[i]) &&\r\n                turf.booleanPointInPolygon(test, poly2[j])\r\n              );\r\n              \r\n            } else if (test?.geometry.type === 'Polygon') {\r\n              intersect = !!turf.intersect(poly[i], poly2[j]);\r\n            }\r\n\r\n            if (intersect) {\r\n              break loop1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return intersect;\r\n  }\r\n\r\n  getIntersection(poly1, poly2): Feature {\r\n    return turf.intersect(poly1, poly2);\r\n  }\r\n  getDistance(point1, point2): number {\r\n    return turf.distance(point1, point2);\r\n  }\r\n\r\n  isWithin(polygon1: Position[], polygon2: Position[]): boolean {\r\n    \r\n    \r\n    return turf.booleanWithin(\r\n      turf.polygon([polygon1]),\r\n      turf.polygon([polygon2])\r\n    );\r\n  }\r\n\r\n  equalPolygons(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ) {\r\n    \r\n    \r\n    \r\n  }\r\n  //TODO optional add extra markers for N E S W (We have the corners NW, NE, SE, SW)\r\n  convertToBoundingBoxPolygon(\r\n    polygon: Feature<Polygon | MultiPolygon>,\r\n    addMidpointMarkers: boolean = false\r\n  ): Feature<Polygon> {\r\n    const bbox = turf.bbox(polygon.geometry);\r\n    const bboxPolygon = turf.bboxPolygon(bbox);\r\n\r\n    const compass = new Compass(bbox[1], bbox[0], bbox[3], bbox[2]);\r\n\r\n    const compassPositions = compass.getPositions();\r\n\r\n    bboxPolygon.geometry.coordinates = [];\r\n    bboxPolygon.geometry.coordinates = [compassPositions];\r\n\r\n    return bboxPolygon;\r\n  }\r\n  polygonToMultiPolygon(poly: Feature<Polygon>): Feature<MultiPolygon> {\r\n    const multi = turf.multiPolygon([poly.geometry.coordinates]);\r\n    return multi;\r\n  }\r\n  //TODO -cleanup\r\n  injectPointToPolygon(polygon, point) {\r\n    const coords = turf.getCoords(polygon);\r\n    let newPolygon;\r\n    \r\n    if (coords.length < 2) {\r\n      const polygonPoints = turf.explode(polygon);\r\n      \r\n      const index = turf.nearestPoint(point, polygonPoints).properties\r\n        .featureIndex;\r\n      const test = turf.coordReduce(\r\n        polygonPoints,\r\n        function(accumulator, oldPoint, i) {\r\n          if (index === i) {\r\n            return [...accumulator, oldPoint, point];\r\n          }\r\n          return [...accumulator, oldPoint];\r\n        },\r\n        []\r\n      );\r\n      \r\n      newPolygon = turf.multiPolygon([[test]]);\r\n    } else {\r\n      const pos = [];\r\n      let coordinates = [];\r\n      coords.forEach(element => {\r\n        const polygon = turf.polygon(element);\r\n        // turf.booleanPointInPolygon(point, polygon)\r\n        if (turf.booleanPointInPolygon(point, polygon)) {\r\n          const polygonPoints = turf.explode(polygon);\r\n          const index = turf.nearestPoint(point, polygonPoints).properties\r\n            .featureIndex;\r\n          coordinates = turf.coordReduce(\r\n            polygonPoints,\r\n            function(accumulator, oldPoint, i) {\r\n              if (index === i) {\r\n                return [...accumulator, oldPoint, point];\r\n              }\r\n              return [...accumulator, oldPoint];\r\n            },\r\n            []\r\n          );\r\n          \r\n        } else {\r\n          pos.push(element);\r\n        }\r\n      });\r\n      pos.push([coordinates]);\r\n      newPolygon = turf.multiPolygon(pos);\r\n    }\r\n    return newPolygon;\r\n  }\r\n\r\n  polygonDifference(\r\n    polygon1: Feature<Polygon | MultiPolygon>,\r\n    polygon2: Feature<Polygon | MultiPolygon>\r\n  ): Feature<Polygon | MultiPolygon> {\r\n    const diff = turf.difference(polygon1, polygon2);\r\n    \r\n    return this.getTurfPolygon(diff);\r\n  }\r\n  getBoundingBoxCompassPosition(\r\n    polygon,\r\n    MarkerPosition: ICompass,\r\n    useOffset,\r\n    offsetDirection\r\n  ) {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const compass = this.getBoundingBoxCompass(polygon);\r\n    const polygonPoints = turf.explode(polygon);\r\n    const coord = this.getCoord(compass.direction.North);\r\n    const nearestPoint = turf.nearestPoint(coord, polygonPoints);\r\n\r\n    return null;\r\n  }\r\n  private getBoundingBoxCompass(polygon): Compass {\r\n    const p = this.getMultiPolygon(polygon);\r\n    const centerOfMass = turf.centerOfMass(p);\r\n    const b = turf.bbox(p);\r\n    const minX = b[0];\r\n    const minY = b[1];\r\n    const maxX = b[2];\r\n    const maxY = b[3];\r\n    const compass = new Compass(minX, minY, maxX, maxY);\r\n    // compass.direction.CenterOfMass = centerOfMass.geometry.coordinates[0][0];\r\n\r\n    return compass;\r\n  }\r\n\r\n  getNearestPointIndex(\r\n    targetPoint: turf.Coord,\r\n    points: turf.FeatureCollection<turf.Point>\r\n  ): number {\r\n    const index = turf.nearestPoint(targetPoint, points).properties.featureIndex;\r\n    return index;\r\n  }\r\n  getCoord(point: ILatLng): turf.Coord {\r\n    const coord = turf.getCoord([point.lng, point.lat]);\r\n    return coord;\r\n  }\r\n  getFeaturePointCollection(points: ILatLng[]): turf.FeatureCollection {\r\n    const pts = [];\r\n    points.forEach(v => {\r\n      const p = turf.point([v.lng, v.lat], {});\r\n      pts.push(p);\r\n    });\r\n\r\n    const fc = turf.featureCollection(pts);\r\n\r\n    return fc;\r\n  }\r\n}\r\n","\r\nimport * as L from \"leaflet\";\r\nimport * as turf from \"@turf/turf\"\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\nexport class PolygonUtil {\r\n    static getCenter(polygon: ILatLng[]) {\r\n        const pi = Math.PI;\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        polygon.forEach(v => {\r\n            let lat1 = v.lat;\r\n            let lon1 = v.lng;\r\n            lat1 = lat1 * pi / 180;\r\n            lon1 = lon1 * pi / 180;\r\n            x += Math.cos(lat1) * Math.cos(lon1);\r\n            y += Math.cos(lat1) * Math.sin(lon1);\r\n            z += Math.sin(lat1);\r\n        });\r\n\r\n        let lng = Math.atan2(y, x);\r\n        const hyp = Math.sqrt(x * x + y * y);\r\n        let lat = Math.atan2(z, hyp);\r\n        lat = lat * 180 / pi;\r\n        lng = lng * 180 / pi;\r\n        const center: ILatLng = { lat: lat, lng: lng };\r\n\r\n        return center;\r\n    }\r\n    static getSouthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getNorthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthEast();\r\n    }\r\n    static getNorthWest(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorthWest();\r\n    }\r\n    static getSouthEast(polygon: ILatLng[]): ILatLng {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouthEast();\r\n    }\r\n    static getNorth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getNorth();\r\n    }\r\n    static getSouth(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getSouth();\r\n    }\r\n    static getWest(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getWest();\r\n    }\r\n    static getEast(polygon: ILatLng[]): number {\r\n        const bounds = this.getBounds(polygon);\r\n        return bounds.getEast();\r\n    }\r\n    static getSqmArea(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const area = turf.area((geoJsonPoly) as any);\r\n\r\n        return area;\r\n    }\r\n    static getPerimeter(polygon: ILatLng[]): number {\r\n        const poly: L.Polygon = new L.Polygon(polygon);\r\n        const geoJsonPoly = poly.toGeoJSON();\r\n\r\n        const perimeter = turf.length((geoJsonPoly) as any, {units: \"meters\"});\r\n\r\n        return perimeter;\r\n    }\r\n    static getPolygonChecksum(polygon: ILatLng[]): number {\r\n        const uniqueLatLngs = polygon.filter((v, i, a) => {\r\n            return a.indexOf(a.find(x => x.lat === v.lat && x.lng === v.lng)) === i;\r\n        });\r\n\r\n        return uniqueLatLngs.reduce((a, b) => +a + +b.lat, 0) * uniqueLatLngs.reduce((a, b) => +a + +b.lng, 0);\r\n    }\r\n    static getMidPoint(point1: ILatLng, point2: ILatLng): ILatLng {\r\n\r\n        const p1 = turf.point([point1.lng, point1.lat]);\r\n        const p2 = turf.point([point2.lng, point2.lat]);\r\n\r\n        const midpoint = turf.midpoint(p1, p2);\r\n\r\n        const returnPoint: ILatLng = {\r\n            lat: midpoint.geometry.coordinates[1],\r\n            lng: midpoint.geometry.coordinates[0]\r\n        };\r\n\r\n        return returnPoint;\r\n    }\r\n    static getBounds(polygon: ILatLng[]): L.LatLngBounds {\r\n        const tmpLatLng: L.LatLng[] = [];\r\n\r\n        polygon.forEach(ll => {\r\n            if (isNaN(ll.lat) || isNaN(ll.lng)) {\r\n            }\r\n            tmpLatLng.push(ll as L.LatLng);\r\n        });\r\n\r\n        const polyLine: L.Polyline = new L.Polyline(tmpLatLng);\r\n        const bounds = polyLine.getBounds();\r\n\r\n        return bounds;\r\n\r\n    }\r\n}\r\n\r\n//export class FreedrawSubtract extends L.FreeDraw {\r\n\r\n\r\n//    constructor() {\r\n\r\n//        //this will become L.FreeDraw\r\n//        super(null);\r\n//        //call methods in freedraw by this\r\n//        const foo = this.size();\r\n\r\n//        this.consoleLogNumberOfPolygons(foo);\r\n\r\n//    }\r\n\r\n//    consoleLogNumberOfPolygons(size: number): void {\r\n//        console.log(\"Number of polygons: \", size);\r\n//    }\r\n\r\n//}","import { PolygonUtil } from './polygon.util';\r\n\r\nexport class PolygonInfo {\r\n  polygon: ILatLng[][][] = [];\r\n  trashcanPoint: ILatLng[] = [];\r\n  sqmArea: number[] = [];\r\n  perimeter: number[] = [];\r\n  constructor(polygon) {\r\n    \r\n    polygon.forEach((polygons, i) => {\r\n      this.trashcanPoint[i] = this.getTrashcanPoint(polygons[0]);\r\n      this.sqmArea[i] = this.calculatePolygonArea(polygons[0]);\r\n      this.perimeter[i] = this.calculatePolygonPerimeter(polygons[0]);\r\n    \r\n      this.polygon[i] = polygons;\r\n    });\r\n  }\r\n  setSqmArea(area: number): void {\r\n    this.sqmArea[0] = area;\r\n  }\r\n  private getTrashcanPoint(polygon: ILatLng[]): ILatLng {\r\n    const res = Math.max.apply(\r\n      Math,\r\n      polygon.map(o => o.lat)\r\n    );\r\n    const idx = polygon.findIndex(o => o.lat === res);\r\n\r\n    let previousPoint: ILatLng;\r\n    let nextPoint: ILatLng;\r\n\r\n    if (idx > 0) {\r\n      previousPoint = polygon[idx - 1];\r\n      if (idx < polygon.length - 1) {\r\n        nextPoint = polygon[idx + 1];\r\n      } else {\r\n        nextPoint = polygon[0];\r\n      }\r\n    } else {\r\n      previousPoint = polygon[polygon.length - 1];\r\n      nextPoint = polygon[idx + 1];\r\n    }\r\n\r\n    const secondPoint =\r\n      previousPoint.lng < nextPoint.lng ? previousPoint : nextPoint;\r\n\r\n    const midpoint = PolygonUtil.getMidPoint(polygon[idx], secondPoint);\r\n\r\n    return midpoint;\r\n  }\r\n  private calculatePolygonArea(polygon: ILatLng[]): number {\r\n    const area = PolygonUtil.getSqmArea(polygon as any);\r\n    return area;\r\n  }\r\n  private calculatePolygonPerimeter(polygon: ILatLng[]): number {\r\n    const perimeter = PolygonUtil.getPerimeter(polygon as any);\r\n    return perimeter;\r\n  }\r\n}\r\nconst addClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.add(className);\r\n  }\r\n};\r\n\r\nconst removeClass: (selector: string, className: string) => void = (\r\n  selector: string,\r\n  className: string\r\n): void => {\r\n  const elements: NodeListOf<HTMLElement> = document.querySelectorAll(selector);\r\n  for (let i = 0; i < elements.length; i++) {\r\n    elements.item(i).classList.remove(className);\r\n  }\r\n};\r\n\r\nexport class PolygonDrawStates {\r\n  isActivated: boolean;\r\n  isFreeDrawMode: boolean;\r\n  isMoveMode: boolean;\r\n  canRevert: boolean;\r\n  isAuto: boolean;\r\n  hasPolygons: boolean;\r\n  canUsePolyDraw: boolean;\r\n\r\n  constructor() {\r\n    this.canUsePolyDraw = false;\r\n    this.reset();\r\n  }\r\n\r\n  activate(): void {\r\n    this.reset();\r\n    this.isActivated = true;\r\n  }\r\n\r\n  reset(): void {\r\n    this.isActivated = false;\r\n    this.hasPolygons = false;\r\n    this.canRevert = false;\r\n    this.isAuto = false;\r\n\r\n    this.resetDrawModes();\r\n  }\r\n\r\n  resetDrawModes(): void {\r\n    this.isFreeDrawMode = false;\r\n    removeClass('img.leaflet-tile', 'disable-events');\r\n    this.isMoveMode = false;\r\n  }\r\n\r\n  setFreeDrawMode(isAuto: boolean = false): void {\r\n    if (isAuto) {\r\n      this.isActivated = true;\r\n    }\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isFreeDrawMode = true;\r\n      addClass('img.leaflet-tile', 'disable-events');\r\n      if (isAuto) {\r\n        this.isAuto = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  setMoveMode(): void {\r\n    if (this.isActivated) {\r\n      this.resetDrawModes();\r\n      this.isMoveMode = true;\r\n    }\r\n  }\r\n\r\n  forceCanUseFreeDraw(): void {\r\n    this.canUsePolyDraw = true;\r\n  }\r\n}\r\n\r\nexport interface ILatLng {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject, Observable } from \"rxjs\";\r\nimport { PolygonInfo, PolygonDrawStates, ILatLng } from \"./polygon-helpers\";\r\nimport { PolyStateService } from \"./map-state.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class PolygonInformationService {\r\n  polygonInformationSubject: Subject<PolygonInfo[]> = new Subject<\r\n    PolygonInfo[]\r\n  >();\r\n  polygonInformation$: Observable<\r\n    PolygonInfo[]\r\n  > = this.polygonInformationSubject.asObservable();\r\n  polygonDrawStatesSubject: Subject<PolygonDrawStates> = new Subject<\r\n    PolygonDrawStates\r\n  >();\r\n  polygonDrawStates$: Observable<\r\n    PolygonDrawStates\r\n  > = this.polygonDrawStatesSubject.asObservable();\r\n\r\n  polygonDrawStates: PolygonDrawStates = null;\r\n  polygonInformationStorage = [];\r\n  constructor(private mapStateService: PolyStateService) {\r\n    this.polygonDrawStates = new PolygonDrawStates();\r\n  }\r\n\r\n  updatePolygons() {\r\n    \r\n\r\n    let newPolygons: ILatLng[][][] = null;\r\n    if (this.polygonInformationStorage.length > 0) {\r\n      newPolygons = [];\r\n\r\n      this.polygonInformationStorage.forEach(v => {\r\n        let test = [];\r\n        v.polygon.forEach(poly => {\r\n          let test2 = [];\r\n\r\n          poly.forEach(polygon => {\r\n            test2 = [...polygon];\r\n            if (\r\n              polygon[0].toString() !== polygon[polygon.length - 1].toString()\r\n            ) {\r\n              test2.push(polygon[0]);\r\n            }\r\n            test.push(test2);\r\n          });\r\n        });\r\n\r\n        newPolygons.push(test);\r\n      });\r\n\r\n      this.polygonDrawStates.hasPolygons = true;\r\n    } else {\r\n      this.polygonDrawStates.reset();\r\n      this.polygonDrawStates.hasPolygons = false;\r\n    }\r\n    this.mapStateService.updatePolygons(newPolygons);\r\n    this.saveCurrentState();\r\n  }\r\n\r\n  saveCurrentState(): void {\r\n    this.polygonInformationSubject.next(this.polygonInformationStorage);\r\n    this.polygonDrawStatesSubject.next(this.polygonDrawStates);\r\n    \r\n  }\r\n\r\n  deleteTrashcan(polygon) {\r\n    const idx = this.polygonInformationStorage.findIndex(\r\n      v => v.polygon[0] === polygon\r\n    );\r\n    this.polygonInformationStorage.splice(idx, 1);\r\n    this.updatePolygons();\r\n  }\r\n\r\n  deleteTrashCanOnMulti(polygon: ILatLng[][][]) {\r\n    let index = 0;\r\n    \r\n    \r\n    // const idx = this.polygonInformationStorage.findIndex(v => v.polygon.forEach(poly =>{ poly === polygon}) );\r\n    this.polygonInformationStorage.forEach((v, i) => {\r\n      \r\n      const id = v.polygon.findIndex(\r\n        poly => poly.toString() === polygon.toString()\r\n      );\r\n      if (id >= 0) {\r\n        index = i;\r\n        v.trashcanPoint.splice(id, 1);\r\n        v.sqmArea.splice(id, 1);\r\n        v.perimeter.splice(id, 1);\r\n        v.polygon.splice(id, 1);\r\n\r\n        \r\n      }\r\n      \r\n    });\r\n    this.updatePolygons();\r\n    \r\n    if (this.polygonInformationStorage.length > 1) {\r\n      this.polygonInformationStorage.splice(index, 1);\r\n    }\r\n    \r\n  }\r\n\r\n  deletePolygonInformationStorage() {\r\n    this.polygonInformationStorage = [];\r\n  }\r\n\r\n  createPolygonInformationStorage(arrayOfFeatureGroups) {\r\n    \r\n    if (arrayOfFeatureGroups.length > 0) {\r\n      arrayOfFeatureGroups.forEach(featureGroup => {\r\n        \r\n        let polyInfo = new PolygonInfo(\r\n          featureGroup.getLayers()[0].getLatLngs()\r\n        );\r\n        this.polygonInformationStorage.push(polyInfo);\r\n      });\r\n      this.updatePolygons();\r\n    }\r\n  }\r\n\r\n  activate() {\r\n    this.polygonDrawStates.activate();\r\n  }\r\n  reset() {\r\n    this.polygonDrawStates.reset();\r\n  }\r\n\r\n  setMoveMode() {\r\n    this.polygonDrawStates.setMoveMode();\r\n  }\r\n\r\n  setFreeDrawMode() {\r\n    this.polygonDrawStates.setFreeDrawMode();\r\n  }\r\n}\r\n","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alter-polygon',\r\n  templateUrl: './alter-polygon.component.html',\r\n  styleUrls: ['./alter-polygon.component.css']\r\n})\r\nexport class AlterPolygonComponent {\r\n\r\n  @Output() simplyfiClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  @Output() bboxClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n  onSimplify($event: MouseEvent): void {\r\n    this.simplyfiClicked.emit($event);\r\n  }\r\n\r\n  onBbox($event: MouseEvent): void {\r\n    this.bboxClicked.emit($event);\r\n  }\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, ComponentRef, ComponentFactory, OnDestroy, Component } from '@angular/core';\r\nimport { AlterPolygonComponent } from './popups/alter-polygon/alter-polygon.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentGeneraterService implements OnDestroy {\r\n\r\n  private clusterPopuprefs: ComponentRef<AlterPolygonComponent>[] = [];\r\n\r\n  constructor(\r\n    private readonly cfr: ComponentFactoryResolver,\r\n    private readonly injector: Injector\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyAngularPopupComponents();\r\n  }\r\n\r\n  generateAlterPopup(): ComponentRef<AlterPolygonComponent> {\r\n    const cmpFactory: ComponentFactory<AlterPolygonComponent> = this.cfr.resolveComponentFactory(AlterPolygonComponent);\r\n    const popupComponentRef: ComponentRef<AlterPolygonComponent> = cmpFactory.create(this.injector);\r\n    this.clusterPopuprefs.push(popupComponentRef);\r\n    return popupComponentRef;\r\n  }\r\n\r\n  destroyAngularPopupComponents(): void {\r\n    this.clusterPopuprefs.forEach(cref => {\r\n      if (cref) {\r\n        cref.destroy();\r\n      }\r\n    });\r\n    this.clusterPopuprefs = [];\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport * as L from \"leaflet\";\r\nimport { ILatLng } from \"./polygon-helpers\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class LeafletHelperService {\r\n  constructor() {}\r\n\r\n  createPolygon(latLngs: ILatLng[]): L.Polygon {\r\n    const p = L.polygon(latLngs);\r\n    return p;\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n// import * as turf from \"@turf/turf\";\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { filter, debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { Feature, Polygon, MultiPolygon } from '@turf/turf';\r\nimport { PolyStateService } from './map-state.service';\r\nimport { TurfHelperService } from './turf-helper.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport defaultConfig from './polyinfo.json';\r\nimport { ILatLng, PolygonDrawStates } from './polygon-helpers';\r\nimport { ComponentGeneraterService } from './component-generater.service';\r\nimport { Compass, PolyDrawUtil } from './utils';\r\nimport { MarkerPosition, DrawMode } from './enums';\r\nimport { LeafletHelperService } from './leaflet-helper.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n// Rename - PolyDrawService\r\nexport class PolyDrawService {\r\n  // DrawModes, determine UI buttons etc...\r\n  drawModeSubject: BehaviorSubject<DrawMode> = new BehaviorSubject<DrawMode>(\r\n    DrawMode.Off\r\n  );\r\n  drawMode$: Observable<DrawMode> = this.drawModeSubject.asObservable();\r\n\r\n  private readonly minimumFreeDrawZoomLevel: number = 12;\r\n  private map: L.Map;\r\n\r\n  private mergePolygons: boolean;\r\n  private kinks: boolean;\r\n  // add to config\r\n  private arrayOfFeatureGroups: L.FeatureGroup<L.Layer>[] = [];\r\n  private tracer: L.Polyline = {} as any;\r\n  // end add to config\r\n\r\n  private ngUnsubscribe = new Subject();\r\n  private config: typeof defaultConfig = null;\r\n\r\n  constructor(\r\n    private mapState: PolyStateService,\r\n    private popupGenerator: ComponentGeneraterService,\r\n    private turfHelper: TurfHelperService,\r\n    private polygonInformation: PolygonInformationService,\r\n    private leafletHelper: LeafletHelperService\r\n  ) {\r\n    this.mapState.map$.pipe(filter(m => m !== null)).subscribe((map: L.Map) => {\r\n      this.map = map;\r\n      this.config = defaultConfig;\r\n      this.configurate({});\r\n      this.tracer = L.polyline([[0, 0]], this.config.polyLineOptions);\r\n      this.initPolyDraw();\r\n    });\r\n\r\n    this.mapState.mapZoomLevel$\r\n      .pipe(debounceTime(100), takeUntil(this.ngUnsubscribe))\r\n      .subscribe((zoom: number) => {\r\n        this.onZoomChange(zoom);\r\n      });\r\n  }\r\n  // new\r\n  configurate(config: Object): void {\r\n    // TODO if config is path...\r\n    this.config = { ...defaultConfig, ...config };\r\n\r\n    this.mergePolygons = this.config.mergePolygons;\r\n    this.kinks = this.config.kinks;\r\n  }\r\n\r\n  // fine\r\n  closeAndReset(): void {\r\n    this.setDrawMode(DrawMode.Off);\r\n    this.removeAllFeatureGroups();\r\n  }\r\n\r\n  // make readable\r\n  deletePolygon(polygon: ILatLng[][]) {\r\n    if (polygon.length > 1) {\r\n      polygon.length = 1;\r\n    }\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs();\r\n        const length = latlngs.length;\r\n        //  = []\r\n\r\n        latlngs.forEach((latlng, index) => {\r\n          let polygon3;\r\n          const test = [...latlng];\r\n\r\n          if (latlng.length > 1) {\r\n            if (latlng[0][0] !== latlng[0][latlng[0].length - 1]) {\r\n              test[0].push(latlng[0][0]);\r\n            }\r\n\r\n            polygon3 = [test[0]];\r\n          } else {\r\n            if (latlng[0] !== latlng[latlng.length - 1]) {\r\n              test.push(latlng[0]);\r\n            }\r\n            polygon3 = test;\r\n          }\r\n\r\n          const equals = this.polygonArrayEquals(polygon3, polygon);\r\n\r\n          if (equals && length === 1) {\r\n            this.polygonInformation.deleteTrashcan(polygon);\r\n\r\n            this.removeFeatureGroup(featureGroup);\r\n          } else if (equals && length > 1) {\r\n            this.polygonInformation.deleteTrashCanOnMulti([polygon]);\r\n            latlngs.splice(index, 1);\r\n            layer.setLatLngs(latlngs);\r\n            this.removeFeatureGroup(featureGroup);\r\n            this.addPolygonLayer(layer.toGeoJSON(), false);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  // fine\r\n  removeAllFeatureGroups() {\r\n    this.arrayOfFeatureGroups.forEach(featureGroups => {\r\n      this.map.removeLayer(featureGroups);\r\n    });\r\n\r\n    this.arrayOfFeatureGroups = [];\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    this.polygonInformation.reset();\r\n    this.polygonInformation.updatePolygons();\r\n  }\r\n  // fine\r\n  getDrawMode(): DrawMode {\r\n    return this.drawModeSubject.value;\r\n  }\r\n\r\n  addViken(polygon) {\r\n    this.addPolygonLayer(polygon, true);\r\n  }\r\n\r\n  // check this\r\n  addAutoPolygon(geographicBorders: L.LatLng[][][]): void {\r\n    geographicBorders.forEach(group => {\r\n      const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n      const polygon2 = this.turfHelper.getMultiPolygon(\r\n        this.convertToCoords(group)\r\n      );\r\n\r\n      const polygon = this.getPolygon(polygon2);\r\n\r\n      featureGroup.addLayer(polygon);\r\n      const markerLatlngs = polygon.getLatLngs();\r\n\r\n      markerLatlngs.forEach(polygon => {\r\n        polygon.forEach((polyElement, i) => {\r\n          if (i === 0) {\r\n            this.addMarker(polyElement, featureGroup);\r\n          } else {\r\n            this.addHoleMarker(polyElement, featureGroup);\r\n          }\r\n        });\r\n        // this.addMarker(polygon[0], featureGroup);\r\n        // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\r\n      });\r\n\r\n      this.arrayOfFeatureGroups.push(featureGroup);\r\n    });\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.setMoveMode();\r\n  }\r\n\r\n  // innehåll i if'ar flytta till egna metoder\r\n  private convertToCoords(latlngs: ILatLng[][]) {\r\n    const coords = [];\r\n\r\n    if (latlngs.length > 1 && latlngs.length < 3) {\r\n      const coordinates = [];\r\n\r\n      // tslint:disable-next-line: max-line-length\r\n      const within = this.turfHelper.isWithin(\r\n        L.GeoJSON.latLngsToCoords(latlngs[latlngs.length - 1]),\r\n        L.GeoJSON.latLngsToCoords(latlngs[0])\r\n      );\r\n      if (within) {\r\n        latlngs.forEach(polygon => {\r\n          coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n        });\r\n      } else {\r\n        latlngs.forEach(polygon => {\r\n          coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n        });\r\n      }\r\n      if (coordinates.length >= 1) {\r\n        coords.push(coordinates);\r\n      }\r\n    } else if (latlngs.length > 2) {\r\n      const coordinates = [];\r\n      for (let index = 1; index < latlngs.length - 1; index++) {\r\n        const within = this.turfHelper.isWithin(\r\n          L.GeoJSON.latLngsToCoords(latlngs[index]),\r\n          L.GeoJSON.latLngsToCoords(latlngs[0])\r\n        );\r\n        if (within) {\r\n          latlngs.forEach(polygon => {\r\n            coordinates.push(L.GeoJSON.latLngsToCoords(polygon));\r\n          });\r\n          coords.push(coordinates);\r\n        } else {\r\n          latlngs.forEach(polygon => {\r\n            coords.push([L.GeoJSON.latLngsToCoords(polygon)]);\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      coords.push([L.GeoJSON.latLngsToCoords(latlngs[0])]);\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  // fine\r\n  private initPolyDraw() {\r\n    const container: HTMLElement = this.map.getContainer();\r\n    const drawMode = this.getDrawMode();\r\n    if (this.config.touchSupport) {\r\n      container.addEventListener('touchstart', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseDown(e);\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchend', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseUpLeave();\r\n        }\r\n      });\r\n\r\n      container.addEventListener('touchmove', e => {\r\n        if (drawMode !== DrawMode.Off) {\r\n          this.mouseMove(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.map.addLayer(this.tracer);\r\n    this.setDrawMode(DrawMode.Off);\r\n  }\r\n  // Test L.MouseEvent\r\n  private mouseDown(event) {\r\n    if (event.originalEvent != null) {\r\n      this.tracer.setLatLngs([event.latlng]);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.setLatLngs([latlng]);\r\n    }\r\n    this.startDraw();\r\n  }\r\n\r\n  // TODO event type, create containerPointToLatLng-method\r\n  private mouseMove(event) {\r\n    if (event.originalEvent != null) {\r\n      this.tracer.addLatLng(event.latlng);\r\n    } else {\r\n      const latlng = this.map.containerPointToLatLng([\r\n        event.touches[0].clientX,\r\n        event.touches[0].clientY\r\n      ]);\r\n      this.tracer.addLatLng(latlng);\r\n    }\r\n  }\r\n\r\n  // fine\r\n  private mouseUpLeave() {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n\r\n    const geoPos: Feature<\r\n      Polygon | MultiPolygon\r\n    > = this.turfHelper.turfConcaveman(this.tracer.toGeoJSON() as any);\r\n    this.stopDraw();\r\n    switch (this.getDrawMode()) {\r\n      case DrawMode.Add:\r\n        this.addPolygon(geoPos, true);\r\n        break;\r\n      case DrawMode.Subtract:\r\n        this.subtractPolygon(geoPos);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine\r\n  private startDraw() {\r\n    this.drawStartedEvents(true);\r\n  }\r\n  // fine\r\n  private stopDraw() {\r\n    this.resetTracker();\r\n    this.drawStartedEvents(false);\r\n  }\r\n\r\n  private onZoomChange(zoomLevel: number): void {\r\n    if (zoomLevel >= this.minimumFreeDrawZoomLevel) {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = true;\r\n    } else {\r\n      this.polygonInformation.polygonDrawStates.canUsePolyDraw = false;\r\n      this.polygonInformation.setMoveMode();\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private drawStartedEvents(onoff: boolean) {\r\n    const onoroff = onoff ? 'on' : 'off';\r\n\r\n    this.map[onoroff]('mousemove', this.mouseMove, this);\r\n    this.map[onoroff]('mouseup', this.mouseUpLeave, this);\r\n  }\r\n  // On hold\r\n  private subtractPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    this.subtract(latlngs);\r\n  }\r\n  // fine\r\n  private addPolygon(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean,\r\n    noMerge: boolean = false\r\n  ) {\r\n    if (\r\n      this.mergePolygons &&\r\n      !noMerge &&\r\n      this.arrayOfFeatureGroups.length > 0 &&\r\n      !this.kinks\r\n    ) {\r\n      this.merge(latlngs);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, simplify);\r\n    }\r\n  }\r\n  // fine\r\n  private addPolygonLayer(\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    simplify: boolean\r\n  ) {\r\n    const featureGroup: L.FeatureGroup = new L.FeatureGroup();\r\n\r\n    const latLngs = simplify ? this.turfHelper.getSimplified(latlngs) : latlngs;\r\n\r\n    const polygon = this.getPolygon(latLngs);\r\n    featureGroup.addLayer(polygon);\r\n\r\n    const markerLatlngs = polygon.getLatLngs();\r\n    markerLatlngs.forEach(polygon => {\r\n      polygon.forEach((polyElement: ILatLng[], i: number) => {\r\n        if (i === 0) {\r\n          this.addMarker(polyElement, featureGroup);\r\n        } else {\r\n          this.addHoleMarker(polyElement, featureGroup);\r\n        }\r\n      });\r\n      // this.addMarker(polygon[0], featureGroup);\r\n      // TODO - Hvis polygon.length >1, så har den hull: egen addMarker funksjon\r\n    });\r\n\r\n    this.arrayOfFeatureGroups.push(featureGroup);\r\n\r\n    this.polygonInformation.activate();\r\n    this.setDrawMode(DrawMode.Off);\r\n\r\n    featureGroup.on('click', e => {\r\n      this.polygonClicked(e, latLngs);\r\n    });\r\n  }\r\n  // fine\r\n  private polygonClicked(e: any, poly: Feature<Polygon | MultiPolygon>) {\r\n    const newPoint = e.latlng;\r\n    if (poly.geometry.type === 'MultiPolygon') {\r\n      const newPolygon = this.turfHelper.injectPointToPolygon(poly, [\r\n        newPoint.lng,\r\n        newPoint.lat\r\n      ]);\r\n      this.deletePolygon(this.getLatLngsFromJson(poly));\r\n      this.addPolygonLayer(newPolygon, false);\r\n    }\r\n  }\r\n  // fine\r\n  private getPolygon(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    const polygon = L.GeoJSON.geometryToLayer(latlngs) as any;\r\n\r\n    polygon.setStyle(this.config.polygonOptions);\r\n    return polygon;\r\n  }\r\n  // fine\r\n  private merge(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    const polygonFeature = [];\r\n    const newArray: L.FeatureGroup[] = [];\r\n    let polyIntersection = false;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n\r\n      if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n        featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n          const feature = this.turfHelper.getMultiPolygon([element]);\r\n          polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n          if (polyIntersection) {\r\n            newArray.push(featureGroup);\r\n            polygonFeature.push(feature);\r\n          }\r\n        });\r\n      } else {\r\n        const feature = this.turfHelper.getTurfPolygon(\r\n          featureCollection.features[0]\r\n        );\r\n        polyIntersection = this.turfHelper.polygonIntersect(feature, latlngs);\r\n        if (polyIntersection) {\r\n          newArray.push(featureGroup);\r\n          polygonFeature.push(feature);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (newArray.length > 0) {\r\n      this.unionPolygons(newArray, latlngs, polygonFeature);\r\n    } else {\r\n      this.addPolygonLayer(latlngs, true);\r\n    }\r\n  }\r\n  // next\r\n  private subtract(latlngs: Feature<Polygon | MultiPolygon>) {\r\n    let addHole = latlngs;\r\n    this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n      const featureCollection = featureGroup.toGeoJSON() as any;\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const feature = this.turfHelper.getTurfPolygon(\r\n        featureCollection.features[0]\r\n      );\r\n      const newPolygon = this.turfHelper.polygonDifference(feature, addHole);\r\n      this.deletePolygon(poly);\r\n      this.removeFeatureGroupOnMerge(featureGroup);\r\n      addHole = newPolygon;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addHole;\r\n    const coords = this.turfHelper.getCoords(newLatlngs);\r\n    coords.forEach(value => {\r\n      this.addPolygonLayer(this.turfHelper.getMultiPolygon([value]), true);\r\n    });\r\n  }\r\n  // fine\r\n  private events(onoff: boolean) {\r\n    const onoroff = onoff ? 'on' : 'off';\r\n    this.map[onoroff]('mousedown', this.mouseDown, this);\r\n  }\r\n  // fine, TODO: if special markers\r\n  private addMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    const menuMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerMenuIcon.position\r\n    );\r\n    const deleteMarkerIdx = this.getMarkerIndex(\r\n      latlngs,\r\n      this.config.markers.markerDeleteIcon.position\r\n    );\r\n\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*   if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      if (i === menuMarkerIdx && this.config.markers.menu) {\r\n        // marker.bindPopup(\r\n        //   this.getHtmlContent(e => {\r\n\r\n        //   })\r\n        // );\r\n        marker.on('click', e => {\r\n          this.convertToBoundsPolygon(latlngs, true);\r\n          // this.convertToSimplifiedPolygon(latlngs);\r\n        });\r\n      }\r\n      if (i === deleteMarkerIdx && this.config.markers.delete) {\r\n        marker.on('click', e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHoleMarker(latlngs: ILatLng[], FeatureGroup: L.FeatureGroup) {\r\n    latlngs.forEach((latlng, i) => {\r\n      const iconClasses = this.config.markers.markerIcon.styleClasses;\r\n      /*  if (i === 0 && this.config.markers.menu) {\r\n        iconClasses = this.config.markers.markerMenuIcon.styleClasses;\r\n      }\r\n\r\n      //TODO- legg til fill icon\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        iconClasses = this.config.markers.markerDeleteIcon.styleClasses;\r\n      } */\r\n      const marker = new L.Marker(latlng, {\r\n        icon: this.createDivIcon(iconClasses),\r\n        draggable: true,\r\n        title: i.toString()\r\n      });\r\n      FeatureGroup.addLayer(marker).addTo(this.map);\r\n\r\n      marker.on('drag', e => {\r\n        this.markerDrag(FeatureGroup);\r\n      });\r\n      marker.on('dragend', e => {\r\n        this.markerDragEnd(FeatureGroup);\r\n      });\r\n      /*   if (i === 0 && this.config.markers.menu) {\r\n        marker.bindPopup(this.getHtmlContent((e) => {\r\n        }));\r\n        // marker.on(\"click\", e => {\r\n        //   this.toggleMarkerMenu();\r\n        // })\r\n      }\r\n      if (i === latlngs.length - 1 && this.config.markers.delete) {\r\n        marker.on(\"click\", e => {\r\n          this.deletePolygon([latlngs]);\r\n        });\r\n      } */\r\n    });\r\n  }\r\n  private createDivIcon(classNames: string[]): L.DivIcon {\r\n    const classes = classNames.join(' ');\r\n    const icon = L.divIcon({ className: classes });\r\n    return icon;\r\n  }\r\n  // TODO: Cleanup\r\n  private markerDrag(FeatureGroup: L.FeatureGroup) {\r\n    const newPos = [];\r\n    let testarray = [];\r\n    let hole = [];\r\n    const layerLength = FeatureGroup.getLayers() as any;\r\n    const posarrays = layerLength[0].getLatLngs();\r\n\r\n    let length = 0;\r\n    if (posarrays.length > 1) {\r\n      for (let index = 0; index < posarrays.length; index++) {\r\n        testarray = [];\r\n        hole = [];\r\n\r\n        if (index === 0) {\r\n          if (posarrays[0].length > 1) {\r\n            for (let i = 0; index < posarrays[0].length; i++) {\r\n              for (let j = 0; j < posarrays[0][i].length; j++) {\r\n                testarray.push(layerLength[j + 1].getLatLng());\r\n              }\r\n              hole.push(testarray);\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n            hole.push(testarray);\r\n          }\r\n\r\n          newPos.push(hole);\r\n        } else {\r\n          length += posarrays[index - 1][0].length;\r\n\r\n          for (let j = length; j < posarrays[index][0].length + length; j++) {\r\n            testarray.push((layerLength[j + 1] as any).getLatLng());\r\n          }\r\n          hole.push(testarray);\r\n          newPos.push(hole);\r\n        }\r\n      }\r\n    } else {\r\n      // testarray = []\r\n      hole = [];\r\n      let length2 = 0;\r\n      for (let index = 0; index < posarrays[0].length; index++) {\r\n        testarray = [];\r\n\r\n        if (index === 0) {\r\n          if (posarrays[0][index].length > 1) {\r\n            for (let j = 0; j < posarrays[0][index].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          } else {\r\n            for (let j = 0; j < posarrays[0][0].length; j++) {\r\n              testarray.push(layerLength[j + 1].getLatLng());\r\n            }\r\n          }\r\n        } else {\r\n          length2 += posarrays[0][index - 1].length;\r\n\r\n          for (let j = length2; j < posarrays[0][index].length + length2; j++) {\r\n            testarray.push(layerLength[j + 1].getLatLng());\r\n          }\r\n        }\r\n        hole.push(testarray);\r\n      }\r\n      newPos.push(hole);\r\n    }\r\n\r\n    layerLength[0].setLatLngs(newPos);\r\n  }\r\n  // check this\r\n  private markerDragEnd(FeatureGroup: L.FeatureGroup) {\r\n    this.polygonInformation.deletePolygonInformationStorage();\r\n    const featureCollection = FeatureGroup.toGeoJSON() as any;\r\n\r\n    if (featureCollection.features[0].geometry.coordinates.length > 1) {\r\n      featureCollection.features[0].geometry.coordinates.forEach(element => {\r\n        const feature = this.turfHelper.getMultiPolygon([element]);\r\n\r\n        if (this.turfHelper.hasKinks(feature)) {\r\n          this.kinks = true;\r\n          const unkink = this.turfHelper.getKinks(feature);\r\n          // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n          this.removeFeatureGroup(FeatureGroup);\r\n\r\n          unkink.forEach(polygon => {\r\n            this.addPolygon(\r\n              this.turfHelper.getTurfPolygon(polygon),\r\n              false,\r\n              true\r\n            );\r\n          });\r\n        } else {\r\n          this.kinks = false;\r\n          this.addPolygon(feature, false);\r\n        }\r\n      });\r\n    } else {\r\n      const feature = this.turfHelper.getMultiPolygon(\r\n        featureCollection.features[0].geometry.coordinates\r\n      );\r\n\r\n      if (this.turfHelper.hasKinks(feature)) {\r\n        this.kinks = true;\r\n        const unkink = this.turfHelper.getKinks(feature);\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.removeFeatureGroup(FeatureGroup);\r\n\r\n        const testCoord = [];\r\n        unkink.forEach(polygon => {\r\n          this.addPolygon(this.turfHelper.getTurfPolygon(polygon), false, true);\r\n        });\r\n        // this.addPolygon(this.turfHelper.getMultiPolygon(testCoord), false, true);\r\n      } else {\r\n        // this.deletePolygon(this.getLatLngsFromJson(feature));\r\n        this.kinks = false;\r\n        this.addPolygon(feature, false);\r\n      }\r\n    }\r\n    this.polygonInformation.createPolygonInformationStorage(\r\n      this.arrayOfFeatureGroups\r\n    );\r\n  }\r\n  // fine, check the returned type\r\n  private getLatLngsFromJson(\r\n    feature: Feature<Polygon | MultiPolygon>\r\n  ): ILatLng[][] {\r\n    let coord;\r\n    if (feature) {\r\n      if (\r\n        feature.geometry.coordinates.length > 1 &&\r\n        feature.geometry.type === 'MultiPolygon'\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      } else if (\r\n        feature.geometry.coordinates[0].length > 1 &&\r\n        feature.geometry.type === 'Polygon'\r\n      ) {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0]);\r\n      } else {\r\n        coord = L.GeoJSON.coordsToLatLngs(feature.geometry.coordinates[0][0]);\r\n      }\r\n    }\r\n\r\n    return coord;\r\n  }\r\n\r\n  // fine\r\n  private unionPolygons(\r\n    layers,\r\n    latlngs: Feature<Polygon | MultiPolygon>,\r\n    polygonFeature\r\n  ) {\r\n    let addNew = latlngs;\r\n    layers.forEach((featureGroup, i) => {\r\n      const featureCollection = featureGroup.toGeoJSON();\r\n      const layer = featureCollection.features[0];\r\n      const poly = this.getLatLngsFromJson(layer);\r\n      const union = this.turfHelper.union(addNew, polygonFeature[i]); // Check for multipolygons\r\n      // Needs a cleanup for the new version\r\n      this.deletePolygonOnMerge(poly);\r\n      this.removeFeatureGroup(featureGroup);\r\n\r\n      addNew = union;\r\n    });\r\n\r\n    const newLatlngs: Feature<Polygon | MultiPolygon> = addNew; // Trenger kanskje this.turfHelper.getTurfPolygon( addNew);\r\n    this.addPolygonLayer(newLatlngs, true);\r\n  }\r\n  // fine\r\n  private removeFeatureGroup(featureGroup: L.FeatureGroup) {\r\n    featureGroup.clearLayers();\r\n    this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n      featureGroups => featureGroups !== featureGroup\r\n    );\r\n    // this.updatePolygons();\r\n    this.map.removeLayer(featureGroup);\r\n  }\r\n  // fine until refactoring\r\n  private removeFeatureGroupOnMerge(featureGroup: L.FeatureGroup) {\r\n    const newArray = [];\r\n    if (featureGroup.getLayers()[0]) {\r\n      const polygon = (featureGroup.getLayers()[0] as any).getLatLngs()[0];\r\n      this.polygonInformation.polygonInformationStorage.forEach(v => {\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() === polygon[0][0].toString()\r\n        ) {\r\n          v.polygon = polygon;\r\n          newArray.push(v);\r\n        }\r\n\r\n        if (\r\n          v.polygon.toString() !== polygon[0].toString() &&\r\n          v.polygon[0].toString() !== polygon[0][0].toString()\r\n        ) {\r\n          newArray.push(v);\r\n        }\r\n      });\r\n      featureGroup.clearLayers();\r\n      this.arrayOfFeatureGroups = this.arrayOfFeatureGroups.filter(\r\n        featureGroups => featureGroups !== featureGroup\r\n      );\r\n\r\n      this.map.removeLayer(featureGroup);\r\n    }\r\n  }\r\n  // fine until refactoring\r\n  private deletePolygonOnMerge(polygon) {\r\n    let polygon2 = [];\r\n    if (this.arrayOfFeatureGroups.length > 0) {\r\n      this.arrayOfFeatureGroups.forEach(featureGroup => {\r\n        const layer = featureGroup.getLayers()[0] as any;\r\n        const latlngs = layer.getLatLngs()[0];\r\n        polygon2 = [...latlngs[0]];\r\n        if (latlngs[0][0] !== latlngs[0][latlngs[0].length - 1]) {\r\n          polygon2.push(latlngs[0][0]);\r\n        }\r\n        const equals = this.polygonArrayEqualsMerge(polygon2, polygon);\r\n\r\n        if (equals) {\r\n          this.removeFeatureGroupOnMerge(featureGroup);\r\n          this.deletePolygon(polygon);\r\n          this.polygonInformation.deleteTrashcan(polygon);\r\n          // this.updatePolygons();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEqualsMerge(poly1: any[], poly2: any[]): boolean {\r\n    return poly1.toString() === poly2.toString();\r\n  }\r\n  // TODO - legge et annet sted\r\n  private polygonArrayEquals(poly1: any[], poly2: any[]): boolean {\r\n    if (poly1[0][0]) {\r\n      if (!poly1[0][0].equals(poly2[0][0])) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!poly1[0].equals(poly2[0])) {\r\n        return false;\r\n      }\r\n    }\r\n    if (poly1.length !== poly2.length) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n  // fine\r\n  private setLeafletMapEvents(\r\n    enableDragging: boolean,\r\n    enableDoubleClickZoom: boolean,\r\n    enableScrollWheelZoom: boolean\r\n  ) {\r\n    enableDragging ? this.map.dragging.enable() : this.map.dragging.disable();\r\n    enableDoubleClickZoom\r\n      ? this.map.doubleClickZoom.enable()\r\n      : this.map.doubleClickZoom.disable();\r\n    enableScrollWheelZoom\r\n      ? this.map.scrollWheelZoom.enable()\r\n      : this.map.scrollWheelZoom.disable();\r\n  }\r\n  // fine\r\n  setDrawMode(mode: DrawMode) {\r\n    this.drawModeSubject.next(mode);\r\n    if (!!this.map) {\r\n      let isActiveDrawMode = true;\r\n      switch (mode) {\r\n        case DrawMode.Off:\r\n          L.DomUtil.removeClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(false);\r\n          this.stopDraw();\r\n          this.tracer.setStyle({\r\n            color: ''\r\n          });\r\n          this.setLeafletMapEvents(true, true, true);\r\n          isActiveDrawMode = false;\r\n          break;\r\n        case DrawMode.Add:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: defaultConfig.polyLineOptions.color\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n        case DrawMode.Subtract:\r\n          L.DomUtil.addClass(\r\n            this.map.getContainer(),\r\n            'crosshair-cursor-enabled'\r\n          );\r\n          this.events(true);\r\n          this.tracer.setStyle({\r\n            color: '#D9460F'\r\n          });\r\n          this.setLeafletMapEvents(false, false, false);\r\n          break;\r\n      }\r\n\r\n      if (isActiveDrawMode) {\r\n        this.polygonInformation.setFreeDrawMode();\r\n      } else {\r\n        this.polygonInformation.setMoveMode();\r\n      }\r\n    }\r\n  }\r\n\r\n  modeChange(mode: DrawMode): void {\r\n    this.setDrawMode(mode);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  drawModeClick(): void {\r\n    if (this.polygonInformation.polygonDrawStates.isFreeDrawMode) {\r\n      this.polygonInformation.setMoveMode();\r\n      this.setDrawMode(DrawMode.Off);\r\n    } else {\r\n      this.polygonInformation.setFreeDrawMode();\r\n      this.setDrawMode(DrawMode.Add);\r\n    }\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // remove, use modeChange\r\n  freedrawMenuClick(): void {\r\n    this.setDrawMode(DrawMode.Add);\r\n    this.polygonInformation.activate();\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n\r\n  // remove, use modeChange\r\n  subtractClick(): void {\r\n    this.setDrawMode(DrawMode.Subtract);\r\n    this.polygonInformation.saveCurrentState();\r\n  }\r\n  // fine\r\n  private resetTracker() {\r\n    this.tracer.setLatLngs([[0, 0]]);\r\n  }\r\n\r\n  toggleMarkerMenu(): void {\r\n    alert('open menu');\r\n  }\r\n  private getHtmlContent(callBack: Function): HTMLElement {\r\n    const comp = this.popupGenerator.generateAlterPopup();\r\n    comp.instance.bboxClicked.subscribe(e => {\r\n      callBack(e);\r\n    });\r\n    comp.instance.simplyfiClicked.subscribe(e => {\r\n      callBack(e);\r\n    });\r\n    return comp.location.nativeElement;\r\n  }\r\n  private convertToBoundsPolygon(\r\n    latlngs: ILatLng[],\r\n    addMidpointMarkers: boolean = false\r\n  ) {\r\n    this.deletePolygon([latlngs]);\r\n    const polygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    const newPolygon = this.turfHelper.convertToBoundingBoxPolygon(\r\n      polygon,\r\n      addMidpointMarkers\r\n    );\r\n\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), false);\r\n  }\r\n  private convertToSimplifiedPolygon(latlngs: ILatLng[]) {\r\n    this.deletePolygon([latlngs]);\r\n    const newPolygon = this.turfHelper.getMultiPolygon(\r\n      this.convertToCoords([latlngs])\r\n    );\r\n    this.addPolygonLayer(this.turfHelper.getTurfPolygon(newPolygon), true);\r\n  }\r\n  private getMarkerIndex(latlngs: ILatLng[], position: MarkerPosition): number {\r\n    const bounds: L.LatLngBounds = PolyDrawUtil.getBounds(\r\n      latlngs,\r\n      Math.sqrt(2) / 2\r\n    );\r\n    const compass = new Compass(\r\n      bounds.getSouth(),\r\n      bounds.getWest(),\r\n      bounds.getNorth(),\r\n      bounds.getEast()\r\n    );\r\n    const compassDirection = compass.getDirection(position);\r\n    const latLngPoint: ILatLng = {\r\n      lat: compassDirection.lat,\r\n      lng: compassDirection.lng\r\n    };\r\n    const targetPoint = this.turfHelper.getCoord(latLngPoint);\r\n    const fc = this.turfHelper.getFeaturePointCollection(latlngs);\r\n    const nearestPointIdx = this.turfHelper.getNearestPointIndex(\r\n      targetPoint,\r\n      fc as any\r\n    );\r\n\r\n    return nearestPointIdx;\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { AlterPolygonComponent } from \"./popups/alter-polygon/alter-polygon.component\";\r\nimport { PolyDrawService } from './polydraw.service';\r\nimport { PolygonInformationService } from './polygon-information.service';\r\nimport { PolyStateService } from './map-state.service';\r\n\r\n@NgModule({\r\n  declarations: [ AlterPolygonComponent],\r\n  imports: [],\r\n  providers: [PolyDrawService, PolygonInformationService, PolyStateService],\r\n  exports: [AlterPolygonComponent ],\r\n  entryComponents: [AlterPolygonComponent]\r\n})\r\nexport class MyLibModule {}\r\n","\r\n/*\r\n * Public API Surface of my-lib\r\n */\r\n\r\nexport {PolyDrawService} from './lib/polydraw.service';\r\nexport * from './lib/popups/alter-polygon/alter-polygon.component';\r\nexport {PolyStateService} from './lib/map-state.service';\r\nexport * from './lib/component-generater.service';\r\nexport {PolygonInformationService} from './lib/polygon-information.service';\r\nexport * from './lib/my-lib.module';\r\nexport * from './lib/enums';\r\nexport * from './lib/polygon-helpers';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {LeafletHelperService as ɵb} from './lib/leaflet-helper.service';\nexport {TurfHelperService as ɵa} from './lib/turf-helper.service';"],"names":["L.Polyline","union","turf.union","turf.explode","turf.multiPolygon","turf.simplify","turf.unkinkPolygon","turf.featureEach","turf.getCoords","turf.kinks","intersect","turf.intersect","turf.booleanPointInPolygon","turf.distance","turf.booleanWithin","turf.polygon","bbox","turf.bbox","bboxPolygon","turf.bboxPolygon","polygon","turf.nearestPoint","turf.coordReduce","turf.difference","nearestPoint","centerOfMass","turf.centerOfMass","turf.getCoord","turf.point","turf.featureCollection","L.Polygon","area","turf.area","turf.length","midpoint","turf.midpoint","L.polygon","L.polyline","L.FeatureGroup","L.GeoJSON","L.Marker","L.divIcon","L.DomUtil"],"mappings":"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"}